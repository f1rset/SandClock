
SandClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f6c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  08002078  08002078  00003078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027bc  080027bc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080027bc  080027bc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027bc  080027bc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027bc  080027bc  000037bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027c0  080027c0  000037c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080027c4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  2000000c  080027d0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  080027d0  00004524  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c95  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c72  00000000  00000000  0000bcca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0000d940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000604  00000000  00000000  0000e170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001787f  00000000  00000000  0000e774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000090fe  00000000  00000000  00025ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000831ae  00000000  00000000  0002f0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b229f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f64  00000000  00000000  000b22e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000b4248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002060 	.word	0x08002060

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002060 	.word	0x08002060

0800014c <MX_GPIO_Init>:
 */

#include "gpio.h"
#include "main.h"
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000160:	4b21      	ldr	r3, [pc, #132]	@ (80001e8 <MX_GPIO_Init+0x9c>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a20      	ldr	r2, [pc, #128]	@ (80001e8 <MX_GPIO_Init+0x9c>)
 8000166:	f043 0304 	orr.w	r3, r3, #4
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b1e      	ldr	r3, [pc, #120]	@ (80001e8 <MX_GPIO_Init+0x9c>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0304 	and.w	r3, r3, #4
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000178:	4b1b      	ldr	r3, [pc, #108]	@ (80001e8 <MX_GPIO_Init+0x9c>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a1a      	ldr	r2, [pc, #104]	@ (80001e8 <MX_GPIO_Init+0x9c>)
 800017e:	f043 0308 	orr.w	r3, r3, #8
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b18      	ldr	r3, [pc, #96]	@ (80001e8 <MX_GPIO_Init+0x9c>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0308 	and.w	r3, r3, #8
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD1_RST_Pin|LCD1_DC_Pin|LCD1_CS_Pin, GPIO_PIN_RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	f640 4104 	movw	r1, #3076	@ 0xc04
 8000196:	4815      	ldr	r0, [pc, #84]	@ (80001ec <MX_GPIO_Init+0xa0>)
 8000198:	f001 f8be 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD2_RST_Pin|LCD2_DC_Pin|LCD2_CS_Pin, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	2158      	movs	r1, #88	@ 0x58
 80001a0:	4813      	ldr	r0, [pc, #76]	@ (80001f0 <MX_GPIO_Init+0xa4>)
 80001a2:	f001 f8b9 	bl	8001318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD1_RST_Pin LCD1_DC_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD1_RST_Pin|LCD1_DC_Pin|LCD1_CS_Pin;
 80001a6:	f640 4304 	movw	r3, #3076	@ 0xc04
 80001aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ac:	2301      	movs	r3, #1
 80001ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b0:	2300      	movs	r3, #0
 80001b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001b4:	2302      	movs	r3, #2
 80001b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001b8:	f107 0308 	add.w	r3, r7, #8
 80001bc:	4619      	mov	r1, r3
 80001be:	480b      	ldr	r0, [pc, #44]	@ (80001ec <MX_GPIO_Init+0xa0>)
 80001c0:	f000 ff26 	bl	8001010 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD2_RST_Pin LCD2_DC_Pin LCD2_CS_Pin */
  GPIO_InitStruct.Pin = LCD2_RST_Pin|LCD2_DC_Pin|LCD2_CS_Pin;
 80001c4:	2358      	movs	r3, #88	@ 0x58
 80001c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c8:	2301      	movs	r3, #1
 80001ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001cc:	2300      	movs	r3, #0
 80001ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d0:	2302      	movs	r3, #2
 80001d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001d4:	f107 0308 	add.w	r3, r7, #8
 80001d8:	4619      	mov	r1, r3
 80001da:	4805      	ldr	r0, [pc, #20]	@ (80001f0 <MX_GPIO_Init+0xa4>)
 80001dc:	f000 ff18 	bl	8001010 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80001e0:	bf00      	nop
 80001e2:	3718      	adds	r7, #24
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	40021000 	.word	0x40021000
 80001ec:	40010800 	.word	0x40010800
 80001f0:	40010c00 	.word	0x40010c00

080001f4 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 fb7c 	bl	80008fc <LCD5110_refresh_ll>
}
 8000204:	bf00      	nop
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}

0800020c <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	60f8      	str	r0, [r7, #12]
 8000214:	60b9      	str	r1, [r7, #8]
 8000216:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f503 7205 	add.w	r2, r3, #532	@ 0x214
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	68b9      	ldr	r1, [r7, #8]
 8000222:	68f8      	ldr	r0, [r7, #12]
 8000224:	f000 f86e 	bl	8000304 <LCD5110_wset_cursor>
}
 8000228:	bf00      	nop
 800022a:	3710      	adds	r7, #16
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}

08000230 <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	60f8      	str	r0, [r7, #12]
 8000238:	60b9      	str	r1, [r7, #8]
 800023a:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f503 7205 	add.w	r2, r3, #532	@ 0x214
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	68b9      	ldr	r1, [r7, #8]
 8000246:	68f8      	ldr	r0, [r7, #12]
 8000248:	f000 f890 	bl	800036c <LCD5110_wprint>
}
 800024c:	bf00      	nop
 800024e:	3710      	adds	r7, #16
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000256:	b08b      	sub	sp, #44	@ 0x2c
 8000258:	af04      	add	r7, sp, #16
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	603b      	str	r3, [r7, #0]
 8000260:	4613      	mov	r3, r2
 8000262:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8000264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000266:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800026a:	2b00      	cmp	r3, #0
 800026c:	db41      	blt.n	80002f2 <LCD5110_wputchar+0x9e>
 800026e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000270:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000274:	2b00      	cmp	r3, #0
 8000276:	db3c      	blt.n	80002f2 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800027a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800027e:	461a      	mov	r2, r3
 8000280:	2306      	movs	r3, #6
 8000282:	4413      	add	r3, r2
 8000284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000286:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800028a:	4293      	cmp	r3, r2
 800028c:	d833      	bhi.n	80002f6 <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 800028e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000290:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000294:	461a      	mov	r2, r3
 8000296:	2308      	movs	r3, #8
 8000298:	4413      	add	r3, r2
 800029a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800029c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d828      	bhi.n	80002f6 <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 80002a4:	4b16      	ldr	r3, [pc, #88]	@ (8000300 <LCD5110_wputchar+0xac>)
 80002a6:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 80002a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80002aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002ae:	461a      	mov	r2, r3
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	18d0      	adds	r0, r2, r3
 80002b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80002b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002ba:	461a      	mov	r2, r3
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	18d1      	adds	r1, r2, r3
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	2206      	movs	r2, #6
 80002c4:	fb02 f303 	mul.w	r3, r2, r3
 80002c8:	697a      	ldr	r2, [r7, #20]
 80002ca:	441a      	add	r2, r3
 80002cc:	2306      	movs	r3, #6
 80002ce:	461e      	mov	r6, r3
 80002d0:	2308      	movs	r3, #8
 80002d2:	461c      	mov	r4, r3
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	bf0c      	ite	eq
 80002da:	2301      	moveq	r3, #1
 80002dc:	2300      	movne	r3, #0
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	461d      	mov	r5, r3
 80002e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80002e4:	9302      	str	r3, [sp, #8]
 80002e6:	9501      	str	r5, [sp, #4]
 80002e8:	9400      	str	r4, [sp, #0]
 80002ea:	4633      	mov	r3, r6
 80002ec:	f000 f909 	bl	8000502 <LCD5110_drawBitmap>
 80002f0:	e002      	b.n	80002f8 <LCD5110_wputchar+0xa4>
		return;
 80002f2:	bf00      	nop
 80002f4:	e000      	b.n	80002f8 <LCD5110_wputchar+0xa4>
		return;
 80002f6:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 80002f8:	371c      	adds	r7, #28
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fe:	bf00      	nop
 8000300:	08002088 	.word	0x08002088

08000304 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]
 8000310:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	b21a      	sxth	r2, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	b21a      	sxth	r2, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	815a      	strh	r2, [r3, #10]
}
 8000322:	bf00      	nop
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800033c:	b29a      	uxth	r2, r3
 800033e:	2308      	movs	r3, #8
 8000340:	b29b      	uxth	r3, r3
 8000342:	4413      	add	r3, r2
 8000344:	b29b      	uxth	r3, r3
 8000346:	3301      	adds	r3, #1
 8000348:	b29b      	uxth	r3, r3
 800034a:	b21a      	sxth	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2202      	movs	r2, #2
 8000354:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	7b1b      	ldrb	r3, [r3, #12]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d002      	beq.n	8000364 <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 800035e:	6838      	ldr	r0, [r7, #0]
 8000360:	f7ff ff48 	bl	80001f4 <LCD5110_refresh>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b086      	sub	sp, #24
 8000370:	af02      	add	r7, sp, #8
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 800037a:	e053      	b.n	8000424 <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b0a      	cmp	r3, #10
 8000382:	d010      	beq.n	80003a6 <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800038a:	4618      	mov	r0, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000392:	4619      	mov	r1, r3
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	f7ff ff57 	bl	8000254 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80003ac:	b29a      	uxth	r2, r3
 80003ae:	2306      	movs	r3, #6
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	4413      	add	r3, r2
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	b21a      	sxth	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80003c2:	461a      	mov	r2, r3
 80003c4:	2306      	movs	r3, #6
 80003c6:	4413      	add	r3, r2
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d904      	bls.n	80003dc <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	3301      	adds	r3, #1
 80003d6:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 80003d8:	2b0a      	cmp	r3, #10
 80003da:	d103      	bne.n	80003e4 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b0a      	cmp	r3, #10
 80003e2:	d111      	bne.n	8000408 <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 80003e4:	6839      	ldr	r1, [r7, #0]
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f7ff ffa0 	bl	800032c <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	3301      	adds	r3, #1
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	3301      	adds	r3, #1
 80003f4:	4a10      	ldr	r2, [pc, #64]	@ (8000438 <LCD5110_wprint+0xcc>)
 80003f6:	4413      	add	r3, r2
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f003 0308 	and.w	r3, r3, #8
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d002      	beq.n	8000408 <LCD5110_wprint+0x9c>
				++str;
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	3301      	adds	r3, #1
 8000406:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800040e:	461a      	mov	r2, r3
 8000410:	2308      	movs	r3, #8
 8000412:	4413      	add	r3, r2
 8000414:	687a      	ldr	r2, [r7, #4]
 8000416:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800041a:	4293      	cmp	r3, r2
 800041c:	d807      	bhi.n	800042e <LCD5110_wprint+0xc2>
			break;
		str++;
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	3301      	adds	r3, #1
 8000422:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d1a7      	bne.n	800037c <LCD5110_wprint+0x10>

	}
}
 800042c:	e000      	b.n	8000430 <LCD5110_wprint+0xc4>
			break;
 800042e:	bf00      	nop
}
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	080026ba 	.word	0x080026ba

0800043c <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 800043c:	b480      	push	{r7}
 800043e:	b087      	sub	sp, #28
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	10db      	asrs	r3, r3, #3
 800044c:	2254      	movs	r2, #84	@ 0x54
 800044e:	fb03 f202 	mul.w	r2, r3, r2
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	4413      	add	r3, r2
 8000456:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f003 0307 	and.w	r3, r3, #7
 800045e:	2201      	movs	r2, #1
 8000460:	fa02 f303 	lsl.w	r3, r2, r3
 8000464:	b2db      	uxtb	r3, r3
 8000466:	753b      	strb	r3, [r7, #20]

	return res;
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	461a      	mov	r2, r3
 800046c:	f107 0310 	add.w	r3, r7, #16
 8000470:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000474:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000478:	68f8      	ldr	r0, [r7, #12]
 800047a:	371c      	adds	r7, #28
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 8000482:	b580      	push	{r7, lr}
 8000484:	b086      	sub	sp, #24
 8000486:	af00      	add	r7, sp, #0
 8000488:	60f8      	str	r0, [r7, #12]
 800048a:	60b9      	str	r1, [r7, #8]
 800048c:	607a      	str	r2, [r7, #4]
 800048e:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	2b00      	cmp	r3, #0
 8000494:	db31      	blt.n	80004fa <LCD5110_putpix+0x78>
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	2b00      	cmp	r3, #0
 800049a:	db2e      	blt.n	80004fa <LCD5110_putpix+0x78>
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	2b53      	cmp	r3, #83	@ 0x53
 80004a0:	dc2b      	bgt.n	80004fa <LCD5110_putpix+0x78>
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80004a6:	dc28      	bgt.n	80004fa <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	68ba      	ldr	r2, [r7, #8]
 80004ae:	68f9      	ldr	r1, [r7, #12]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ffc3 	bl	800043c <xy_to_pix>

	if (color)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d00c      	beq.n	80004d6 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 80004bc:	693b      	ldr	r3, [r7, #16]
 80004be:	683a      	ldr	r2, [r7, #0]
 80004c0:	4413      	add	r3, r2
 80004c2:	7f19      	ldrb	r1, [r3, #28]
 80004c4:	7d3a      	ldrb	r2, [r7, #20]
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	430a      	orrs	r2, r1
 80004ca:	b2d1      	uxtb	r1, r2
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	4413      	add	r3, r2
 80004d0:	460a      	mov	r2, r1
 80004d2:	771a      	strb	r2, [r3, #28]
 80004d4:	e012      	b.n	80004fc <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 80004d6:	693b      	ldr	r3, [r7, #16]
 80004d8:	683a      	ldr	r2, [r7, #0]
 80004da:	4413      	add	r3, r2
 80004dc:	7f1b      	ldrb	r3, [r3, #28]
 80004de:	b25a      	sxtb	r2, r3
 80004e0:	7d3b      	ldrb	r3, [r7, #20]
 80004e2:	b25b      	sxtb	r3, r3
 80004e4:	43db      	mvns	r3, r3
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	4013      	ands	r3, r2
 80004ea:	b25a      	sxtb	r2, r3
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	b2d1      	uxtb	r1, r2
 80004f0:	683a      	ldr	r2, [r7, #0]
 80004f2:	4413      	add	r3, r2
 80004f4:	460a      	mov	r2, r1
 80004f6:	771a      	strb	r2, [r3, #28]
 80004f8:	e000      	b.n	80004fc <LCD5110_putpix+0x7a>
		return;
 80004fa:	bf00      	nop
}
 80004fc:	3718      	adds	r7, #24
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b088      	sub	sp, #32
 8000506:	af00      	add	r7, sp, #0
 8000508:	60f8      	str	r0, [r7, #12]
 800050a:	60b9      	str	r1, [r7, #8]
 800050c:	607a      	str	r2, [r7, #4]
 800050e:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
 8000514:	e03d      	b.n	8000592 <LCD5110_drawBitmap+0x90>
	{
		for (int cy=0; cy<rows; cy++)
 8000516:	2300      	movs	r3, #0
 8000518:	61bb      	str	r3, [r7, #24]
 800051a:	e033      	b.n	8000584 <LCD5110_drawBitmap+0x82>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	2b00      	cmp	r3, #0
 8000520:	da00      	bge.n	8000524 <LCD5110_drawBitmap+0x22>
 8000522:	3307      	adds	r3, #7
 8000524:	10db      	asrs	r3, r3, #3
 8000526:	461a      	mov	r2, r3
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	fb03 f202 	mul.w	r2, r3, r2
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	4413      	add	r3, r2
 8000532:	461a      	mov	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4413      	add	r3, r2
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 800053c:	69bb      	ldr	r3, [r7, #24]
 800053e:	f003 0307 	and.w	r3, r3, #7
 8000542:	2201      	movs	r2, #1
 8000544:	fa02 f303 	lsl.w	r3, r2, r3
 8000548:	b25a      	sxtb	r2, r3
 800054a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800054e:	4013      	ands	r3, r2
 8000550:	b25b      	sxtb	r3, r3
 8000552:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	18d0      	adds	r0, r2, r3
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	18d1      	adds	r1, r2, r3
 8000560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000562:	2b00      	cmp	r3, #0
 8000564:	d007      	beq.n	8000576 <LCD5110_drawBitmap+0x74>
 8000566:	7dfb      	ldrb	r3, [r7, #23]
 8000568:	2b00      	cmp	r3, #0
 800056a:	bf0c      	ite	eq
 800056c:	2301      	moveq	r3, #1
 800056e:	2300      	movne	r3, #0
 8000570:	b2db      	uxtb	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	e000      	b.n	8000578 <LCD5110_drawBitmap+0x76>
 8000576:	7dfa      	ldrb	r2, [r7, #23]
 8000578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800057a:	f7ff ff82 	bl	8000482 <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	3301      	adds	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	69ba      	ldr	r2, [r7, #24]
 8000586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000588:	429a      	cmp	r2, r3
 800058a:	dbc7      	blt.n	800051c <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	3301      	adds	r3, #1
 8000590:	61fb      	str	r3, [r7, #28]
 8000592:	69fa      	ldr	r2, [r7, #28]
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	429a      	cmp	r2, r3
 8000598:	dbbd      	blt.n	8000516 <LCD5110_drawBitmap+0x14>
		}
	}
}
 800059a:	bf00      	nop
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	6039      	str	r1, [r7, #0]
 80005ae:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	1df9      	adds	r1, r7, #7
 80005b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ba:	2201      	movs	r2, #1
 80005bc:	f001 fb26 	bl	8001c0c <HAL_SPI_Transmit>
 80005c0:	4603      	mov	r3, r0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b084      	sub	sp, #16
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	60f8      	str	r0, [r7, #12]
 80005d2:	460b      	mov	r3, r1
 80005d4:	607a      	str	r2, [r7, #4]
 80005d6:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	897a      	ldrh	r2, [r7, #10]
 80005de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e2:	68f9      	ldr	r1, [r7, #12]
 80005e4:	f001 fb12 	bl	8001c0c <HAL_SPI_Transmit>
 80005e8:	4603      	mov	r3, r0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6898      	ldr	r0, [r3, #8]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	889b      	ldrh	r3, [r3, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	4619      	mov	r1, r3
 8000606:	f000 fe87 	bl	8001318 <HAL_GPIO_WritePin>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6998      	ldr	r0, [r3, #24]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	8a9b      	ldrh	r3, [r3, #20]
 8000622:	2201      	movs	r2, #1
 8000624:	4619      	mov	r1, r3
 8000626:	f000 fe77 	bl	8001318 <HAL_GPIO_WritePin>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6998      	ldr	r0, [r3, #24]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	8a9b      	ldrh	r3, [r3, #20]
 8000642:	2200      	movs	r2, #0
 8000644:	4619      	mov	r1, r3
 8000646:	f000 fe67 	bl	8001318 <HAL_GPIO_WritePin>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 8000652:	b580      	push	{r7, lr}
 8000654:	b082      	sub	sp, #8
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6918      	ldr	r0, [r3, #16]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	899b      	ldrh	r3, [r3, #12]
 8000662:	2201      	movs	r2, #1
 8000664:	4619      	mov	r1, r3
 8000666:	f000 fe57 	bl	8001318 <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6918      	ldr	r0, [r3, #16]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	899b      	ldrh	r3, [r3, #12]
 8000682:	2200      	movs	r2, #0
 8000684:	4619      	mov	r1, r3
 8000686:	f000 fe47 	bl	8001318 <HAL_GPIO_WritePin>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	6039      	str	r1, [r7, #0]
 800069c:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f023 0320 	bic.w	r3, r3, #32
 80006a4:	2b07      	cmp	r3, #7
 80006a6:	dd01      	ble.n	80006ac <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e008      	b.n	80006be <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	f043 0320 	orr.w	r3, r3, #32
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	6839      	ldr	r1, [r7, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff ff74 	bl	80005a4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	4603      	mov	r3, r0
 80006ce:	6039      	str	r1, [r7, #0]
 80006d0:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f023 030d 	bic.w	r3, r3, #13
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 80006dc:	2302      	movs	r3, #2
 80006de:	e005      	b.n	80006ec <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	6839      	ldr	r1, [r7, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff5d 	bl	80005a4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80006ea:	2300      	movs	r3, #0
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8000700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000704:	2b00      	cmp	r3, #0
 8000706:	da01      	bge.n	800070c <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8000708:	2303      	movs	r3, #3
 800070a:	e008      	b.n	800071e <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000712:	b2db      	uxtb	r3, r3
 8000714:	6839      	ldr	r1, [r7, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff44 	bl	80005a4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	6039      	str	r1, [r7, #0]
 8000730:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b03      	cmp	r3, #3
 8000736:	d901      	bls.n	800073c <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 8000738:	2304      	movs	r3, #4
 800073a:	e008      	b.n	800074e <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	b2db      	uxtb	r3, r3
 8000744:	6839      	ldr	r1, [r7, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff2c 	bl	80005a4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	6039      	str	r1, [r7, #0]
 8000760:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b07      	cmp	r3, #7
 8000766:	d901      	bls.n	800076c <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 8000768:	2305      	movs	r3, #5
 800076a:	e008      	b.n	800077e <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	b2db      	uxtb	r3, r3
 8000774:	6839      	ldr	r1, [r7, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff14 	bl	80005a4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	4603      	mov	r3, r0
 800078e:	6039      	str	r1, [r7, #0]
 8000790:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 8000792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000796:	2b00      	cmp	r3, #0
 8000798:	db03      	blt.n	80007a2 <LCD5110_set_X_base+0x1c>
 800079a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800079e:	2b53      	cmp	r3, #83	@ 0x53
 80007a0:	dd01      	ble.n	80007a6 <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 80007a2:	2307      	movs	r3, #7
 80007a4:	e00a      	b.n	80007bc <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	6839      	ldr	r1, [r7, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fef5 	bl	80005a4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 80007d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	db03      	blt.n	80007e0 <LCD5110_set_Y_base+0x1c>
 80007d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007dc:	2b05      	cmp	r3, #5
 80007de:	dd01      	ble.n	80007e4 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 80007e0:	2307      	movs	r3, #7
 80007e2:	e00a      	b.n	80007fa <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 80007e4:	88fb      	ldrh	r3, [r7, #6]
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	6839      	ldr	r1, [r7, #0]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fed6 	bl	80005a4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b084      	sub	sp, #16
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	603a      	str	r2, [r7, #0]
 800080c:	80fb      	strh	r3, [r7, #6]
 800080e:	460b      	mov	r3, r1
 8000810:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 8000812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000816:	6839      	ldr	r1, [r7, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ffb4 	bl	8000786 <LCD5110_set_X_base>
 800081e:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <LCD5110_set_XY_base+0x28>
		return res;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	e00c      	b.n	8000844 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 800082a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800082e:	6839      	ldr	r1, [r7, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ffc7 	bl	80007c4 <LCD5110_set_Y_base>
 8000836:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <LCD5110_set_XY_base+0x40>
		return res;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	e000      	b.n	8000844 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8000842:	2300      	movs	r3, #0
}
 8000844:	4618      	mov	r0, r3
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000866:	601a      	str	r2, [r3, #0]
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 8000872:	b580      	push	{r7, lr}
 8000874:	b084      	sub	sp, #16
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	4608      	mov	r0, r1
 800087c:	4611      	mov	r1, r2
 800087e:	461a      	mov	r2, r3
 8000880:	4603      	mov	r3, r0
 8000882:	70fb      	strb	r3, [r7, #3]
 8000884:	460b      	mov	r3, r1
 8000886:	70bb      	strb	r3, [r7, #2]
 8000888:	4613      	mov	r3, r2
 800088a:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ffdd 	bl	800084c <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff fead 	bl	80005f2 <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff feea 	bl	8000672 <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 800089e:	2364      	movs	r3, #100	@ 0x64
 80008a0:	60fb      	str	r3, [r7, #12]
	while (--i){}
 80008a2:	bf00      	nop
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d1fa      	bne.n	80008a4 <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff fecf 	bl	8000652 <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff febc 	bl	8000632 <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	2001      	movs	r0, #1
 80008be:	f7ff fee8 	bl	8000692 <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 80008c2:	78bb      	ldrb	r3, [r7, #2]
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff14 	bl	80006f4 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 80008cc:	787b      	ldrb	r3, [r7, #1]
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff28 	bl	8000726 <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 80008d6:	7e3b      	ldrb	r3, [r7, #24]
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff3b 	bl	8000756 <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 80008e0:	6879      	ldr	r1, [r7, #4]
 80008e2:	2000      	movs	r0, #0
 80008e4:	f7ff fed5 	bl	8000692 <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff feea 	bl	80006c6 <LCD5110_set_mode_base>

	return LCD5110_OK;
 80008f2:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff fe74 	bl	80005f2 <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fe91 	bl	8000632 <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	2100      	movs	r1, #0
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff ff74 	bl	8000802 <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff fe79 	bl	8000612 <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	331c      	adds	r3, #28
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fe4d 	bl	80005ca <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b083      	sub	sp, #12
 800093c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f000 fa21 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f879 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f7ff fc01 	bl	800014c <MX_GPIO_Init>
  MX_SPI1_Init();
 800094a:	f000 f8b7 	bl	8000abc <MX_SPI1_Init>
  MX_SPI2_Init();
 800094e:	f000 f8eb 	bl	8000b28 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  lcd1.hw_conf.spi_handle = &hspi1;
 8000952:	4b31      	ldr	r3, [pc, #196]	@ (8000a18 <main+0xe0>)
 8000954:	4a31      	ldr	r2, [pc, #196]	@ (8000a1c <main+0xe4>)
 8000956:	601a      	str	r2, [r3, #0]
  lcd1.hw_conf.spi_cs_pin =  LCD1_CS_Pin;
 8000958:	4b2f      	ldr	r3, [pc, #188]	@ (8000a18 <main+0xe0>)
 800095a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800095e:	809a      	strh	r2, [r3, #4]
  lcd1.hw_conf.spi_cs_port = LCD1_CS_GPIO_Port;
 8000960:	4b2d      	ldr	r3, [pc, #180]	@ (8000a18 <main+0xe0>)
 8000962:	4a2f      	ldr	r2, [pc, #188]	@ (8000a20 <main+0xe8>)
 8000964:	609a      	str	r2, [r3, #8]
  lcd1.hw_conf.rst_pin =  LCD1_RST_Pin;
 8000966:	4b2c      	ldr	r3, [pc, #176]	@ (8000a18 <main+0xe0>)
 8000968:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800096c:	819a      	strh	r2, [r3, #12]
  lcd1.hw_conf.rst_port = LCD1_RST_GPIO_Port;
 800096e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a18 <main+0xe0>)
 8000970:	4a2b      	ldr	r2, [pc, #172]	@ (8000a20 <main+0xe8>)
 8000972:	611a      	str	r2, [r3, #16]
  lcd1.hw_conf.dc_pin =  LCD1_DC_Pin;
 8000974:	4b28      	ldr	r3, [pc, #160]	@ (8000a18 <main+0xe0>)
 8000976:	2204      	movs	r2, #4
 8000978:	829a      	strh	r2, [r3, #20]
  lcd1.hw_conf.dc_port = LCD1_DC_GPIO_Port;
 800097a:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <main+0xe0>)
 800097c:	4a28      	ldr	r2, [pc, #160]	@ (8000a20 <main+0xe8>)
 800097e:	619a      	str	r2, [r3, #24]
  lcd1.def_scr = lcd5110_def_scr;
 8000980:	4b25      	ldr	r3, [pc, #148]	@ (8000a18 <main+0xe0>)
 8000982:	4a28      	ldr	r2, [pc, #160]	@ (8000a24 <main+0xec>)
 8000984:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8000988:	4614      	mov	r4, r2
 800098a:	6820      	ldr	r0, [r4, #0]
 800098c:	6861      	ldr	r1, [r4, #4]
 800098e:	68a2      	ldr	r2, [r4, #8]
 8000990:	c307      	stmia	r3!, {r0, r1, r2}
 8000992:	89a2      	ldrh	r2, [r4, #12]
 8000994:	801a      	strh	r2, [r3, #0]
  LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8000996:	2303      	movs	r3, #3
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2302      	movs	r3, #2
 800099c:	2240      	movs	r2, #64	@ 0x40
 800099e:	210c      	movs	r1, #12
 80009a0:	481d      	ldr	r0, [pc, #116]	@ (8000a18 <main+0xe0>)
 80009a2:	f7ff ff66 	bl	8000872 <LCD5110_init>

  LCD5110_print("Hello world!\n", BLACK, &lcd1);
 80009a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a18 <main+0xe0>)
 80009a8:	2101      	movs	r1, #1
 80009aa:	481f      	ldr	r0, [pc, #124]	@ (8000a28 <main+0xf0>)
 80009ac:	f7ff fc40 	bl	8000230 <LCD5110_print>

  lcd2.hw_conf.spi_handle = &hspi2;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <main+0xf4>)
 80009b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a30 <main+0xf8>)
 80009b4:	601a      	str	r2, [r3, #0]
  lcd2.hw_conf.spi_cs_pin =  LCD2_CS_Pin;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <main+0xf4>)
 80009b8:	2240      	movs	r2, #64	@ 0x40
 80009ba:	809a      	strh	r2, [r3, #4]
  lcd2.hw_conf.spi_cs_port = LCD2_CS_GPIO_Port;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <main+0xf4>)
 80009be:	4a1d      	ldr	r2, [pc, #116]	@ (8000a34 <main+0xfc>)
 80009c0:	609a      	str	r2, [r3, #8]
  lcd2.hw_conf.rst_pin =  LCD2_RST_Pin;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <main+0xf4>)
 80009c4:	2208      	movs	r2, #8
 80009c6:	819a      	strh	r2, [r3, #12]
  lcd2.hw_conf.rst_port = LCD2_RST_GPIO_Port;
 80009c8:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <main+0xf4>)
 80009ca:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <main+0xfc>)
 80009cc:	611a      	str	r2, [r3, #16]
  lcd2.hw_conf.dc_pin =  LCD2_DC_Pin;
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <main+0xf4>)
 80009d0:	2210      	movs	r2, #16
 80009d2:	829a      	strh	r2, [r3, #20]
  lcd2.hw_conf.dc_port = LCD2_DC_GPIO_Port;
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <main+0xf4>)
 80009d6:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <main+0xfc>)
 80009d8:	619a      	str	r2, [r3, #24]
  lcd2.def_scr = lcd5110_def_scr;
 80009da:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <main+0xf4>)
 80009dc:	4a11      	ldr	r2, [pc, #68]	@ (8000a24 <main+0xec>)
 80009de:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80009e2:	4614      	mov	r4, r2
 80009e4:	6820      	ldr	r0, [r4, #0]
 80009e6:	6861      	ldr	r1, [r4, #4]
 80009e8:	68a2      	ldr	r2, [r4, #8]
 80009ea:	c307      	stmia	r3!, {r0, r1, r2}
 80009ec:	89a2      	ldrh	r2, [r4, #12]
 80009ee:	801a      	strh	r2, [r3, #0]
  LCD5110_init(&lcd2.hw_conf, LCD5110_INVERTED_MODE, 0x40, 2, 3);
 80009f0:	2303      	movs	r3, #3
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2302      	movs	r3, #2
 80009f6:	2240      	movs	r2, #64	@ 0x40
 80009f8:	210d      	movs	r1, #13
 80009fa:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <main+0xf4>)
 80009fc:	f7ff ff39 	bl	8000872 <LCD5110_init>

  LCD5110_set_cursor(20, 20, &lcd2);
 8000a00:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <main+0xf4>)
 8000a02:	2114      	movs	r1, #20
 8000a04:	2014      	movs	r0, #20
 8000a06:	f7ff fc01 	bl	800020c <LCD5110_set_cursor>
  LCD5110_print("Hello world!\n", BLACK, &lcd2);
 8000a0a:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <main+0xf4>)
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <main+0xf0>)
 8000a10:	f7ff fc0e 	bl	8000230 <LCD5110_print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <main+0xdc>
 8000a18:	20000028 	.word	0x20000028
 8000a1c:	200004c8 	.word	0x200004c8
 8000a20:	40010c00 	.word	0x40010c00
 8000a24:	08002688 	.word	0x08002688
 8000a28:	08002078 	.word	0x08002078
 8000a2c:	2000024c 	.word	0x2000024c
 8000a30:	20000470 	.word	0x20000470
 8000a34:	40010800 	.word	0x40010800

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b090      	sub	sp, #64	@ 0x40
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 0318 	add.w	r3, r7, #24
 8000a42:	2228      	movs	r2, #40	@ 0x28
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fadd 	bl	8002006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a62:	2310      	movs	r3, #16
 8000a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6a:	f107 0318 	add.w	r3, r7, #24
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 fc6a 	bl	8001348 <HAL_RCC_OscConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a7a:	f000 f818 	bl	8000aae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7e:	230f      	movs	r3, #15
 8000a80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fed8 	bl	800184c <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000aa2:	f000 f804 	bl	8000aae <Error_Handler>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3740      	adds	r7, #64	@ 0x40
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab2:	b672      	cpsid	i
}
 8000ab4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab6:	bf00      	nop
 8000ab8:	e7fd      	b.n	8000ab6 <Error_Handler+0x8>
	...

08000abc <MX_SPI1_Init>:
#include "spi.h"
#include "main.h"
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi1;
void MX_SPI1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000ac2:	4a18      	ldr	r2, [pc, #96]	@ (8000b24 <MX_SPI1_Init+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000ac8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000af0:	2210      	movs	r2, #16
 8000af2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <MX_SPI1_Init+0x64>)
 8000b0e:	f000 fff9 	bl	8001b04 <HAL_SPI_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b18:	f7ff ffc9 	bl	8000aae <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200004c8 	.word	0x200004c8
 8000b24:	40013000 	.word	0x40013000

08000b28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b2e:	4a18      	ldr	r2, [pc, #96]	@ (8000b90 <MX_SPI2_Init+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b40:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b5c:	2210      	movs	r2, #16
 8000b5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b66:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b72:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b74:	220a      	movs	r2, #10
 8000b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <MX_SPI2_Init+0x64>)
 8000b7a:	f000 ffc3 	bl	8001b04 <HAL_SPI_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b84:	f7ff ff93 	bl	8000aae <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000470 	.word	0x20000470
 8000b90:	40003800 	.word	0x40003800

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b9a:	4b15      	ldr	r3, [pc, #84]	@ (8000bf0 <HAL_MspInit+0x5c>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	4a14      	ldr	r2, [pc, #80]	@ (8000bf0 <HAL_MspInit+0x5c>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6193      	str	r3, [r2, #24]
 8000ba6:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <HAL_MspInit+0x5c>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <HAL_MspInit+0x5c>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf0 <HAL_MspInit+0x5c>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bbc:	61d3      	str	r3, [r2, #28]
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <HAL_MspInit+0x5c>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <HAL_MspInit+0x60>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <HAL_MspInit+0x60>)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40010000 	.word	0x40010000

08000bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	@ 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0318 	add.w	r3, r7, #24
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a2b      	ldr	r2, [pc, #172]	@ (8000cc0 <HAL_SPI_MspInit+0xc8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d125      	bne.n	8000c64 <HAL_SPI_MspInit+0x6c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c18:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <HAL_SPI_MspInit+0xcc>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a29      	ldr	r2, [pc, #164]	@ (8000cc4 <HAL_SPI_MspInit+0xcc>)
 8000c1e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b27      	ldr	r3, [pc, #156]	@ (8000cc4 <HAL_SPI_MspInit+0xcc>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b24      	ldr	r3, [pc, #144]	@ (8000cc4 <HAL_SPI_MspInit+0xcc>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a23      	ldr	r2, [pc, #140]	@ (8000cc4 <HAL_SPI_MspInit+0xcc>)
 8000c36:	f043 0304 	orr.w	r3, r3, #4
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <HAL_SPI_MspInit+0xcc>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD1_CLK_Pin|LCD1_DATA_Pin;
 8000c48:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	481a      	ldr	r0, [pc, #104]	@ (8000cc8 <HAL_SPI_MspInit+0xd0>)
 8000c5e:	f000 f9d7 	bl	8001010 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c62:	e028      	b.n	8000cb6 <HAL_SPI_MspInit+0xbe>
  else if(hspi->Instance==SPI2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a18      	ldr	r2, [pc, #96]	@ (8000ccc <HAL_SPI_MspInit+0xd4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d123      	bne.n	8000cb6 <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c6e:	4b15      	ldr	r3, [pc, #84]	@ (8000cc4 <HAL_SPI_MspInit+0xcc>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4a14      	ldr	r2, [pc, #80]	@ (8000cc4 <HAL_SPI_MspInit+0xcc>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c78:	61d3      	str	r3, [r2, #28]
 8000c7a:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <HAL_SPI_MspInit+0xcc>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <HAL_SPI_MspInit+0xcc>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc4 <HAL_SPI_MspInit+0xcc>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <HAL_SPI_MspInit+0xcc>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD2_CLK_Pin|LCD2_DATA_Pin;
 8000c9e:	23a0      	movs	r3, #160	@ 0xa0
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 0318 	add.w	r3, r7, #24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4807      	ldr	r0, [pc, #28]	@ (8000cd0 <HAL_SPI_MspInit+0xd8>)
 8000cb2:	f000 f9ad 	bl	8001010 <HAL_GPIO_Init>
}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	@ 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40013000 	.word	0x40013000
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010800 	.word	0x40010800
 8000ccc:	40003800 	.word	0x40003800
 8000cd0:	40010c00 	.word	0x40010c00

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <NMI_Handler+0x4>

08000cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f874 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d38:	f7ff fff8 	bl	8000d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d3c:	480b      	ldr	r0, [pc, #44]	@ (8000d6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d3e:	490c      	ldr	r1, [pc, #48]	@ (8000d70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d40:	4a0c      	ldr	r2, [pc, #48]	@ (8000d74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a09      	ldr	r2, [pc, #36]	@ (8000d78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d54:	4c09      	ldr	r4, [pc, #36]	@ (8000d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d62:	f001 f959 	bl	8002018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d66:	f7ff fde7 	bl	8000938 <main>
  bx lr
 8000d6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d74:	080027c4 	.word	0x080027c4
  ldr r2, =_sbss
 8000d78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d7c:	20000524 	.word	0x20000524

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <HAL_Init+0x28>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	@ (8000dac <HAL_Init+0x28>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f907 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 f808 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff fef8 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40022000 	.word	0x40022000

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <HAL_InitTick+0x54>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <HAL_InitTick+0x58>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f911 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dec:	f000 f8e7 	bl	8000fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4a06      	ldr	r2, [pc, #24]	@ (8000e0c <HAL_InitTick+0x5c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000004 	.word	0x20000004

08000e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <HAL_IncTick+0x1c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <HAL_IncTick+0x20>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a03      	ldr	r2, [pc, #12]	@ (8000e30 <HAL_IncTick+0x20>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000520 	.word	0x20000520

08000e34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b02      	ldr	r3, [pc, #8]	@ (8000e44 <HAL_GetTick+0x10>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	20000520 	.word	0x20000520

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	@ 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	@ 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f74:	d301      	bcc.n	8000f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00f      	b.n	8000f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f82:	210f      	movs	r1, #15
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f88:	f7ff ff90 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <SysTick_Config+0x40>)
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff49 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd0:	f7ff ff5e 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8000fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff ff90 	bl	8000f00 <NVIC_EncodePriority>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5f 	bl	8000eac <__NVIC_SetPriority>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffb0 	bl	8000f64 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b08b      	sub	sp, #44	@ 0x2c
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	e169      	b.n	80012f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001024:	2201      	movs	r2, #1
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	69fa      	ldr	r2, [r7, #28]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	429a      	cmp	r2, r3
 800103e:	f040 8158 	bne.w	80012f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4a9a      	ldr	r2, [pc, #616]	@ (80012b0 <HAL_GPIO_Init+0x2a0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d05e      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 800104c:	4a98      	ldr	r2, [pc, #608]	@ (80012b0 <HAL_GPIO_Init+0x2a0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d875      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 8001052:	4a98      	ldr	r2, [pc, #608]	@ (80012b4 <HAL_GPIO_Init+0x2a4>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d058      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 8001058:	4a96      	ldr	r2, [pc, #600]	@ (80012b4 <HAL_GPIO_Init+0x2a4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d86f      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 800105e:	4a96      	ldr	r2, [pc, #600]	@ (80012b8 <HAL_GPIO_Init+0x2a8>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d052      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 8001064:	4a94      	ldr	r2, [pc, #592]	@ (80012b8 <HAL_GPIO_Init+0x2a8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d869      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 800106a:	4a94      	ldr	r2, [pc, #592]	@ (80012bc <HAL_GPIO_Init+0x2ac>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d04c      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 8001070:	4a92      	ldr	r2, [pc, #584]	@ (80012bc <HAL_GPIO_Init+0x2ac>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d863      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 8001076:	4a92      	ldr	r2, [pc, #584]	@ (80012c0 <HAL_GPIO_Init+0x2b0>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d046      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 800107c:	4a90      	ldr	r2, [pc, #576]	@ (80012c0 <HAL_GPIO_Init+0x2b0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d85d      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 8001082:	2b12      	cmp	r3, #18
 8001084:	d82a      	bhi.n	80010dc <HAL_GPIO_Init+0xcc>
 8001086:	2b12      	cmp	r3, #18
 8001088:	d859      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 800108a:	a201      	add	r2, pc, #4	@ (adr r2, 8001090 <HAL_GPIO_Init+0x80>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	0800110b 	.word	0x0800110b
 8001094:	080010e5 	.word	0x080010e5
 8001098:	080010f7 	.word	0x080010f7
 800109c:	08001139 	.word	0x08001139
 80010a0:	0800113f 	.word	0x0800113f
 80010a4:	0800113f 	.word	0x0800113f
 80010a8:	0800113f 	.word	0x0800113f
 80010ac:	0800113f 	.word	0x0800113f
 80010b0:	0800113f 	.word	0x0800113f
 80010b4:	0800113f 	.word	0x0800113f
 80010b8:	0800113f 	.word	0x0800113f
 80010bc:	0800113f 	.word	0x0800113f
 80010c0:	0800113f 	.word	0x0800113f
 80010c4:	0800113f 	.word	0x0800113f
 80010c8:	0800113f 	.word	0x0800113f
 80010cc:	0800113f 	.word	0x0800113f
 80010d0:	0800113f 	.word	0x0800113f
 80010d4:	080010ed 	.word	0x080010ed
 80010d8:	08001101 	.word	0x08001101
 80010dc:	4a79      	ldr	r2, [pc, #484]	@ (80012c4 <HAL_GPIO_Init+0x2b4>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010e2:	e02c      	b.n	800113e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	623b      	str	r3, [r7, #32]
          break;
 80010ea:	e029      	b.n	8001140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	3304      	adds	r3, #4
 80010f2:	623b      	str	r3, [r7, #32]
          break;
 80010f4:	e024      	b.n	8001140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	3308      	adds	r3, #8
 80010fc:	623b      	str	r3, [r7, #32]
          break;
 80010fe:	e01f      	b.n	8001140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	330c      	adds	r3, #12
 8001106:	623b      	str	r3, [r7, #32]
          break;
 8001108:	e01a      	b.n	8001140 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001112:	2304      	movs	r3, #4
 8001114:	623b      	str	r3, [r7, #32]
          break;
 8001116:	e013      	b.n	8001140 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d105      	bne.n	800112c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001120:	2308      	movs	r3, #8
 8001122:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	611a      	str	r2, [r3, #16]
          break;
 800112a:	e009      	b.n	8001140 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800112c:	2308      	movs	r3, #8
 800112e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69fa      	ldr	r2, [r7, #28]
 8001134:	615a      	str	r2, [r3, #20]
          break;
 8001136:	e003      	b.n	8001140 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
          break;
 800113c:	e000      	b.n	8001140 <HAL_GPIO_Init+0x130>
          break;
 800113e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2bff      	cmp	r3, #255	@ 0xff
 8001144:	d801      	bhi.n	800114a <HAL_GPIO_Init+0x13a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	e001      	b.n	800114e <HAL_GPIO_Init+0x13e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3304      	adds	r3, #4
 800114e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2bff      	cmp	r3, #255	@ 0xff
 8001154:	d802      	bhi.n	800115c <HAL_GPIO_Init+0x14c>
 8001156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	e002      	b.n	8001162 <HAL_GPIO_Init+0x152>
 800115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115e:	3b08      	subs	r3, #8
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	210f      	movs	r1, #15
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	401a      	ands	r2, r3
 8001174:	6a39      	ldr	r1, [r7, #32]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	431a      	orrs	r2, r3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 80b1 	beq.w	80012f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001190:	4b4d      	ldr	r3, [pc, #308]	@ (80012c8 <HAL_GPIO_Init+0x2b8>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a4c      	ldr	r2, [pc, #304]	@ (80012c8 <HAL_GPIO_Init+0x2b8>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b4a      	ldr	r3, [pc, #296]	@ (80012c8 <HAL_GPIO_Init+0x2b8>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011a8:	4a48      	ldr	r2, [pc, #288]	@ (80012cc <HAL_GPIO_Init+0x2bc>)
 80011aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a40      	ldr	r2, [pc, #256]	@ (80012d0 <HAL_GPIO_Init+0x2c0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d013      	beq.n	80011fc <HAL_GPIO_Init+0x1ec>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a3f      	ldr	r2, [pc, #252]	@ (80012d4 <HAL_GPIO_Init+0x2c4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00d      	beq.n	80011f8 <HAL_GPIO_Init+0x1e8>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a3e      	ldr	r2, [pc, #248]	@ (80012d8 <HAL_GPIO_Init+0x2c8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d007      	beq.n	80011f4 <HAL_GPIO_Init+0x1e4>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a3d      	ldr	r2, [pc, #244]	@ (80012dc <HAL_GPIO_Init+0x2cc>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d101      	bne.n	80011f0 <HAL_GPIO_Init+0x1e0>
 80011ec:	2303      	movs	r3, #3
 80011ee:	e006      	b.n	80011fe <HAL_GPIO_Init+0x1ee>
 80011f0:	2304      	movs	r3, #4
 80011f2:	e004      	b.n	80011fe <HAL_GPIO_Init+0x1ee>
 80011f4:	2302      	movs	r3, #2
 80011f6:	e002      	b.n	80011fe <HAL_GPIO_Init+0x1ee>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <HAL_GPIO_Init+0x1ee>
 80011fc:	2300      	movs	r3, #0
 80011fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001200:	f002 0203 	and.w	r2, r2, #3
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	4093      	lsls	r3, r2
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	4313      	orrs	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800120e:	492f      	ldr	r1, [pc, #188]	@ (80012cc <HAL_GPIO_Init+0x2bc>)
 8001210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d006      	beq.n	8001236 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001228:	4b2d      	ldr	r3, [pc, #180]	@ (80012e0 <HAL_GPIO_Init+0x2d0>)
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	492c      	ldr	r1, [pc, #176]	@ (80012e0 <HAL_GPIO_Init+0x2d0>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	608b      	str	r3, [r1, #8]
 8001234:	e006      	b.n	8001244 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001236:	4b2a      	ldr	r3, [pc, #168]	@ (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	43db      	mvns	r3, r3
 800123e:	4928      	ldr	r1, [pc, #160]	@ (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001240:	4013      	ands	r3, r2
 8001242:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001250:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	4922      	ldr	r1, [pc, #136]	@ (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	60cb      	str	r3, [r1, #12]
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800125e:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	43db      	mvns	r3, r3
 8001266:	491e      	ldr	r1, [pc, #120]	@ (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001268:	4013      	ands	r3, r2
 800126a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <HAL_GPIO_Init+0x2d0>)
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	4918      	ldr	r1, [pc, #96]	@ (80012e0 <HAL_GPIO_Init+0x2d0>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	604b      	str	r3, [r1, #4]
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001286:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	43db      	mvns	r3, r3
 800128e:	4914      	ldr	r1, [pc, #80]	@ (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001290:	4013      	ands	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d021      	beq.n	80012e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012a0:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <HAL_GPIO_Init+0x2d0>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	490e      	ldr	r1, [pc, #56]	@ (80012e0 <HAL_GPIO_Init+0x2d0>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	600b      	str	r3, [r1, #0]
 80012ac:	e021      	b.n	80012f2 <HAL_GPIO_Init+0x2e2>
 80012ae:	bf00      	nop
 80012b0:	10320000 	.word	0x10320000
 80012b4:	10310000 	.word	0x10310000
 80012b8:	10220000 	.word	0x10220000
 80012bc:	10210000 	.word	0x10210000
 80012c0:	10120000 	.word	0x10120000
 80012c4:	10110000 	.word	0x10110000
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40010000 	.word	0x40010000
 80012d0:	40010800 	.word	0x40010800
 80012d4:	40010c00 	.word	0x40010c00
 80012d8:	40011000 	.word	0x40011000
 80012dc:	40011400 	.word	0x40011400
 80012e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <HAL_GPIO_Init+0x304>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	4909      	ldr	r1, [pc, #36]	@ (8001314 <HAL_GPIO_Init+0x304>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	3301      	adds	r3, #1
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	f47f ae8e 	bne.w	8001024 <HAL_GPIO_Init+0x14>
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	372c      	adds	r7, #44	@ 0x2c
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40010400 	.word	0x40010400

08001318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
 8001324:	4613      	mov	r3, r2
 8001326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001334:	e003      	b.n	800133e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001336:	887b      	ldrh	r3, [r7, #2]
 8001338:	041a      	lsls	r2, r3, #16
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	611a      	str	r2, [r3, #16]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e272      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 8087 	beq.w	8001476 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001368:	4b92      	ldr	r3, [pc, #584]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 030c 	and.w	r3, r3, #12
 8001370:	2b04      	cmp	r3, #4
 8001372:	d00c      	beq.n	800138e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001374:	4b8f      	ldr	r3, [pc, #572]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 030c 	and.w	r3, r3, #12
 800137c:	2b08      	cmp	r3, #8
 800137e:	d112      	bne.n	80013a6 <HAL_RCC_OscConfig+0x5e>
 8001380:	4b8c      	ldr	r3, [pc, #560]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800138c:	d10b      	bne.n	80013a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138e:	4b89      	ldr	r3, [pc, #548]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d06c      	beq.n	8001474 <HAL_RCC_OscConfig+0x12c>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d168      	bne.n	8001474 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e24c      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ae:	d106      	bne.n	80013be <HAL_RCC_OscConfig+0x76>
 80013b0:	4b80      	ldr	r3, [pc, #512]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a7f      	ldr	r2, [pc, #508]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e02e      	b.n	800141c <HAL_RCC_OscConfig+0xd4>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x98>
 80013c6:	4b7b      	ldr	r3, [pc, #492]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a7a      	ldr	r2, [pc, #488]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b78      	ldr	r3, [pc, #480]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a77      	ldr	r2, [pc, #476]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e01d      	b.n	800141c <HAL_RCC_OscConfig+0xd4>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0xbc>
 80013ea:	4b72      	ldr	r3, [pc, #456]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a71      	ldr	r2, [pc, #452]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b6f      	ldr	r3, [pc, #444]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a6e      	ldr	r2, [pc, #440]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e00b      	b.n	800141c <HAL_RCC_OscConfig+0xd4>
 8001404:	4b6b      	ldr	r3, [pc, #428]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a6a      	ldr	r2, [pc, #424]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 800140a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b68      	ldr	r3, [pc, #416]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a67      	ldr	r2, [pc, #412]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001416:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800141a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d013      	beq.n	800144c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fd06 	bl	8000e34 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fd02 	bl	8000e34 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	@ 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e200      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	4b5d      	ldr	r3, [pc, #372]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0xe4>
 800144a:	e014      	b.n	8001476 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fcf2 	bl	8000e34 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001454:	f7ff fcee 	bl	8000e34 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	@ 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e1ec      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	4b53      	ldr	r3, [pc, #332]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f0      	bne.n	8001454 <HAL_RCC_OscConfig+0x10c>
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d063      	beq.n	800154a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001482:	4b4c      	ldr	r3, [pc, #304]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00b      	beq.n	80014a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800148e:	4b49      	ldr	r3, [pc, #292]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b08      	cmp	r3, #8
 8001498:	d11c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x18c>
 800149a:	4b46      	ldr	r3, [pc, #280]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d116      	bne.n	80014d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a6:	4b43      	ldr	r3, [pc, #268]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <HAL_RCC_OscConfig+0x176>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d001      	beq.n	80014be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e1c0      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	4b3d      	ldr	r3, [pc, #244]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4939      	ldr	r1, [pc, #228]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d2:	e03a      	b.n	800154a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d020      	beq.n	800151e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014dc:	4b36      	ldr	r3, [pc, #216]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fca7 	bl	8000e34 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ea:	f7ff fca3 	bl	8000e34 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e1a1      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fc:	4b2d      	ldr	r3, [pc, #180]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001508:	4b2a      	ldr	r3, [pc, #168]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4927      	ldr	r1, [pc, #156]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001518:	4313      	orrs	r3, r2
 800151a:	600b      	str	r3, [r1, #0]
 800151c:	e015      	b.n	800154a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151e:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fc86 	bl	8000e34 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152c:	f7ff fc82 	bl	8000e34 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e180      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153e:	4b1d      	ldr	r3, [pc, #116]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d03a      	beq.n	80015cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d019      	beq.n	8001592 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155e:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <HAL_RCC_OscConfig+0x274>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001564:	f7ff fc66 	bl	8000e34 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156c:	f7ff fc62 	bl	8000e34 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e160      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <HAL_RCC_OscConfig+0x26c>)
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0f0      	beq.n	800156c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800158a:	2001      	movs	r0, #1
 800158c:	f000 fa9c 	bl	8001ac8 <RCC_Delay>
 8001590:	e01c      	b.n	80015cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001592:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <HAL_RCC_OscConfig+0x274>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001598:	f7ff fc4c 	bl	8000e34 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159e:	e00f      	b.n	80015c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a0:	f7ff fc48 	bl	8000e34 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d908      	bls.n	80015c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e146      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000
 80015b8:	42420000 	.word	0x42420000
 80015bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c0:	4b92      	ldr	r3, [pc, #584]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1e9      	bne.n	80015a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a6 	beq.w	8001726 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015de:	4b8b      	ldr	r3, [pc, #556]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10d      	bne.n	8001606 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	4b88      	ldr	r3, [pc, #544]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a87      	ldr	r2, [pc, #540]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	61d3      	str	r3, [r2, #28]
 80015f6:	4b85      	ldr	r3, [pc, #532]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001602:	2301      	movs	r3, #1
 8001604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001606:	4b82      	ldr	r3, [pc, #520]	@ (8001810 <HAL_RCC_OscConfig+0x4c8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d118      	bne.n	8001644 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001612:	4b7f      	ldr	r3, [pc, #508]	@ (8001810 <HAL_RCC_OscConfig+0x4c8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a7e      	ldr	r2, [pc, #504]	@ (8001810 <HAL_RCC_OscConfig+0x4c8>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800161c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161e:	f7ff fc09 	bl	8000e34 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001626:	f7ff fc05 	bl	8000e34 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b64      	cmp	r3, #100	@ 0x64
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e103      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001638:	4b75      	ldr	r3, [pc, #468]	@ (8001810 <HAL_RCC_OscConfig+0x4c8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f0      	beq.n	8001626 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x312>
 800164c:	4b6f      	ldr	r3, [pc, #444]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a6e      	ldr	r2, [pc, #440]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	e02d      	b.n	80016b6 <HAL_RCC_OscConfig+0x36e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x334>
 8001662:	4b6a      	ldr	r3, [pc, #424]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4a69      	ldr	r2, [pc, #420]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6213      	str	r3, [r2, #32]
 800166e:	4b67      	ldr	r3, [pc, #412]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4a66      	ldr	r2, [pc, #408]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	6213      	str	r3, [r2, #32]
 800167a:	e01c      	b.n	80016b6 <HAL_RCC_OscConfig+0x36e>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b05      	cmp	r3, #5
 8001682:	d10c      	bne.n	800169e <HAL_RCC_OscConfig+0x356>
 8001684:	4b61      	ldr	r3, [pc, #388]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a60      	ldr	r2, [pc, #384]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	4b5e      	ldr	r3, [pc, #376]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4a5d      	ldr	r2, [pc, #372]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6213      	str	r3, [r2, #32]
 800169c:	e00b      	b.n	80016b6 <HAL_RCC_OscConfig+0x36e>
 800169e:	4b5b      	ldr	r3, [pc, #364]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	4a5a      	ldr	r2, [pc, #360]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	6213      	str	r3, [r2, #32]
 80016aa:	4b58      	ldr	r3, [pc, #352]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	4a57      	ldr	r2, [pc, #348]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	f023 0304 	bic.w	r3, r3, #4
 80016b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d015      	beq.n	80016ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016be:	f7ff fbb9 	bl	8000e34 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c4:	e00a      	b.n	80016dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c6:	f7ff fbb5 	bl	8000e34 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e0b1      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016dc:	4b4b      	ldr	r3, [pc, #300]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0ee      	beq.n	80016c6 <HAL_RCC_OscConfig+0x37e>
 80016e8:	e014      	b.n	8001714 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ea:	f7ff fba3 	bl	8000e34 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f2:	f7ff fb9f 	bl	8000e34 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e09b      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	4b40      	ldr	r3, [pc, #256]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1ee      	bne.n	80016f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d105      	bne.n	8001726 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800171a:	4b3c      	ldr	r3, [pc, #240]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a3b      	ldr	r2, [pc, #236]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 8001720:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001724:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f000 8087 	beq.w	800183e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001730:	4b36      	ldr	r3, [pc, #216]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b08      	cmp	r3, #8
 800173a:	d061      	beq.n	8001800 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d146      	bne.n	80017d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001744:	4b33      	ldr	r3, [pc, #204]	@ (8001814 <HAL_RCC_OscConfig+0x4cc>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff fb73 	bl	8000e34 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001752:	f7ff fb6f 	bl	8000e34 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e06d      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001764:	4b29      	ldr	r3, [pc, #164]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f0      	bne.n	8001752 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001778:	d108      	bne.n	800178c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800177a:	4b24      	ldr	r3, [pc, #144]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	4921      	ldr	r1, [pc, #132]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800178c:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a19      	ldr	r1, [r3, #32]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179c:	430b      	orrs	r3, r1
 800179e:	491b      	ldr	r1, [pc, #108]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <HAL_RCC_OscConfig+0x4cc>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017aa:	f7ff fb43 	bl	8000e34 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b2:	f7ff fb3f 	bl	8000e34 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e03d      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c4:	4b11      	ldr	r3, [pc, #68]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x46a>
 80017d0:	e035      	b.n	800183e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <HAL_RCC_OscConfig+0x4cc>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fb2c 	bl	8000e34 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff fb28 	bl	8000e34 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e026      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x498>
 80017fe:	e01e      	b.n	800183e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d107      	bne.n	8001818 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e019      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
 800180c:	40021000 	.word	0x40021000
 8001810:	40007000 	.word	0x40007000
 8001814:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <HAL_RCC_OscConfig+0x500>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	429a      	cmp	r2, r3
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	429a      	cmp	r2, r3
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40021000 	.word	0x40021000

0800184c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0d0      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001860:	4b6a      	ldr	r3, [pc, #424]	@ (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d910      	bls.n	8001890 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b67      	ldr	r3, [pc, #412]	@ (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 0207 	bic.w	r2, r3, #7
 8001876:	4965      	ldr	r1, [pc, #404]	@ (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187e:	4b63      	ldr	r3, [pc, #396]	@ (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0b8      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d020      	beq.n	80018de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a8:	4b59      	ldr	r3, [pc, #356]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a58      	ldr	r2, [pc, #352]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c0:	4b53      	ldr	r3, [pc, #332]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a52      	ldr	r2, [pc, #328]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018cc:	4b50      	ldr	r3, [pc, #320]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	494d      	ldr	r1, [pc, #308]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d040      	beq.n	800196c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d107      	bne.n	8001902 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	4b47      	ldr	r3, [pc, #284]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d115      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e07f      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190a:	4b41      	ldr	r3, [pc, #260]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d109      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e073      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e06b      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192a:	4b39      	ldr	r3, [pc, #228]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f023 0203 	bic.w	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4936      	ldr	r1, [pc, #216]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800193c:	f7ff fa7a 	bl	8000e34 <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001942:	e00a      	b.n	800195a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001944:	f7ff fa76 	bl	8000e34 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e053      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 020c 	and.w	r2, r3, #12
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	429a      	cmp	r2, r3
 800196a:	d1eb      	bne.n	8001944 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800196c:	4b27      	ldr	r3, [pc, #156]	@ (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d210      	bcs.n	800199c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b24      	ldr	r3, [pc, #144]	@ (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 0207 	bic.w	r2, r3, #7
 8001982:	4922      	ldr	r1, [pc, #136]	@ (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b20      	ldr	r3, [pc, #128]	@ (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e032      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a8:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4916      	ldr	r1, [pc, #88]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	490e      	ldr	r1, [pc, #56]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019da:	f000 f821 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 80019de:	4602      	mov	r2, r0
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	490a      	ldr	r1, [pc, #40]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	5ccb      	ldrb	r3, [r1, r3]
 80019ee:	fa22 f303 	lsr.w	r3, r2, r3
 80019f2:	4a09      	ldr	r2, [pc, #36]	@ (8001a18 <HAL_RCC_ClockConfig+0x1cc>)
 80019f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <HAL_RCC_ClockConfig+0x1d0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff f9d8 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40022000 	.word	0x40022000
 8001a10:	40021000 	.word	0x40021000
 8001a14:	08002698 	.word	0x08002698
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000004 	.word	0x20000004

08001a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d002      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x30>
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d003      	beq.n	8001a56 <HAL_RCC_GetSysClockFreq+0x36>
 8001a4e:	e027      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a50:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a52:	613b      	str	r3, [r7, #16]
      break;
 8001a54:	e027      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	0c9b      	lsrs	r3, r3, #18
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	4a17      	ldr	r2, [pc, #92]	@ (8001abc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a60:	5cd3      	ldrb	r3, [r2, r3]
 8001a62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d010      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a6e:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	0c5b      	lsrs	r3, r3, #17
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	4a11      	ldr	r2, [pc, #68]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a7a:	5cd3      	ldrb	r3, [r2, r3]
 8001a7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a82:	fb03 f202 	mul.w	r2, r3, r2
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e004      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	613b      	str	r3, [r7, #16]
      break;
 8001a9e:	e002      	b.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aa2:	613b      	str	r3, [r7, #16]
      break;
 8001aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa6:	693b      	ldr	r3, [r7, #16]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	007a1200 	.word	0x007a1200
 8001abc:	080026a8 	.word	0x080026a8
 8001ac0:	080026b8 	.word	0x080026b8
 8001ac4:	003d0900 	.word	0x003d0900

08001ac8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8001afc <RCC_Delay+0x34>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <RCC_Delay+0x38>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0a5b      	lsrs	r3, r3, #9
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ae4:	bf00      	nop
  }
  while (Delay --);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1e5a      	subs	r2, r3, #1
 8001aea:	60fa      	str	r2, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <RCC_Delay+0x1c>
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	20000000 	.word	0x20000000
 8001b00:	10624dd3 	.word	0x10624dd3

08001b04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e076      	b.n	8001c04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d108      	bne.n	8001b30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b26:	d009      	beq.n	8001b3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
 8001b2e:	e005      	b.n	8001b3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff f84e 	bl	8000bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc0:	ea42 0103 	orr.w	r1, r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	0c1a      	lsrs	r2, r3, #16
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f002 0204 	and.w	r2, r2, #4
 8001be2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bf2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c1c:	f7ff f90a 	bl	8000e34 <HAL_GetTick>
 8001c20:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d001      	beq.n	8001c36 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001c32:	2302      	movs	r3, #2
 8001c34:	e12a      	b.n	8001e8c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_SPI_Transmit+0x36>
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e122      	b.n	8001e8c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_SPI_Transmit+0x48>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e11b      	b.n	8001e8c <HAL_SPI_Transmit+0x280>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2203      	movs	r2, #3
 8001c60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	88fa      	ldrh	r2, [r7, #6]
 8001c74:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	88fa      	ldrh	r2, [r7, #6]
 8001c7a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2200      	movs	r2, #0
 8001c86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ca2:	d10f      	bne.n	8001cc4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cce:	2b40      	cmp	r3, #64	@ 0x40
 8001cd0:	d007      	beq.n	8001ce2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ce0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001cea:	d152      	bne.n	8001d92 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_SPI_Transmit+0xee>
 8001cf4:	8b7b      	ldrh	r3, [r7, #26]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d145      	bne.n	8001d86 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	881a      	ldrh	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	1c9a      	adds	r2, r3, #2
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d1e:	e032      	b.n	8001d86 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d112      	bne.n	8001d54 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	881a      	ldrh	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	1c9a      	adds	r2, r3, #2
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001d52:	e018      	b.n	8001d86 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d54:	f7ff f86e 	bl	8000e34 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d803      	bhi.n	8001d6c <HAL_SPI_Transmit+0x160>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d6a:	d102      	bne.n	8001d72 <HAL_SPI_Transmit+0x166>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e082      	b.n	8001e8c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1c7      	bne.n	8001d20 <HAL_SPI_Transmit+0x114>
 8001d90:	e053      	b.n	8001e3a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_SPI_Transmit+0x194>
 8001d9a:	8b7b      	ldrh	r3, [r7, #26]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d147      	bne.n	8001e30 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	330c      	adds	r3, #12
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001dc6:	e033      	b.n	8001e30 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d113      	bne.n	8001dfe <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	330c      	adds	r3, #12
 8001de0:	7812      	ldrb	r2, [r2, #0]
 8001de2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001dfc:	e018      	b.n	8001e30 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dfe:	f7ff f819 	bl	8000e34 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d803      	bhi.n	8001e16 <HAL_SPI_Transmit+0x20a>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e14:	d102      	bne.n	8001e1c <HAL_SPI_Transmit+0x210>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e02d      	b.n	8001e8c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1c6      	bne.n	8001dc8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	6839      	ldr	r1, [r7, #0]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f8b0 	bl	8001fa4 <SPI_EndRxTxTransaction>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10a      	bne.n	8001e6e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
  }
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b088      	sub	sp, #32
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ea4:	f7fe ffc6 	bl	8000e34 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001eb4:	f7fe ffbe 	bl	8000e34 <HAL_GetTick>
 8001eb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001eba:	4b39      	ldr	r3, [pc, #228]	@ (8001fa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	015b      	lsls	r3, r3, #5
 8001ec0:	0d1b      	lsrs	r3, r3, #20
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	fb02 f303 	mul.w	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001eca:	e054      	b.n	8001f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ed2:	d050      	beq.n	8001f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001ed4:	f7fe ffae 	bl	8000e34 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d902      	bls.n	8001eea <SPI_WaitFlagStateUntilTimeout+0x56>
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d13d      	bne.n	8001f66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f02:	d111      	bne.n	8001f28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f0c:	d004      	beq.n	8001f18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f16:	d107      	bne.n	8001f28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f30:	d10f      	bne.n	8001f52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e017      	b.n	8001f96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	bf0c      	ite	eq
 8001f86:	2301      	moveq	r3, #1
 8001f88:	2300      	movne	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d19b      	bne.n	8001ecc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3720      	adds	r7, #32
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000000 	.word	0x20000000

08001fa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2102      	movs	r1, #2
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7ff ff6a 	bl	8001e94 <SPI_WaitFlagStateUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fca:	f043 0220 	orr.w	r2, r3, #32
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e013      	b.n	8001ffe <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2180      	movs	r1, #128	@ 0x80
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f7ff ff57 	bl	8001e94 <SPI_WaitFlagStateUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <memset>:
 8002006:	4603      	mov	r3, r0
 8002008:	4402      	add	r2, r0
 800200a:	4293      	cmp	r3, r2
 800200c:	d100      	bne.n	8002010 <memset+0xa>
 800200e:	4770      	bx	lr
 8002010:	f803 1b01 	strb.w	r1, [r3], #1
 8002014:	e7f9      	b.n	800200a <memset+0x4>
	...

08002018 <__libc_init_array>:
 8002018:	b570      	push	{r4, r5, r6, lr}
 800201a:	2600      	movs	r6, #0
 800201c:	4d0c      	ldr	r5, [pc, #48]	@ (8002050 <__libc_init_array+0x38>)
 800201e:	4c0d      	ldr	r4, [pc, #52]	@ (8002054 <__libc_init_array+0x3c>)
 8002020:	1b64      	subs	r4, r4, r5
 8002022:	10a4      	asrs	r4, r4, #2
 8002024:	42a6      	cmp	r6, r4
 8002026:	d109      	bne.n	800203c <__libc_init_array+0x24>
 8002028:	f000 f81a 	bl	8002060 <_init>
 800202c:	2600      	movs	r6, #0
 800202e:	4d0a      	ldr	r5, [pc, #40]	@ (8002058 <__libc_init_array+0x40>)
 8002030:	4c0a      	ldr	r4, [pc, #40]	@ (800205c <__libc_init_array+0x44>)
 8002032:	1b64      	subs	r4, r4, r5
 8002034:	10a4      	asrs	r4, r4, #2
 8002036:	42a6      	cmp	r6, r4
 8002038:	d105      	bne.n	8002046 <__libc_init_array+0x2e>
 800203a:	bd70      	pop	{r4, r5, r6, pc}
 800203c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002040:	4798      	blx	r3
 8002042:	3601      	adds	r6, #1
 8002044:	e7ee      	b.n	8002024 <__libc_init_array+0xc>
 8002046:	f855 3b04 	ldr.w	r3, [r5], #4
 800204a:	4798      	blx	r3
 800204c:	3601      	adds	r6, #1
 800204e:	e7f2      	b.n	8002036 <__libc_init_array+0x1e>
 8002050:	080027bc 	.word	0x080027bc
 8002054:	080027bc 	.word	0x080027bc
 8002058:	080027bc 	.word	0x080027bc
 800205c:	080027c0 	.word	0x080027c0

08002060 <_init>:
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002062:	bf00      	nop
 8002064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002066:	bc08      	pop	{r3}
 8002068:	469e      	mov	lr, r3
 800206a:	4770      	bx	lr

0800206c <_fini>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	bf00      	nop
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr

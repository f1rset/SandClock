
SandClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094ec  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08009600  08009600  0000a600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a68  08009a68  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009a68  08009a68  0000aa68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a70  08009a70  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a70  08009a70  0000aa70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a74  08009a74  0000aa74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009a78  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ac  200001d8  08009c4c  0000b1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000984  08009c4c  0000b984  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014838  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033a4  00000000  00000000  0001fa35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00022de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa2  00000000  00000000  000241f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a660  00000000  00000000  0002519a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c79  00000000  00000000  0003f7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009360e  00000000  00000000  00057473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eaa81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068f8  00000000  00000000  000eaac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f13bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080095e4 	.word	0x080095e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080095e4 	.word	0x080095e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <MX_GPIO_Init+0x9c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a20      	ldr	r2, [pc, #128]	@ (8000c70 <MX_GPIO_Init+0x9c>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <MX_GPIO_Init+0x9c>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c00:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <MX_GPIO_Init+0x9c>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a1a      	ldr	r2, [pc, #104]	@ (8000c70 <MX_GPIO_Init+0x9c>)
 8000c06:	f043 0308 	orr.w	r3, r3, #8
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <MX_GPIO_Init+0x9c>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0308 	and.w	r3, r3, #8
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD1_RST_Pin|LCD1_DC_Pin|LCD1_CS_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2158      	movs	r1, #88	@ 0x58
 8000c1c:	4815      	ldr	r0, [pc, #84]	@ (8000c74 <MX_GPIO_Init+0xa0>)
 8000c1e:	f001 fd7b 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD2_RST_Pin|LCD2_DC_Pin|LCD2_CS_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 41b0 	mov.w	r1, #22528	@ 0x5800
 8000c28:	4813      	ldr	r0, [pc, #76]	@ (8000c78 <MX_GPIO_Init+0xa4>)
 8000c2a:	f001 fd75 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD1_RST_Pin|LCD1_DC_Pin|LCD1_CS_Pin;
 8000c2e:	2358      	movs	r3, #88	@ 0x58
 8000c30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	4619      	mov	r1, r3
 8000c44:	480b      	ldr	r0, [pc, #44]	@ (8000c74 <MX_GPIO_Init+0xa0>)
 8000c46:	f001 fbe3 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD2_RST_Pin|LCD2_DC_Pin|LCD2_CS_Pin;
 8000c4a:	f44f 43b0 	mov.w	r3, #22528	@ 0x5800
 8000c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_GPIO_Init+0xa4>)
 8000c64:	f001 fbd4 	bl	8002410 <HAL_GPIO_Init>

}
 8000c68:	bf00      	nop
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010800 	.word	0x40010800
 8000c78:	40010c00 	.word	0x40010c00

08000c7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c82:	4a13      	ldr	r2, [pc, #76]	@ (8000cd0 <MX_I2C1_Init+0x54>)
 8000c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c88:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <MX_I2C1_Init+0x58>)
 8000c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000cba:	f001 fd45 	bl	8002748 <HAL_I2C_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc4:	f000 fcf4 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200001f4 	.word	0x200001f4
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	00061a80 	.word	0x00061a80

08000cd8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a15      	ldr	r2, [pc, #84]	@ (8000d48 <HAL_I2C_MspInit+0x70>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d123      	bne.n	8000d40 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <HAL_I2C_MspInit+0x74>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a13      	ldr	r2, [pc, #76]	@ (8000d4c <HAL_I2C_MspInit+0x74>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <HAL_I2C_MspInit+0x74>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d10:	23c0      	movs	r3, #192	@ 0xc0
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d14:	2312      	movs	r3, #18
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	480b      	ldr	r0, [pc, #44]	@ (8000d50 <HAL_I2C_MspInit+0x78>)
 8000d24:	f001 fb74 	bl	8002410 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <HAL_I2C_MspInit+0x74>)
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	@ (8000d4c <HAL_I2C_MspInit+0x74>)
 8000d2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d32:	61d3      	str	r3, [r2, #28]
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <HAL_I2C_MspInit+0x74>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d40:	bf00      	nop
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010c00 	.word	0x40010c00

08000d54 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fa64 	bl	800122c <LCD5110_refresh_ll>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f503 7205 	add.w	r2, r3, #532	@ 0x214
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	68f8      	ldr	r0, [r7, #12]
 8000d84:	f000 f815 	bl	8000db2 <LCD5110_wset_cursor>
}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f840 	bl	8000e20 <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	2100      	movs	r1, #0
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff ffe1 	bl	8000d6c <LCD5110_set_cursor>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b085      	sub	sp, #20
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	b21a      	sxth	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	815a      	strh	r2, [r3, #10]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b087      	sub	sp, #28
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	10db      	asrs	r3, r3, #3
 8000dea:	2254      	movs	r2, #84	@ 0x54
 8000dec:	fb03 f202 	mul.w	r2, r3, r2
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4413      	add	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	753b      	strb	r3, [r7, #20]

	return res;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	f107 0310 	add.w	r3, r7, #16
 8000e0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e12:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	371c      	adds	r7, #28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	e008      	b.n	8000e40 <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	331c      	adds	r3, #28
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 8000e46:	dbf2      	blt.n	8000e2e <LCD5110_clrscr+0xe>
	}
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db31      	blt.n	8000ecc <LCD5110_putpix+0x78>
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db2e      	blt.n	8000ecc <LCD5110_putpix+0x78>
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b53      	cmp	r3, #83	@ 0x53
 8000e72:	dc2b      	bgt.n	8000ecc <LCD5110_putpix+0x78>
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2b2f      	cmp	r3, #47	@ 0x2f
 8000e78:	dc28      	bgt.n	8000ecc <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	68f9      	ldr	r1, [r7, #12]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ffa9 	bl	8000dda <xy_to_pix>

	if (color)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00c      	beq.n	8000ea8 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	7f19      	ldrb	r1, [r3, #28]
 8000e96:	7d3a      	ldrb	r2, [r7, #20]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	b2d1      	uxtb	r1, r2
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	460a      	mov	r2, r1
 8000ea4:	771a      	strb	r2, [r3, #28]
 8000ea6:	e012      	b.n	8000ece <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	7f1b      	ldrb	r3, [r3, #28]
 8000eb0:	b25a      	sxtb	r2, r3
 8000eb2:	7d3b      	ldrb	r3, [r7, #20]
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	b25b      	sxtb	r3, r3
 8000eba:	4013      	ands	r3, r2
 8000ebc:	b25a      	sxtb	r2, r3
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	b2d1      	uxtb	r1, r2
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	460a      	mov	r2, r1
 8000ec8:	771a      	strb	r2, [r3, #28]
 8000eca:	e000      	b.n	8000ece <LCD5110_putpix+0x7a>
		return;
 8000ecc:	bf00      	nop
}
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	1df9      	adds	r1, r7, #7
 8000ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eea:	2201      	movs	r2, #1
 8000eec:	f003 f926 	bl	800413c <HAL_SPI_Transmit>
 8000ef0:	4603      	mov	r3, r0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b084      	sub	sp, #16
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	460b      	mov	r3, r1
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	897a      	ldrh	r2, [r7, #10]
 8000f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f12:	68f9      	ldr	r1, [r7, #12]
 8000f14:	f003 f912 	bl	800413c <HAL_SPI_Transmit>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6898      	ldr	r0, [r3, #8]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	889b      	ldrh	r3, [r3, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	4619      	mov	r1, r3
 8000f36:	f001 fbef 	bl	8002718 <HAL_GPIO_WritePin>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6998      	ldr	r0, [r3, #24]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	8a9b      	ldrh	r3, [r3, #20]
 8000f52:	2201      	movs	r2, #1
 8000f54:	4619      	mov	r1, r3
 8000f56:	f001 fbdf 	bl	8002718 <HAL_GPIO_WritePin>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6998      	ldr	r0, [r3, #24]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	8a9b      	ldrh	r3, [r3, #20]
 8000f72:	2200      	movs	r2, #0
 8000f74:	4619      	mov	r1, r3
 8000f76:	f001 fbcf 	bl	8002718 <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6918      	ldr	r0, [r3, #16]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	899b      	ldrh	r3, [r3, #12]
 8000f92:	2201      	movs	r2, #1
 8000f94:	4619      	mov	r1, r3
 8000f96:	f001 fbbf 	bl	8002718 <HAL_GPIO_WritePin>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6918      	ldr	r0, [r3, #16]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	899b      	ldrh	r3, [r3, #12]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f001 fbaf 	bl	8002718 <HAL_GPIO_WritePin>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	6039      	str	r1, [r7, #0]
 8000fcc:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f023 0320 	bic.w	r3, r3, #32
 8000fd4:	2b07      	cmp	r3, #7
 8000fd6:	dd01      	ble.n	8000fdc <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e008      	b.n	8000fee <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f043 0320 	orr.w	r3, r3, #32
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	6839      	ldr	r1, [r7, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff74 	bl	8000ed4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	6039      	str	r1, [r7, #0]
 8001000:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	f023 030d 	bic.w	r3, r3, #13
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 800100c:	2302      	movs	r3, #2
 800100e:	e005      	b.n	800101c <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	6839      	ldr	r1, [r7, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	da01      	bge.n	800103c <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8001038:	2303      	movs	r3, #3
 800103a:	e008      	b.n	800104e <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001042:	b2db      	uxtb	r3, r3
 8001044:	6839      	ldr	r1, [r7, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff44 	bl	8000ed4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	6039      	str	r1, [r7, #0]
 8001060:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b03      	cmp	r3, #3
 8001066:	d901      	bls.n	800106c <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 8001068:	2304      	movs	r3, #4
 800106a:	e008      	b.n	800107e <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f043 0304 	orr.w	r3, r3, #4
 8001072:	b2db      	uxtb	r3, r3
 8001074:	6839      	ldr	r1, [r7, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff2c 	bl	8000ed4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	6039      	str	r1, [r7, #0]
 8001090:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b07      	cmp	r3, #7
 8001096:	d901      	bls.n	800109c <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 8001098:	2305      	movs	r3, #5
 800109a:	e008      	b.n	80010ae <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f043 0310 	orr.w	r3, r3, #16
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	6839      	ldr	r1, [r7, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff14 	bl	8000ed4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	6039      	str	r1, [r7, #0]
 80010c0:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 80010c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db03      	blt.n	80010d2 <LCD5110_set_X_base+0x1c>
 80010ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ce:	2b53      	cmp	r3, #83	@ 0x53
 80010d0:	dd01      	ble.n	80010d6 <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 80010d2:	2307      	movs	r3, #7
 80010d4:	e00a      	b.n	80010ec <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	6839      	ldr	r1, [r7, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fef5 	bl	8000ed4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 8001100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db03      	blt.n	8001110 <LCD5110_set_Y_base+0x1c>
 8001108:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110c:	2b05      	cmp	r3, #5
 800110e:	dd01      	ble.n	8001114 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 8001110:	2307      	movs	r3, #7
 8001112:	e00a      	b.n	800112a <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	b25b      	sxtb	r3, r3
 8001118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800111c:	b25b      	sxtb	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	6839      	ldr	r1, [r7, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fed6 	bl	8000ed4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	603a      	str	r2, [r7, #0]
 800113c:	80fb      	strh	r3, [r7, #6]
 800113e:	460b      	mov	r3, r1
 8001140:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 8001142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ffb4 	bl	80010b6 <LCD5110_set_X_base>
 800114e:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <LCD5110_set_XY_base+0x28>
		return res;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	e00c      	b.n	8001174 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 800115a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800115e:	6839      	ldr	r1, [r7, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ffc7 	bl	80010f4 <LCD5110_set_Y_base>
 8001166:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <LCD5110_set_XY_base+0x40>
		return res;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	e000      	b.n	8001174 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001196:	601a      	str	r2, [r3, #0]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	4608      	mov	r0, r1
 80011ac:	4611      	mov	r1, r2
 80011ae:	461a      	mov	r2, r3
 80011b0:	4603      	mov	r3, r0
 80011b2:	70fb      	strb	r3, [r7, #3]
 80011b4:	460b      	mov	r3, r1
 80011b6:	70bb      	strb	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ffdd 	bl	800117c <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff fead 	bl	8000f22 <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff feea 	bl	8000fa2 <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 80011ce:	2364      	movs	r3, #100	@ 0x64
 80011d0:	60fb      	str	r3, [r7, #12]
	while (--i){}
 80011d2:	bf00      	nop
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1fa      	bne.n	80011d4 <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fecf 	bl	8000f82 <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff febc 	bl	8000f62 <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff fee8 	bl	8000fc2 <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 80011f2:	78bb      	ldrb	r3, [r7, #2]
 80011f4:	6879      	ldr	r1, [r7, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff14 	bl	8001024 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff28 	bl	8001056 <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8001206:	7e3b      	ldrb	r3, [r7, #24]
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff3b 	bl	8001086 <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	2000      	movs	r0, #0
 8001214:	f7ff fed5 	bl	8000fc2 <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff feea 	bl	8000ff6 <LCD5110_set_mode_base>

	return LCD5110_OK;
 8001222:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fe74 	bl	8000f22 <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fe91 	bl	8000f62 <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	2100      	movs	r1, #0
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff ff74 	bl	8001132 <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fe79 	bl	8000f42 <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	331c      	adds	r3, #28
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fe4d 	bl	8000efa <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_TIM_PeriodElapsedCallback>:
volatile uint32_t elapsed_time_s = 0;
volatile uint32_t time = 0;

// Callback function for timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1)  // Check if the interrupt is from TIM1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a06      	ldr	r2, [pc, #24]	@ (8001290 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d104      	bne.n	8001284 <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
        elapsed_time_s++;
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001282:	6013      	str	r3, [r2, #0]
    }
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40012c00 	.word	0x40012c00
 8001294:	200006e8 	.word	0x200006e8

08001298 <LCD5110_arr_out>:
//	  }
//	  LCD5110_refresh(&lcd);
//
//}

void LCD5110_arr_out(uint8_t arr[ROWS][COLS], int match, LCD5110_display *lcd){
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  for (int i = 0; i < COLS; i++) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	e01c      	b.n	80012e4 <LCD5110_arr_out+0x4c>
    for (int j = 0; j < ROWS; j++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	e013      	b.n	80012d8 <LCD5110_arr_out+0x40>
        LCD5110_putpix(10+i, 47-j, arr[j][i], &lcd->hw_conf);
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f103 000a 	add.w	r0, r3, #10
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	f1c3 012f 	rsb	r1, r3, #47	@ 0x2f
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	019b      	lsls	r3, r3, #6
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	441a      	add	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	4413      	add	r3, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f7ff fdc1 	bl	8000e54 <LCD5110_putpix>
    for (int j = 0; j < ROWS; j++) {
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	3301      	adds	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	2b2f      	cmp	r3, #47	@ 0x2f
 80012dc:	dde8      	ble.n	80012b0 <LCD5110_arr_out+0x18>
  for (int i = 0; i < COLS; i++) {
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80012e8:	dddf      	ble.n	80012aa <LCD5110_arr_out+0x12>
    }
  }
  LCD5110_refresh(lcd);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fd32 	bl	8000d54 <LCD5110_refresh>
}
 80012f0:	bf00      	nop
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	f5ad 5d40 	sub.w	sp, sp, #12288	@ 0x3000
 80012fe:	b08b      	sub	sp, #44	@ 0x2c
 8001300:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001302:	f000 ff15 	bl	8002130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001306:	f000 f993 	bl	8001630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130a:	f7ff fc63 	bl	8000bd4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800130e:	f000 fbf3 	bl	8001af8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001312:	f000 fc27 	bl	8001b64 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001316:	f000 fdf9 	bl	8001f0c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800131a:	f000 fe6d 	bl	8001ff8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800131e:	f7ff fcad 	bl	8000c7c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd1.hw_conf.spi_handle = &hspi1;
 8001322:	4bb5      	ldr	r3, [pc, #724]	@ (80015f8 <main+0x300>)
 8001324:	4ab5      	ldr	r2, [pc, #724]	@ (80015fc <main+0x304>)
 8001326:	601a      	str	r2, [r3, #0]
  lcd1.hw_conf.spi_cs_pin =  LCD1_CS_Pin;
 8001328:	4bb3      	ldr	r3, [pc, #716]	@ (80015f8 <main+0x300>)
 800132a:	2240      	movs	r2, #64	@ 0x40
 800132c:	809a      	strh	r2, [r3, #4]
  lcd1.hw_conf.spi_cs_port = LCD1_CS_GPIO_Port;
 800132e:	4bb2      	ldr	r3, [pc, #712]	@ (80015f8 <main+0x300>)
 8001330:	4ab3      	ldr	r2, [pc, #716]	@ (8001600 <main+0x308>)
 8001332:	609a      	str	r2, [r3, #8]
  lcd1.hw_conf.rst_pin =  LCD1_RST_Pin;
 8001334:	4bb0      	ldr	r3, [pc, #704]	@ (80015f8 <main+0x300>)
 8001336:	2208      	movs	r2, #8
 8001338:	819a      	strh	r2, [r3, #12]
  lcd1.hw_conf.rst_port = LCD1_RST_GPIO_Port;
 800133a:	4baf      	ldr	r3, [pc, #700]	@ (80015f8 <main+0x300>)
 800133c:	4ab0      	ldr	r2, [pc, #704]	@ (8001600 <main+0x308>)
 800133e:	611a      	str	r2, [r3, #16]
  lcd1.hw_conf.dc_pin =  LCD1_DC_Pin;
 8001340:	4bad      	ldr	r3, [pc, #692]	@ (80015f8 <main+0x300>)
 8001342:	2210      	movs	r2, #16
 8001344:	829a      	strh	r2, [r3, #20]
  lcd1.hw_conf.dc_port = LCD1_DC_GPIO_Port;
 8001346:	4bac      	ldr	r3, [pc, #688]	@ (80015f8 <main+0x300>)
 8001348:	4aad      	ldr	r2, [pc, #692]	@ (8001600 <main+0x308>)
 800134a:	619a      	str	r2, [r3, #24]
  lcd1.def_scr = lcd5110_def_scr;
 800134c:	4baa      	ldr	r3, [pc, #680]	@ (80015f8 <main+0x300>)
 800134e:	4aad      	ldr	r2, [pc, #692]	@ (8001604 <main+0x30c>)
 8001350:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 8001354:	4614      	mov	r4, r2
 8001356:	6820      	ldr	r0, [r4, #0]
 8001358:	6861      	ldr	r1, [r4, #4]
 800135a:	68a2      	ldr	r2, [r4, #8]
 800135c:	c307      	stmia	r3!, {r0, r1, r2}
 800135e:	89a2      	ldrh	r2, [r4, #12]
 8001360:	801a      	strh	r2, [r3, #0]
  LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8001362:	2303      	movs	r3, #3
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2302      	movs	r3, #2
 8001368:	2240      	movs	r2, #64	@ 0x40
 800136a:	210c      	movs	r1, #12
 800136c:	48a2      	ldr	r0, [pc, #648]	@ (80015f8 <main+0x300>)
 800136e:	f7ff ff18 	bl	80011a2 <LCD5110_init>

  while(MPU6050_Init(&hi2c1)==1);
 8001372:	bf00      	nop
 8001374:	48a4      	ldr	r0, [pc, #656]	@ (8001608 <main+0x310>)
 8001376:	f000 f9a1 	bl	80016bc <MPU6050_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b01      	cmp	r3, #1
 800137e:	d0f9      	beq.n	8001374 <main+0x7c>

  lcd2.hw_conf.spi_handle = &hspi2;
 8001380:	4ba2      	ldr	r3, [pc, #648]	@ (800160c <main+0x314>)
 8001382:	4aa3      	ldr	r2, [pc, #652]	@ (8001610 <main+0x318>)
 8001384:	601a      	str	r2, [r3, #0]
  lcd2.hw_conf.spi_cs_pin =  LCD2_CS_Pin;
 8001386:	4ba1      	ldr	r3, [pc, #644]	@ (800160c <main+0x314>)
 8001388:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800138c:	809a      	strh	r2, [r3, #4]
  lcd2.hw_conf.spi_cs_port = LCD2_CS_GPIO_Port;
 800138e:	4b9f      	ldr	r3, [pc, #636]	@ (800160c <main+0x314>)
 8001390:	4aa0      	ldr	r2, [pc, #640]	@ (8001614 <main+0x31c>)
 8001392:	609a      	str	r2, [r3, #8]
  lcd2.hw_conf.rst_pin =  LCD2_RST_Pin;
 8001394:	4b9d      	ldr	r3, [pc, #628]	@ (800160c <main+0x314>)
 8001396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800139a:	819a      	strh	r2, [r3, #12]
  lcd2.hw_conf.rst_port = LCD2_RST_GPIO_Port;
 800139c:	4b9b      	ldr	r3, [pc, #620]	@ (800160c <main+0x314>)
 800139e:	4a9d      	ldr	r2, [pc, #628]	@ (8001614 <main+0x31c>)
 80013a0:	611a      	str	r2, [r3, #16]
  lcd2.hw_conf.dc_pin =  LCD2_DC_Pin;
 80013a2:	4b9a      	ldr	r3, [pc, #616]	@ (800160c <main+0x314>)
 80013a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013a8:	829a      	strh	r2, [r3, #20]
  lcd2.hw_conf.dc_port = LCD2_DC_GPIO_Port;
 80013aa:	4b98      	ldr	r3, [pc, #608]	@ (800160c <main+0x314>)
 80013ac:	4a99      	ldr	r2, [pc, #612]	@ (8001614 <main+0x31c>)
 80013ae:	619a      	str	r2, [r3, #24]
  lcd2.def_scr = lcd5110_def_scr;
 80013b0:	4b96      	ldr	r3, [pc, #600]	@ (800160c <main+0x314>)
 80013b2:	4a94      	ldr	r2, [pc, #592]	@ (8001604 <main+0x30c>)
 80013b4:	f503 7305 	add.w	r3, r3, #532	@ 0x214
 80013b8:	4614      	mov	r4, r2
 80013ba:	6820      	ldr	r0, [r4, #0]
 80013bc:	6861      	ldr	r1, [r4, #4]
 80013be:	68a2      	ldr	r2, [r4, #8]
 80013c0:	c307      	stmia	r3!, {r0, r1, r2}
 80013c2:	89a2      	ldrh	r2, [r4, #12]
 80013c4:	801a      	strh	r2, [r3, #0]
  LCD5110_init(&lcd2.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 80013c6:	2303      	movs	r3, #3
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2302      	movs	r3, #2
 80013cc:	2240      	movs	r2, #64	@ 0x40
 80013ce:	210c      	movs	r1, #12
 80013d0:	488e      	ldr	r0, [pc, #568]	@ (800160c <main+0x314>)
 80013d2:	f7ff fee6 	bl	80011a2 <LCD5110_init>

  time = 10120000;
 80013d6:	4b90      	ldr	r3, [pc, #576]	@ (8001618 <main+0x320>)
 80013d8:	4a90      	ldr	r2, [pc, #576]	@ (800161c <main+0x324>)
 80013da:	601a      	str	r2, [r3, #0]


  HAL_TIM_Base_Start_IT(&htim1);
 80013dc:	4890      	ldr	r0, [pc, #576]	@ (8001620 <main+0x328>)
 80013de:	f003 f8f9 	bl	80045d4 <HAL_TIM_Base_Start_IT>
    SandClock clock;

    generateDisplay(clock.display);
 80013e2:	f507 5310 	add.w	r3, r7, #9216	@ 0x2400
 80013e6:	3304      	adds	r3, #4
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 faa1 	bl	8001930 <generateDisplay>
//  uint8_t message1[50];
  /* USER CODE END 2 */

  /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    int constd = (int)(time/2351);
 80013ee:	4b8a      	ldr	r3, [pc, #552]	@ (8001618 <main+0x320>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b8c      	ldr	r3, [pc, #560]	@ (8001624 <main+0x32c>)
 80013f4:	fba3 1302 	umull	r1, r3, r3, r2
 80013f8:	1ad2      	subs	r2, r2, r3
 80013fa:	0852      	lsrs	r2, r2, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	0adb      	lsrs	r3, r3, #11
 8001400:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8001404:	f102 0214 	add.w	r2, r2, #20
 8001408:	6013      	str	r3, [r2, #0]
    int temp = 1;
 800140a:	2301      	movs	r3, #1
 800140c:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8001410:	f102 0210 	add.w	r2, r2, #16
 8001414:	6013      	str	r3, [r2, #0]
//		  char message1[50];
//		  sprintf(message1, "%0.2f x,\n %0.2f y,\n %0.2f z\n",MPU6050.Ax, MPU6050.Ay, MPU6050.Az);
//		  LCD5110_print(message1, BLACK, &lcd1);
//	  }
    /* USER CODE BEGIN 3 */
    if (elapsed_time_s % 1 == 0){
 8001416:	4b84      	ldr	r3, [pc, #528]	@ (8001628 <main+0x330>)
 8001418:	681b      	ldr	r3, [r3, #0]
    	MPU6050_Read_Accel(&hi2c1, &MPU6050);
 800141a:	4984      	ldr	r1, [pc, #528]	@ (800162c <main+0x334>)
 800141c:	487a      	ldr	r0, [pc, #488]	@ (8001608 <main+0x310>)
 800141e:	f000 f9a7 	bl	8001770 <MPU6050_Read_Accel>
    	          if (temp > 0 && MPU6050.Az < -0.3){
 8001422:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001426:	f103 0310 	add.w	r3, r3, #16
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	dd33      	ble.n	8001498 <main+0x1a0>
 8001430:	4b7e      	ldr	r3, [pc, #504]	@ (800162c <main+0x334>)
 8001432:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001436:	a36c      	add	r3, pc, #432	@ (adr r3, 80015e8 <main+0x2f0>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff fabe 	bl	80009bc <__aeabi_dcmplt>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d028      	beq.n	8001498 <main+0x1a0>
    	            inverseMatrix(clock.display, clock.display);
 8001446:	f507 5310 	add.w	r3, r7, #9216	@ 0x2400
 800144a:	1d1a      	adds	r2, r3, #4
 800144c:	f507 5310 	add.w	r3, r7, #9216	@ 0x2400
 8001450:	3304      	adds	r3, #4
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f9f5 	bl	8001844 <inverseMatrix>
    	            for (int i = 0; i<ROWS; i++){
 800145a:	2300      	movs	r3, #0
 800145c:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8001460:	f102 021c 	add.w	r2, r2, #28
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e010      	b.n	800148a <main+0x192>
    	                update(clock.display);
 8001468:	f507 5310 	add.w	r3, r7, #9216	@ 0x2400
 800146c:	3304      	adds	r3, #4
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fa96 	bl	80019a0 <update>
    	            for (int i = 0; i<ROWS; i++){
 8001474:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001478:	f103 031c 	add.w	r3, r3, #28
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 8001484:	f102 021c 	add.w	r2, r2, #28
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 800148e:	f103 031c 	add.w	r3, r3, #28
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b2f      	cmp	r3, #47	@ 0x2f
 8001496:	dde7      	ble.n	8001468 <main+0x170>
    	            }
    	        }
    	          if (temp < 0 && MPU6050.Az > 0.3){
 8001498:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 800149c:	f103 0310 	add.w	r3, r3, #16
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	da33      	bge.n	800150e <main+0x216>
 80014a6:	4b61      	ldr	r3, [pc, #388]	@ (800162c <main+0x334>)
 80014a8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80014ac:	a350      	add	r3, pc, #320	@ (adr r3, 80015f0 <main+0x2f8>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7ff faa1 	bl	80009f8 <__aeabi_dcmpgt>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d028      	beq.n	800150e <main+0x216>
    	            inverseMatrix(clock.display, clock.display);
 80014bc:	f507 5310 	add.w	r3, r7, #9216	@ 0x2400
 80014c0:	1d1a      	adds	r2, r3, #4
 80014c2:	f507 5310 	add.w	r3, r7, #9216	@ 0x2400
 80014c6:	3304      	adds	r3, #4
 80014c8:	4611      	mov	r1, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f9ba 	bl	8001844 <inverseMatrix>
    	            for (int i = 0; i<ROWS; i++){
 80014d0:	2300      	movs	r3, #0
 80014d2:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 80014d6:	f102 0218 	add.w	r2, r2, #24
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e010      	b.n	8001500 <main+0x208>
    	                update(clock.display);
 80014de:	f507 5310 	add.w	r3, r7, #9216	@ 0x2400
 80014e2:	3304      	adds	r3, #4
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fa5b 	bl	80019a0 <update>
    	            for (int i = 0; i<ROWS; i++){
 80014ea:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 80014ee:	f103 0318 	add.w	r3, r3, #24
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	f507 5240 	add.w	r2, r7, #12288	@ 0x3000
 80014fa:	f102 0218 	add.w	r2, r2, #24
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001504:	f103 0318 	add.w	r3, r3, #24
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b2f      	cmp	r3, #47	@ 0x2f
 800150c:	dde7      	ble.n	80014de <main+0x1e6>
    	            }
    	        }

    	          sandTick(clock.display);
 800150e:	f507 5310 	add.w	r3, r7, #9216	@ 0x2400
 8001512:	3304      	adds	r3, #4
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fa2f 	bl	8001978 <sandTick>
    	          update(clock.display);
 800151a:	f507 5310 	add.w	r3, r7, #9216	@ 0x2400
 800151e:	3304      	adds	r3, #4
 8001520:	4618      	mov	r0, r3
 8001522:	f000 fa3d 	bl	80019a0 <update>
    	          drawLines(clock.display, upper_display);
 8001526:	f507 6342 	add.w	r3, r7, #3104	@ 0xc20
 800152a:	3b20      	subs	r3, #32
 800152c:	f507 5210 	add.w	r2, r7, #9216	@ 0x2400
 8001530:	3204      	adds	r2, #4
 8001532:	4619      	mov	r1, r3
 8001534:	4610      	mov	r0, r2
 8001536:	f000 f9b6 	bl	80018a6 <drawLines>
    	          inverseMatrix(clock.display, temp_display);
 800153a:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 800153e:	f507 5310 	add.w	r3, r7, #9216	@ 0x2400
 8001542:	3304      	adds	r3, #4
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f97c 	bl	8001844 <inverseMatrix>
    	          drawLines(temp_display, bottom_display);
 800154c:	f107 0320 	add.w	r3, r7, #32
 8001550:	3b20      	subs	r3, #32
 8001552:	f507 52c0 	add.w	r2, r7, #6144	@ 0x1800
 8001556:	4619      	mov	r1, r3
 8001558:	4610      	mov	r0, r2
 800155a:	f000 f9a4 	bl	80018a6 <drawLines>
        if (temp < 0){
 800155e:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 8001562:	f103 0310 	add.w	r3, r3, #16
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	da15      	bge.n	8001598 <main+0x2a0>
            LCD5110_clear_scr(&lcd1);
 800156c:	4822      	ldr	r0, [pc, #136]	@ (80015f8 <main+0x300>)
 800156e:	f7ff fc0f 	bl	8000d90 <LCD5110_clear_scr>
            LCD5110_clear_scr(&lcd2);
 8001572:	4826      	ldr	r0, [pc, #152]	@ (800160c <main+0x314>)
 8001574:	f7ff fc0c 	bl	8000d90 <LCD5110_clear_scr>
            LCD5110_arr_out(upper_display, 1, &lcd1);
 8001578:	f507 6342 	add.w	r3, r7, #3104	@ 0xc20
 800157c:	3b20      	subs	r3, #32
 800157e:	4a1e      	ldr	r2, [pc, #120]	@ (80015f8 <main+0x300>)
 8001580:	2101      	movs	r1, #1
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fe88 	bl	8001298 <LCD5110_arr_out>
            LCD5110_arr_out(bottom_display, 1, &lcd2);
 8001588:	f107 0320 	add.w	r3, r7, #32
 800158c:	3b20      	subs	r3, #32
 800158e:	4a1f      	ldr	r2, [pc, #124]	@ (800160c <main+0x314>)
 8001590:	2101      	movs	r1, #1
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fe80 	bl	8001298 <LCD5110_arr_out>
        }
        if (temp > 0){
 8001598:	f507 5340 	add.w	r3, r7, #12288	@ 0x3000
 800159c:	f103 0310 	add.w	r3, r3, #16
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	dd15      	ble.n	80015d2 <main+0x2da>
            LCD5110_clear_scr(&lcd1);
 80015a6:	4814      	ldr	r0, [pc, #80]	@ (80015f8 <main+0x300>)
 80015a8:	f7ff fbf2 	bl	8000d90 <LCD5110_clear_scr>
            LCD5110_clear_scr(&lcd2);
 80015ac:	4817      	ldr	r0, [pc, #92]	@ (800160c <main+0x314>)
 80015ae:	f7ff fbef 	bl	8000d90 <LCD5110_clear_scr>
            LCD5110_arr_out(upper_display, 1, &lcd2);
 80015b2:	f507 6342 	add.w	r3, r7, #3104	@ 0xc20
 80015b6:	3b20      	subs	r3, #32
 80015b8:	4a14      	ldr	r2, [pc, #80]	@ (800160c <main+0x314>)
 80015ba:	2101      	movs	r1, #1
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fe6b 	bl	8001298 <LCD5110_arr_out>
            LCD5110_arr_out(bottom_display, 1, &lcd1);
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	3b20      	subs	r3, #32
 80015c8:	4a0b      	ldr	r2, [pc, #44]	@ (80015f8 <main+0x300>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fe63 	bl	8001298 <LCD5110_arr_out>
        }
    }
	  if (elapsed_time_s >= time)
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <main+0x330>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <main+0x320>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	f4ff af1b 	bcc.w	8001416 <main+0x11e>
//		  char message[50];
//		  	    sprintf(message, "%lu seconds\n", elapsed_time_s / 1000);
//		  	    LCD5110_clear_scr(&lcd1);
//		  	    LCD5110_set_cursor(0, 20, &lcd1);
//		  	    LCD5110_print(message, BLACK, &lcd1);
		  HAL_TIM_Base_Stop_IT(&htim1);
 80015e0:	480f      	ldr	r0, [pc, #60]	@ (8001620 <main+0x328>)
 80015e2:	f003 f849 	bl	8004678 <HAL_TIM_Base_Stop_IT>
    if (elapsed_time_s % 1 == 0){
 80015e6:	e716      	b.n	8001416 <main+0x11e>
 80015e8:	33333333 	.word	0x33333333
 80015ec:	bfd33333 	.word	0xbfd33333
 80015f0:	33333333 	.word	0x33333333
 80015f4:	3fd33333 	.word	0x3fd33333
 80015f8:	20000248 	.word	0x20000248
 80015fc:	200006f0 	.word	0x200006f0
 8001600:	40010800 	.word	0x40010800
 8001604:	08009600 	.word	0x08009600
 8001608:	200001f4 	.word	0x200001f4
 800160c:	2000046c 	.word	0x2000046c
 8001610:	20000748 	.word	0x20000748
 8001614:	40010c00 	.word	0x40010c00
 8001618:	200006ec 	.word	0x200006ec
 800161c:	009a6b40 	.word	0x009a6b40
 8001620:	200007a4 	.word	0x200007a4
 8001624:	be034447 	.word	0xbe034447
 8001628:	200006e8 	.word	0x200006e8
 800162c:	20000690 	.word	0x20000690

08001630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b090      	sub	sp, #64	@ 0x40
 8001634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001636:	f107 0318 	add.w	r3, r7, #24
 800163a:	2228      	movs	r2, #40	@ 0x28
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f004 fc07 	bl	8005e52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001656:	2301      	movs	r3, #1
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800165a:	2310      	movs	r3, #16
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800165e:	2302      	movs	r3, #2
 8001660:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001662:	2300      	movs	r3, #0
 8001664:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001666:	2300      	movs	r3, #0
 8001668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	4618      	mov	r0, r3
 8001670:	f002 f8d0 	bl	8003814 <HAL_RCC_OscConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800167a:	f000 f819 	bl	80016b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167e:	230f      	movs	r3, #15
 8001680:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001682:	2302      	movs	r3, #2
 8001684:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800168a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800168e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f002 fb3d 	bl	8003d18 <HAL_RCC_ClockConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80016a4:	f000 f804 	bl	80016b0 <Error_Handler>
  }
}
 80016a8:	bf00      	nop
 80016aa:	3740      	adds	r7, #64	@ 0x40
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b4:	b672      	cpsid	i
}
 80016b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <Error_Handler+0x8>

080016bc <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af04      	add	r7, sp, #16
 80016c2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80016c4:	2364      	movs	r3, #100	@ 0x64
 80016c6:	9302      	str	r3, [sp, #8]
 80016c8:	2301      	movs	r3, #1
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	f107 030f 	add.w	r3, r7, #15
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2301      	movs	r3, #1
 80016d4:	2275      	movs	r2, #117	@ 0x75
 80016d6:	21d0      	movs	r1, #208	@ 0xd0
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f001 fa73 	bl	8002bc4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	2b68      	cmp	r3, #104	@ 0x68
 80016e2:	d13d      	bne.n	8001760 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80016e8:	2364      	movs	r3, #100	@ 0x64
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	2301      	movs	r3, #1
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	f107 030e 	add.w	r3, r7, #14
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2301      	movs	r3, #1
 80016f8:	226b      	movs	r2, #107	@ 0x6b
 80016fa:	21d0      	movs	r1, #208	@ 0xd0
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f001 f967 	bl	80029d0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001702:	2307      	movs	r3, #7
 8001704:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001706:	2364      	movs	r3, #100	@ 0x64
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	2301      	movs	r3, #1
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	f107 030e 	add.w	r3, r7, #14
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2301      	movs	r3, #1
 8001716:	2219      	movs	r2, #25
 8001718:	21d0      	movs	r1, #208	@ 0xd0
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f001 f958 	bl	80029d0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001720:	2300      	movs	r3, #0
 8001722:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001724:	2364      	movs	r3, #100	@ 0x64
 8001726:	9302      	str	r3, [sp, #8]
 8001728:	2301      	movs	r3, #1
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	f107 030e 	add.w	r3, r7, #14
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2301      	movs	r3, #1
 8001734:	221c      	movs	r2, #28
 8001736:	21d0      	movs	r1, #208	@ 0xd0
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f001 f949 	bl	80029d0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800173e:	2300      	movs	r3, #0
 8001740:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001742:	2364      	movs	r3, #100	@ 0x64
 8001744:	9302      	str	r3, [sp, #8]
 8001746:	2301      	movs	r3, #1
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	f107 030e 	add.w	r3, r7, #14
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2301      	movs	r3, #1
 8001752:	221b      	movs	r2, #27
 8001754:	21d0      	movs	r1, #208	@ 0xd0
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f001 f93a 	bl	80029d0 <HAL_I2C_Mem_Write>
        return 0;
 800175c:	2300      	movs	r3, #0
 800175e:	e000      	b.n	8001762 <MPU6050_Init+0xa6>
    }
    return 1;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	0000      	movs	r0, r0
 800176c:	0000      	movs	r0, r0
	...

08001770 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af04      	add	r7, sp, #16
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 800177a:	2364      	movs	r3, #100	@ 0x64
 800177c:	9302      	str	r3, [sp, #8]
 800177e:	2306      	movs	r3, #6
 8001780:	9301      	str	r3, [sp, #4]
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2301      	movs	r3, #1
 800178a:	223b      	movs	r2, #59	@ 0x3b
 800178c:	21d0      	movs	r1, #208	@ 0xd0
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f001 fa18 	bl	8002bc4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001794:	7a3b      	ldrb	r3, [r7, #8]
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	b21a      	sxth	r2, r3
 800179a:	7a7b      	ldrb	r3, [r7, #9]
 800179c:	b21b      	sxth	r3, r3
 800179e:	4313      	orrs	r3, r2
 80017a0:	b21a      	sxth	r2, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80017a6:	7abb      	ldrb	r3, [r7, #10]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	7afb      	ldrb	r3, [r7, #11]
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80017b8:	7b3b      	ldrb	r3, [r7, #12]
 80017ba:	021b      	lsls	r3, r3, #8
 80017bc:	b21a      	sxth	r2, r3
 80017be:	7b7b      	ldrb	r3, [r7, #13]
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe17 	bl	8000404 <__aeabi_i2d>
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <MPU6050_Read_Accel+0xd0>)
 80017dc:	f7fe ffa6 	bl	800072c <__aeabi_ddiv>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	6839      	ldr	r1, [r7, #0]
 80017e6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe07 	bl	8000404 <__aeabi_i2d>
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <MPU6050_Read_Accel+0xd0>)
 80017fc:	f7fe ff96 	bl	800072c <__aeabi_ddiv>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	6839      	ldr	r1, [r7, #0]
 8001806:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fdf7 	bl	8000404 <__aeabi_i2d>
 8001816:	a308      	add	r3, pc, #32	@ (adr r3, 8001838 <MPU6050_Read_Accel+0xc8>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe ff86 	bl	800072c <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	6839      	ldr	r1, [r7, #0]
 8001826:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	f3af 8000 	nop.w
 8001838:	00000000 	.word	0x00000000
 800183c:	40cc2900 	.word	0x40cc2900
 8001840:	40d00000 	.word	0x40d00000

08001844 <inverseMatrix>:
// Created by f1rset on 11/28/24.
//
#include "sandClockStruct.h"


void inverseMatrix(uint8_t matrix[ROWS][COLS], uint8_t new_matrix[ROWS][COLS]) {
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < ROWS; i++) {
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	e01f      	b.n	8001894 <inverseMatrix+0x50>
        for (size_t j = 0; j < COLS; j++) {
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	e016      	b.n	8001888 <inverseMatrix+0x44>
            new_matrix[i][j] = (matrix[i][j] == 0) ? 1 : 0;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	019b      	lsls	r3, r3, #6
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	441a      	add	r2, r3
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	4413      	add	r3, r2
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf0c      	ite	eq
 800186c:	2301      	moveq	r3, #1
 800186e:	2300      	movne	r3, #0
 8001870:	b2d9      	uxtb	r1, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	019b      	lsls	r3, r3, #6
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	441a      	add	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	4413      	add	r3, r2
 800187e:	460a      	mov	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
        for (size_t j = 0; j < COLS; j++) {
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	3301      	adds	r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b3f      	cmp	r3, #63	@ 0x3f
 800188c:	d9e5      	bls.n	800185a <inverseMatrix+0x16>
    for (size_t i = 0; i < ROWS; i++) {
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	3301      	adds	r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b2f      	cmp	r3, #47	@ 0x2f
 8001898:	d9dc      	bls.n	8001854 <inverseMatrix+0x10>
        }
    }
}
 800189a:	bf00      	nop
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <drawLines>:

void drawLines(uint8_t matrix[ROWS][COLS], uint8_t new_matrix[ROWS][COLS]) {
 80018a6:	b480      	push	{r7}
 80018a8:	b087      	sub	sp, #28
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
    int hard = COLS/2 + ROWS;
 80018b0:	2350      	movs	r3, #80	@ 0x50
 80018b2:	60fb      	str	r3, [r7, #12]

    for (int y = 0; y<ROWS; y++){
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e031      	b.n	800191e <drawLines+0x78>
        for (int x = 0; x<COLS ; x++) {
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	e028      	b.n	8001912 <drawLines+0x6c>
            if (x+y >= hard | COLS-1-x+y >= hard){
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	441a      	add	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	f1c3 013f 	rsb	r1, r3, #63	@ 0x3f
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	440b      	add	r3, r1
 80018d0:	4293      	cmp	r3, r2
 80018d2:	bfb8      	it	lt
 80018d4:	4613      	movlt	r3, r2
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dc08      	bgt.n	80018ee <drawLines+0x48>
                new_matrix[y][x] = 0;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	019b      	lsls	r3, r3, #6
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	441a      	add	r2, r3
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4413      	add	r3, r2
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	e00e      	b.n	800190c <drawLines+0x66>
            }
            else{
                new_matrix[y][x] = matrix[y][x];
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	019b      	lsls	r3, r3, #6
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	18d1      	adds	r1, r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	019b      	lsls	r3, r3, #6
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	441a      	add	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	440b      	add	r3, r1
 8001902:	7819      	ldrb	r1, [r3, #0]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4413      	add	r3, r2
 8001908:	460a      	mov	r2, r1
 800190a:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x<COLS ; x++) {
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	3301      	adds	r3, #1
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	2b3f      	cmp	r3, #63	@ 0x3f
 8001916:	ddd3      	ble.n	80018c0 <drawLines+0x1a>
    for (int y = 0; y<ROWS; y++){
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b2f      	cmp	r3, #47	@ 0x2f
 8001922:	ddca      	ble.n	80018ba <drawLines+0x14>
            }
        }
    }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	371c      	adds	r7, #28
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <generateDisplay>:

void generateDisplay(uint8_t matrix[ROWS][COLS]) {
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < ROWS; i++)
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e013      	b.n	8001966 <generateDisplay+0x36>
    {
        for (size_t j = 0; j < COLS; j++)
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	e00a      	b.n	800195a <generateDisplay+0x2a>
        {
            matrix[i][j] = 1;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	019b      	lsls	r3, r3, #6
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	441a      	add	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4413      	add	r3, r2
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
        for (size_t j = 0; j < COLS; j++)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	3301      	adds	r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b3f      	cmp	r3, #63	@ 0x3f
 800195e:	d9f1      	bls.n	8001944 <generateDisplay+0x14>
    for (size_t i = 0; i < ROWS; i++)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3301      	adds	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b2f      	cmp	r3, #47	@ 0x2f
 800196a:	d9e8      	bls.n	800193e <generateDisplay+0xe>
        }
    }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <sandTick>:
void sandTick(uint8_t matrix[ROWS][COLS]){
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    matrix[ROWS-1][COLS/2-1] = 0;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f503 633c 	add.w	r3, r3, #3008	@ 0xbc0
 8001986:	2200      	movs	r2, #0
 8001988:	77da      	strb	r2, [r3, #31]
    matrix[ROWS-1][COLS/2] = 0;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f503 633c 	add.w	r3, r3, #3008	@ 0xbc0
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <update>:
void update(uint8_t display[ROWS][COLS]){
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    for (int row = ROWS-2; row >= 0; row--)
 80019a8:	232e      	movs	r3, #46	@ 0x2e
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e09a      	b.n	8001ae4 <update+0x144>
    {
        for (int col = 0; col < COLS; col++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	e090      	b.n	8001ad6 <update+0x136>
        {

            if (display[row][col])
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	019b      	lsls	r3, r3, #6
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	441a      	add	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8084 	beq.w	8001ad0 <update+0x130>
            {

                if (col>=COLS/2)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b1f      	cmp	r3, #31
 80019cc:	dd40      	ble.n	8001a50 <update+0xb0>
                {
                    // check for +1down
                    if (display[row+1][col] == 0)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3301      	adds	r3, #1
 80019d2:	019b      	lsls	r3, r3, #6
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	441a      	add	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4413      	add	r3, r2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d111      	bne.n	8001a06 <update+0x66>
                    {
                        display[row][col] = 0;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	019b      	lsls	r3, r3, #6
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	441a      	add	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	4413      	add	r3, r2
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
                        display[row+1][col] = 1;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3301      	adds	r3, #1
 80019f6:	019b      	lsls	r3, r3, #6
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	441a      	add	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4413      	add	r3, r2
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	e064      	b.n	8001ad0 <update+0x130>
                        // printDisplayTerminal(display);
                    }


                        // check for +1 down and +1 to the left
                    else if (display[row+1][col-1] == 0 && display[row][col-1] ==0)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	019b      	lsls	r3, r3, #6
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	441a      	add	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	5cd3      	ldrb	r3, [r2, r3]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d15a      	bne.n	8001ad0 <update+0x130>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	019b      	lsls	r3, r3, #6
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	441a      	add	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d151      	bne.n	8001ad0 <update+0x130>
                    {
                        display[row][col] = 0;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	019b      	lsls	r3, r3, #6
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	441a      	add	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4413      	add	r3, r2
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
                        display[row+1][col-1] = 1;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	019b      	lsls	r3, r3, #6
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	441a      	add	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	54d1      	strb	r1, [r2, r3]
 8001a4e:	e03f      	b.n	8001ad0 <update+0x130>
                        // printDisplayTerminal(display);
                    }
                } else {
                    // check for +1down
                    if (display[row+1][col] == 0)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3301      	adds	r3, #1
 8001a54:	019b      	lsls	r3, r3, #6
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	441a      	add	r2, r3
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d111      	bne.n	8001a88 <update+0xe8>
                    {
                        display[row][col] = 0;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	019b      	lsls	r3, r3, #6
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	441a      	add	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4413      	add	r3, r2
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
                        display[row+1][col] = 1;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3301      	adds	r3, #1
 8001a78:	019b      	lsls	r3, r3, #6
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	441a      	add	r2, r3
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	4413      	add	r3, r2
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e023      	b.n	8001ad0 <update+0x130>
                        // printDisplayTerminal(display);
                    }


                        // check for +1 down and +1 to the right if no neighbour on the right
                    else if (display[row+1][col+1] == 0 && display[row][col+1] == 0)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	019b      	lsls	r3, r3, #6
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	441a      	add	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3301      	adds	r3, #1
 8001a96:	5cd3      	ldrb	r3, [r2, r3]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d119      	bne.n	8001ad0 <update+0x130>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	019b      	lsls	r3, r3, #6
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	441a      	add	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	5cd3      	ldrb	r3, [r2, r3]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d110      	bne.n	8001ad0 <update+0x130>
                    {
                        display[row][col] = 0;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	019b      	lsls	r3, r3, #6
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	441a      	add	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	4413      	add	r3, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
                        display[row+1][col+1] = 1;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	019b      	lsls	r3, r3, #6
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	441a      	add	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	3301      	adds	r3, #1
 8001acc:	2101      	movs	r1, #1
 8001ace:	54d1      	strb	r1, [r2, r3]
        for (int col = 0; col < COLS; col++)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ada:	f77f af6b 	ble.w	80019b4 <update+0x14>
    for (int row = ROWS-2; row >= 0; row--)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f6bf af61 	bge.w	80019ae <update+0xe>

                }
            }
        }
    }
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001afc:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001afe:	4a18      	ldr	r2, [pc, #96]	@ (8001b60 <MX_SPI1_Init+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b16:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b44:	220a      	movs	r2, #10
 8001b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b48:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <MX_SPI1_Init+0x64>)
 8001b4a:	f002 fa73 	bl	8004034 <HAL_SPI_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b54:	f7ff fdac 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200006f0 	.word	0x200006f0
 8001b60:	40013000 	.word	0x40013000

08001b64 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001b68:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b6a:	4a18      	ldr	r2, [pc, #96]	@ (8001bcc <MX_SPI2_Init+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b76:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b96:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b98:	2210      	movs	r2, #16
 8001b9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba2:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba8:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001bb0:	220a      	movs	r2, #10
 8001bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bb4:	4804      	ldr	r0, [pc, #16]	@ (8001bc8 <MX_SPI2_Init+0x64>)
 8001bb6:	f002 fa3d 	bl	8004034 <HAL_SPI_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001bc0:	f7ff fd76 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20000748 	.word	0x20000748
 8001bcc:	40003800 	.word	0x40003800

08001bd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2b      	ldr	r2, [pc, #172]	@ (8001c98 <HAL_SPI_MspInit+0xc8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d124      	bne.n	8001c3a <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <HAL_SPI_MspInit+0xcc>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	4a29      	ldr	r2, [pc, #164]	@ (8001c9c <HAL_SPI_MspInit+0xcc>)
 8001bf6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bfa:	6193      	str	r3, [r2, #24]
 8001bfc:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <HAL_SPI_MspInit+0xcc>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c08:	4b24      	ldr	r3, [pc, #144]	@ (8001c9c <HAL_SPI_MspInit+0xcc>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a23      	ldr	r2, [pc, #140]	@ (8001c9c <HAL_SPI_MspInit+0xcc>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b21      	ldr	r3, [pc, #132]	@ (8001c9c <HAL_SPI_MspInit+0xcc>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD1_CLK_Pin|LCD1_DATA_Pin;
 8001c20:	23a0      	movs	r3, #160	@ 0xa0
 8001c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2c:	f107 0318 	add.w	r3, r7, #24
 8001c30:	4619      	mov	r1, r3
 8001c32:	481b      	ldr	r0, [pc, #108]	@ (8001ca0 <HAL_SPI_MspInit+0xd0>)
 8001c34:	f000 fbec 	bl	8002410 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c38:	e029      	b.n	8001c8e <HAL_SPI_MspInit+0xbe>
  else if(spiHandle->Instance==SPI2)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a19      	ldr	r2, [pc, #100]	@ (8001ca4 <HAL_SPI_MspInit+0xd4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d124      	bne.n	8001c8e <HAL_SPI_MspInit+0xbe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c44:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <HAL_SPI_MspInit+0xcc>)
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	4a14      	ldr	r2, [pc, #80]	@ (8001c9c <HAL_SPI_MspInit+0xcc>)
 8001c4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c4e:	61d3      	str	r3, [r2, #28]
 8001c50:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <HAL_SPI_MspInit+0xcc>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <HAL_SPI_MspInit+0xcc>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a0e      	ldr	r2, [pc, #56]	@ (8001c9c <HAL_SPI_MspInit+0xcc>)
 8001c62:	f043 0308 	orr.w	r3, r3, #8
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <HAL_SPI_MspInit+0xcc>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD2_CLK_Pin|LCD2_DATA_Pin;
 8001c74:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 0318 	add.w	r3, r7, #24
 8001c86:	4619      	mov	r1, r3
 8001c88:	4807      	ldr	r0, [pc, #28]	@ (8001ca8 <HAL_SPI_MspInit+0xd8>)
 8001c8a:	f000 fbc1 	bl	8002410 <HAL_GPIO_Init>
}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	@ 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40013000 	.word	0x40013000
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010800 	.word	0x40010800
 8001ca4:	40003800 	.word	0x40003800
 8001ca8:	40010c00 	.word	0x40010c00

08001cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_MspInit+0x5c>)
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	4a14      	ldr	r2, [pc, #80]	@ (8001d08 <HAL_MspInit+0x5c>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6193      	str	r3, [r2, #24]
 8001cbe:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <HAL_MspInit+0x5c>)
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <HAL_MspInit+0x5c>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	4a0e      	ldr	r2, [pc, #56]	@ (8001d08 <HAL_MspInit+0x5c>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd4:	61d3      	str	r3, [r2, #28]
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <HAL_MspInit+0x5c>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <HAL_MspInit+0x60>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <HAL_MspInit+0x60>)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010000 	.word	0x40010000

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <NMI_Handler+0x4>

08001d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <HardFault_Handler+0x4>

08001d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <MemManage_Handler+0x4>

08001d28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <BusFault_Handler+0x4>

08001d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <UsageFault_Handler+0x4>

08001d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d60:	f000 fa2c 	bl	80021bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d6c:	4802      	ldr	r0, [pc, #8]	@ (8001d78 <TIM1_UP_IRQHandler+0x10>)
 8001d6e:	f002 fcb1 	bl	80046d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200007a4 	.word	0x200007a4

08001d7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return 1;
 8001d80:	2301      	movs	r3, #1
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <_kill>:

int _kill(int pid, int sig)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d94:	f004 f8b0 	bl	8005ef8 <__errno>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2216      	movs	r2, #22
 8001d9c:	601a      	str	r2, [r3, #0]
  return -1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <_exit>:

void _exit (int status)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001db2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffe7 	bl	8001d8a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <_exit+0x12>

08001dc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	e00a      	b.n	8001de8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dd2:	f3af 8000 	nop.w
 8001dd6:	4601      	mov	r1, r0
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	60ba      	str	r2, [r7, #8]
 8001dde:	b2ca      	uxtb	r2, r1
 8001de0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbf0      	blt.n	8001dd2 <_read+0x12>
  }

  return len;
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	e009      	b.n	8001e20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	60ba      	str	r2, [r7, #8]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dbf1      	blt.n	8001e0c <_write+0x12>
  }
  return len;
 8001e28:	687b      	ldr	r3, [r7, #4]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <_close>:

int _close(int file)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e58:	605a      	str	r2, [r3, #4]
  return 0;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <_isatty>:

int _isatty(int file)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b085      	sub	sp, #20
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
	...

08001e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e9c:	4a14      	ldr	r2, [pc, #80]	@ (8001ef0 <_sbrk+0x5c>)
 8001e9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <_sbrk+0x60>)
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d102      	bne.n	8001eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <_sbrk+0x64>)
 8001eb2:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <_sbrk+0x68>)
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d207      	bcs.n	8001ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec4:	f004 f818 	bl	8005ef8 <__errno>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	220c      	movs	r2, #12
 8001ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ed2:	e009      	b.n	8001ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eda:	4b07      	ldr	r3, [pc, #28]	@ (8001ef8 <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4a05      	ldr	r2, [pc, #20]	@ (8001ef8 <_sbrk+0x64>)
 8001ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20005000 	.word	0x20005000
 8001ef4:	00000400 	.word	0x00000400
 8001ef8:	200007a0 	.word	0x200007a0
 8001efc:	20000988 	.word	0x20000988

08001f00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f12:	f107 0308 	add.w	r3, r7, #8
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f20:	463b      	mov	r3, r7
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f28:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa4 <MX_TIM1_Init+0x98>)
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa8 <MX_TIM1_Init+0x9c>)
 8001f2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <MX_TIM1_Init+0x98>)
 8001f30:	223f      	movs	r2, #63	@ 0x3f
 8001f32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa4 <MX_TIM1_Init+0x98>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <MX_TIM1_Init+0x98>)
 8001f3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f42:	4b18      	ldr	r3, [pc, #96]	@ (8001fa4 <MX_TIM1_Init+0x98>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f48:	4b16      	ldr	r3, [pc, #88]	@ (8001fa4 <MX_TIM1_Init+0x98>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <MX_TIM1_Init+0x98>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f54:	4813      	ldr	r0, [pc, #76]	@ (8001fa4 <MX_TIM1_Init+0x98>)
 8001f56:	f002 faee 	bl	8004536 <HAL_TIM_Base_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f60:	f7ff fba6 	bl	80016b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f6a:	f107 0308 	add.w	r3, r7, #8
 8001f6e:	4619      	mov	r1, r3
 8001f70:	480c      	ldr	r0, [pc, #48]	@ (8001fa4 <MX_TIM1_Init+0x98>)
 8001f72:	f002 fc9f 	bl	80048b4 <HAL_TIM_ConfigClockSource>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f7c:	f7ff fb98 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f80:	2300      	movs	r3, #0
 8001f82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4805      	ldr	r0, [pc, #20]	@ (8001fa4 <MX_TIM1_Init+0x98>)
 8001f8e:	f002 fe81 	bl	8004c94 <HAL_TIMEx_MasterConfigSynchronization>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f98:	f7ff fb8a 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200007a4 	.word	0x200007a4
 8001fa8:	40012c00 	.word	0x40012c00

08001fac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x44>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d113      	bne.n	8001fe6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <HAL_TIM_Base_MspInit+0x48>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff4 <HAL_TIM_Base_MspInit+0x48>)
 8001fc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fc8:	6193      	str	r3, [r2, #24]
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <HAL_TIM_Base_MspInit+0x48>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2019      	movs	r0, #25
 8001fdc:	f000 f9e1 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001fe0:	2019      	movs	r0, #25
 8001fe2:	f000 f9fa 	bl	80023da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40012c00 	.word	0x40012c00
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <MX_USART1_UART_Init+0x4c>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	@ (8002048 <MX_USART1_UART_Init+0x50>)
 8002000:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <MX_USART1_UART_Init+0x4c>)
 8002004:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002008:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800200a:	4b0e      	ldr	r3, [pc, #56]	@ (8002044 <MX_USART1_UART_Init+0x4c>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002010:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <MX_USART1_UART_Init+0x4c>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002016:	4b0b      	ldr	r3, [pc, #44]	@ (8002044 <MX_USART1_UART_Init+0x4c>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800201c:	4b09      	ldr	r3, [pc, #36]	@ (8002044 <MX_USART1_UART_Init+0x4c>)
 800201e:	220c      	movs	r2, #12
 8002020:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002022:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <MX_USART1_UART_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002028:	4b06      	ldr	r3, [pc, #24]	@ (8002044 <MX_USART1_UART_Init+0x4c>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800202e:	4805      	ldr	r0, [pc, #20]	@ (8002044 <MX_USART1_UART_Init+0x4c>)
 8002030:	f002 fea0 	bl	8004d74 <HAL_UART_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800203a:	f7ff fb39 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200007ec 	.word	0x200007ec
 8002048:	40013800 	.word	0x40013800

0800204c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1c      	ldr	r2, [pc, #112]	@ (80020d8 <HAL_UART_MspInit+0x8c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d131      	bne.n	80020d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800206c:	4b1b      	ldr	r3, [pc, #108]	@ (80020dc <HAL_UART_MspInit+0x90>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a1a      	ldr	r2, [pc, #104]	@ (80020dc <HAL_UART_MspInit+0x90>)
 8002072:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b18      	ldr	r3, [pc, #96]	@ (80020dc <HAL_UART_MspInit+0x90>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	4b15      	ldr	r3, [pc, #84]	@ (80020dc <HAL_UART_MspInit+0x90>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a14      	ldr	r2, [pc, #80]	@ (80020dc <HAL_UART_MspInit+0x90>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <HAL_UART_MspInit+0x90>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800209c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	4619      	mov	r1, r3
 80020b0:	480b      	ldr	r0, [pc, #44]	@ (80020e0 <HAL_UART_MspInit+0x94>)
 80020b2:	f000 f9ad 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	4619      	mov	r1, r3
 80020ca:	4805      	ldr	r0, [pc, #20]	@ (80020e0 <HAL_UART_MspInit+0x94>)
 80020cc:	f000 f9a0 	bl	8002410 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80020d0:	bf00      	nop
 80020d2:	3720      	adds	r7, #32
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40013800 	.word	0x40013800
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010800 	.word	0x40010800

080020e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020e4:	f7ff ff0c 	bl	8001f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e8:	480b      	ldr	r0, [pc, #44]	@ (8002118 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020ea:	490c      	ldr	r1, [pc, #48]	@ (800211c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002120 <LoopFillZerobss+0x16>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020f0:	e002      	b.n	80020f8 <LoopCopyDataInit>

080020f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f6:	3304      	adds	r3, #4

080020f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020fc:	d3f9      	bcc.n	80020f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fe:	4a09      	ldr	r2, [pc, #36]	@ (8002124 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002100:	4c09      	ldr	r4, [pc, #36]	@ (8002128 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002104:	e001      	b.n	800210a <LoopFillZerobss>

08002106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002108:	3204      	adds	r2, #4

0800210a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800210a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800210c:	d3fb      	bcc.n	8002106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800210e:	f003 fef9 	bl	8005f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002112:	f7ff f8f1 	bl	80012f8 <main>
  bx lr
 8002116:	4770      	bx	lr
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002120:	08009a78 	.word	0x08009a78
  ldr r2, =_sbss
 8002124:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002128:	20000984 	.word	0x20000984

0800212c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC1_2_IRQHandler>
	...

08002130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002134:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <HAL_Init+0x28>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a07      	ldr	r2, [pc, #28]	@ (8002158 <HAL_Init+0x28>)
 800213a:	f043 0310 	orr.w	r3, r3, #16
 800213e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002140:	2003      	movs	r0, #3
 8002142:	f000 f923 	bl	800238c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002146:	200f      	movs	r0, #15
 8002148:	f000 f808 	bl	800215c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800214c:	f7ff fdae 	bl	8001cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40022000 	.word	0x40022000

0800215c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002164:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <HAL_InitTick+0x54>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <HAL_InitTick+0x58>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002172:	fbb3 f3f1 	udiv	r3, r3, r1
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f93b 	bl	80023f6 <HAL_SYSTICK_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e00e      	b.n	80021a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b0f      	cmp	r3, #15
 800218e:	d80a      	bhi.n	80021a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002190:	2200      	movs	r2, #0
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002198:	f000 f903 	bl	80023a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800219c:	4a06      	ldr	r2, [pc, #24]	@ (80021b8 <HAL_InitTick+0x5c>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e000      	b.n	80021a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000000 	.word	0x20000000
 80021b4:	20000008 	.word	0x20000008
 80021b8:	20000004 	.word	0x20000004

080021bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c0:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <HAL_IncTick+0x1c>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b05      	ldr	r3, [pc, #20]	@ (80021dc <HAL_IncTick+0x20>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	4a03      	ldr	r2, [pc, #12]	@ (80021dc <HAL_IncTick+0x20>)
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	20000008 	.word	0x20000008
 80021dc:	20000834 	.word	0x20000834

080021e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return uwTick;
 80021e4:	4b02      	ldr	r3, [pc, #8]	@ (80021f0 <HAL_GetTick+0x10>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	20000834 	.word	0x20000834

080021f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0c      	ldr	r3, [pc, #48]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800221c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002226:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	60d3      	str	r3, [r2, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	2b00      	cmp	r3, #0
 8002268:	db0b      	blt.n	8002282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4906      	ldr	r1, [pc, #24]	@ (800228c <__NVIC_EnableIRQ+0x34>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2001      	movs	r0, #1
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	@ (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	@ (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	@ 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002358:	d301      	bcc.n	800235e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235a:	2301      	movs	r3, #1
 800235c:	e00f      	b.n	800237e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235e:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <SysTick_Config+0x40>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002366:	210f      	movs	r1, #15
 8002368:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800236c:	f7ff ff90 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002370:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <SysTick_Config+0x40>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002376:	4b04      	ldr	r3, [pc, #16]	@ (8002388 <SysTick_Config+0x40>)
 8002378:	2207      	movs	r2, #7
 800237a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e000e010 	.word	0xe000e010

0800238c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff2d 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff42 	bl	800223c <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff90 	bl	80022e4 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5f 	bl	8002290 <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff35 	bl	8002258 <__NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffa2 	bl	8002348 <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b08b      	sub	sp, #44	@ 0x2c
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002422:	e169      	b.n	80026f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002424:	2201      	movs	r2, #1
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	429a      	cmp	r2, r3
 800243e:	f040 8158 	bne.w	80026f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4a9a      	ldr	r2, [pc, #616]	@ (80026b0 <HAL_GPIO_Init+0x2a0>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d05e      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 800244c:	4a98      	ldr	r2, [pc, #608]	@ (80026b0 <HAL_GPIO_Init+0x2a0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d875      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 8002452:	4a98      	ldr	r2, [pc, #608]	@ (80026b4 <HAL_GPIO_Init+0x2a4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d058      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 8002458:	4a96      	ldr	r2, [pc, #600]	@ (80026b4 <HAL_GPIO_Init+0x2a4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d86f      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 800245e:	4a96      	ldr	r2, [pc, #600]	@ (80026b8 <HAL_GPIO_Init+0x2a8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d052      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 8002464:	4a94      	ldr	r2, [pc, #592]	@ (80026b8 <HAL_GPIO_Init+0x2a8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d869      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 800246a:	4a94      	ldr	r2, [pc, #592]	@ (80026bc <HAL_GPIO_Init+0x2ac>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d04c      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 8002470:	4a92      	ldr	r2, [pc, #584]	@ (80026bc <HAL_GPIO_Init+0x2ac>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d863      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 8002476:	4a92      	ldr	r2, [pc, #584]	@ (80026c0 <HAL_GPIO_Init+0x2b0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d046      	beq.n	800250a <HAL_GPIO_Init+0xfa>
 800247c:	4a90      	ldr	r2, [pc, #576]	@ (80026c0 <HAL_GPIO_Init+0x2b0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d85d      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 8002482:	2b12      	cmp	r3, #18
 8002484:	d82a      	bhi.n	80024dc <HAL_GPIO_Init+0xcc>
 8002486:	2b12      	cmp	r3, #18
 8002488:	d859      	bhi.n	800253e <HAL_GPIO_Init+0x12e>
 800248a:	a201      	add	r2, pc, #4	@ (adr r2, 8002490 <HAL_GPIO_Init+0x80>)
 800248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002490:	0800250b 	.word	0x0800250b
 8002494:	080024e5 	.word	0x080024e5
 8002498:	080024f7 	.word	0x080024f7
 800249c:	08002539 	.word	0x08002539
 80024a0:	0800253f 	.word	0x0800253f
 80024a4:	0800253f 	.word	0x0800253f
 80024a8:	0800253f 	.word	0x0800253f
 80024ac:	0800253f 	.word	0x0800253f
 80024b0:	0800253f 	.word	0x0800253f
 80024b4:	0800253f 	.word	0x0800253f
 80024b8:	0800253f 	.word	0x0800253f
 80024bc:	0800253f 	.word	0x0800253f
 80024c0:	0800253f 	.word	0x0800253f
 80024c4:	0800253f 	.word	0x0800253f
 80024c8:	0800253f 	.word	0x0800253f
 80024cc:	0800253f 	.word	0x0800253f
 80024d0:	0800253f 	.word	0x0800253f
 80024d4:	080024ed 	.word	0x080024ed
 80024d8:	08002501 	.word	0x08002501
 80024dc:	4a79      	ldr	r2, [pc, #484]	@ (80026c4 <HAL_GPIO_Init+0x2b4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024e2:	e02c      	b.n	800253e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	623b      	str	r3, [r7, #32]
          break;
 80024ea:	e029      	b.n	8002540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	3304      	adds	r3, #4
 80024f2:	623b      	str	r3, [r7, #32]
          break;
 80024f4:	e024      	b.n	8002540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	3308      	adds	r3, #8
 80024fc:	623b      	str	r3, [r7, #32]
          break;
 80024fe:	e01f      	b.n	8002540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	330c      	adds	r3, #12
 8002506:	623b      	str	r3, [r7, #32]
          break;
 8002508:	e01a      	b.n	8002540 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002512:	2304      	movs	r3, #4
 8002514:	623b      	str	r3, [r7, #32]
          break;
 8002516:	e013      	b.n	8002540 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d105      	bne.n	800252c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002520:	2308      	movs	r3, #8
 8002522:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	611a      	str	r2, [r3, #16]
          break;
 800252a:	e009      	b.n	8002540 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800252c:	2308      	movs	r3, #8
 800252e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	615a      	str	r2, [r3, #20]
          break;
 8002536:	e003      	b.n	8002540 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
          break;
 800253c:	e000      	b.n	8002540 <HAL_GPIO_Init+0x130>
          break;
 800253e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2bff      	cmp	r3, #255	@ 0xff
 8002544:	d801      	bhi.n	800254a <HAL_GPIO_Init+0x13a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	e001      	b.n	800254e <HAL_GPIO_Init+0x13e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3304      	adds	r3, #4
 800254e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2bff      	cmp	r3, #255	@ 0xff
 8002554:	d802      	bhi.n	800255c <HAL_GPIO_Init+0x14c>
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	e002      	b.n	8002562 <HAL_GPIO_Init+0x152>
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	3b08      	subs	r3, #8
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	210f      	movs	r1, #15
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	401a      	ands	r2, r3
 8002574:	6a39      	ldr	r1, [r7, #32]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	431a      	orrs	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 80b1 	beq.w	80026f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002590:	4b4d      	ldr	r3, [pc, #308]	@ (80026c8 <HAL_GPIO_Init+0x2b8>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	4a4c      	ldr	r2, [pc, #304]	@ (80026c8 <HAL_GPIO_Init+0x2b8>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6193      	str	r3, [r2, #24]
 800259c:	4b4a      	ldr	r3, [pc, #296]	@ (80026c8 <HAL_GPIO_Init+0x2b8>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025a8:	4a48      	ldr	r2, [pc, #288]	@ (80026cc <HAL_GPIO_Init+0x2bc>)
 80025aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	3302      	adds	r3, #2
 80025b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	220f      	movs	r2, #15
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4013      	ands	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a40      	ldr	r2, [pc, #256]	@ (80026d0 <HAL_GPIO_Init+0x2c0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d013      	beq.n	80025fc <HAL_GPIO_Init+0x1ec>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3f      	ldr	r2, [pc, #252]	@ (80026d4 <HAL_GPIO_Init+0x2c4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00d      	beq.n	80025f8 <HAL_GPIO_Init+0x1e8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a3e      	ldr	r2, [pc, #248]	@ (80026d8 <HAL_GPIO_Init+0x2c8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d007      	beq.n	80025f4 <HAL_GPIO_Init+0x1e4>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a3d      	ldr	r2, [pc, #244]	@ (80026dc <HAL_GPIO_Init+0x2cc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_GPIO_Init+0x1e0>
 80025ec:	2303      	movs	r3, #3
 80025ee:	e006      	b.n	80025fe <HAL_GPIO_Init+0x1ee>
 80025f0:	2304      	movs	r3, #4
 80025f2:	e004      	b.n	80025fe <HAL_GPIO_Init+0x1ee>
 80025f4:	2302      	movs	r3, #2
 80025f6:	e002      	b.n	80025fe <HAL_GPIO_Init+0x1ee>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <HAL_GPIO_Init+0x1ee>
 80025fc:	2300      	movs	r3, #0
 80025fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002600:	f002 0203 	and.w	r2, r2, #3
 8002604:	0092      	lsls	r2, r2, #2
 8002606:	4093      	lsls	r3, r2
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800260e:	492f      	ldr	r1, [pc, #188]	@ (80026cc <HAL_GPIO_Init+0x2bc>)
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	089b      	lsrs	r3, r3, #2
 8002614:	3302      	adds	r3, #2
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d006      	beq.n	8002636 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002628:	4b2d      	ldr	r3, [pc, #180]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	492c      	ldr	r1, [pc, #176]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]
 8002634:	e006      	b.n	8002644 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002636:	4b2a      	ldr	r3, [pc, #168]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	43db      	mvns	r3, r3
 800263e:	4928      	ldr	r1, [pc, #160]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002640:	4013      	ands	r3, r2
 8002642:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d006      	beq.n	800265e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002650:	4b23      	ldr	r3, [pc, #140]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	4922      	ldr	r1, [pc, #136]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	60cb      	str	r3, [r1, #12]
 800265c:	e006      	b.n	800266c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800265e:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	43db      	mvns	r3, r3
 8002666:	491e      	ldr	r1, [pc, #120]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002668:	4013      	ands	r3, r2
 800266a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002678:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	4918      	ldr	r1, [pc, #96]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	604b      	str	r3, [r1, #4]
 8002684:	e006      	b.n	8002694 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002686:	4b16      	ldr	r3, [pc, #88]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	43db      	mvns	r3, r3
 800268e:	4914      	ldr	r1, [pc, #80]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 8002690:	4013      	ands	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d021      	beq.n	80026e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026a0:	4b0f      	ldr	r3, [pc, #60]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	490e      	ldr	r1, [pc, #56]	@ (80026e0 <HAL_GPIO_Init+0x2d0>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
 80026ac:	e021      	b.n	80026f2 <HAL_GPIO_Init+0x2e2>
 80026ae:	bf00      	nop
 80026b0:	10320000 	.word	0x10320000
 80026b4:	10310000 	.word	0x10310000
 80026b8:	10220000 	.word	0x10220000
 80026bc:	10210000 	.word	0x10210000
 80026c0:	10120000 	.word	0x10120000
 80026c4:	10110000 	.word	0x10110000
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40010000 	.word	0x40010000
 80026d0:	40010800 	.word	0x40010800
 80026d4:	40010c00 	.word	0x40010c00
 80026d8:	40011000 	.word	0x40011000
 80026dc:	40011400 	.word	0x40011400
 80026e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002714 <HAL_GPIO_Init+0x304>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	4909      	ldr	r1, [pc, #36]	@ (8002714 <HAL_GPIO_Init+0x304>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	3301      	adds	r3, #1
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	f47f ae8e 	bne.w	8002424 <HAL_GPIO_Init+0x14>
  }
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	372c      	adds	r7, #44	@ 0x2c
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	40010400 	.word	0x40010400

08002718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
 8002724:	4613      	mov	r3, r2
 8002726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002728:	787b      	ldrb	r3, [r7, #1]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002734:	e003      	b.n	800273e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002736:	887b      	ldrh	r3, [r7, #2]
 8002738:	041a      	lsls	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	611a      	str	r2, [r3, #16]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e12b      	b.n	80029b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe fab2 	bl	8000cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2224      	movs	r2, #36	@ 0x24
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800279a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027ac:	f001 fbfc 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 80027b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4a81      	ldr	r2, [pc, #516]	@ (80029bc <HAL_I2C_Init+0x274>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d807      	bhi.n	80027cc <HAL_I2C_Init+0x84>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a80      	ldr	r2, [pc, #512]	@ (80029c0 <HAL_I2C_Init+0x278>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	bf94      	ite	ls
 80027c4:	2301      	movls	r3, #1
 80027c6:	2300      	movhi	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e006      	b.n	80027da <HAL_I2C_Init+0x92>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a7d      	ldr	r2, [pc, #500]	@ (80029c4 <HAL_I2C_Init+0x27c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	bf94      	ite	ls
 80027d4:	2301      	movls	r3, #1
 80027d6:	2300      	movhi	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e0e7      	b.n	80029b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4a78      	ldr	r2, [pc, #480]	@ (80029c8 <HAL_I2C_Init+0x280>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0c9b      	lsrs	r3, r3, #18
 80027ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4a6a      	ldr	r2, [pc, #424]	@ (80029bc <HAL_I2C_Init+0x274>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d802      	bhi.n	800281c <HAL_I2C_Init+0xd4>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	3301      	adds	r3, #1
 800281a:	e009      	b.n	8002830 <HAL_I2C_Init+0xe8>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	4a69      	ldr	r2, [pc, #420]	@ (80029cc <HAL_I2C_Init+0x284>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	099b      	lsrs	r3, r3, #6
 800282e:	3301      	adds	r3, #1
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	430b      	orrs	r3, r1
 8002836:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002842:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	495c      	ldr	r1, [pc, #368]	@ (80029bc <HAL_I2C_Init+0x274>)
 800284c:	428b      	cmp	r3, r1
 800284e:	d819      	bhi.n	8002884 <HAL_I2C_Init+0x13c>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1e59      	subs	r1, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fbb1 f3f3 	udiv	r3, r1, r3
 800285e:	1c59      	adds	r1, r3, #1
 8002860:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002864:	400b      	ands	r3, r1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_I2C_Init+0x138>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1e59      	subs	r1, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fbb1 f3f3 	udiv	r3, r1, r3
 8002878:	3301      	adds	r3, #1
 800287a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287e:	e051      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 8002880:	2304      	movs	r3, #4
 8002882:	e04f      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d111      	bne.n	80028b0 <HAL_I2C_Init+0x168>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1e58      	subs	r0, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	440b      	add	r3, r1
 800289a:	fbb0 f3f3 	udiv	r3, r0, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	e012      	b.n	80028d6 <HAL_I2C_Init+0x18e>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1e58      	subs	r0, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	0099      	lsls	r1, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Init+0x196>
 80028da:	2301      	movs	r3, #1
 80028dc:	e022      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10e      	bne.n	8002904 <HAL_I2C_Init+0x1bc>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1e58      	subs	r0, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6859      	ldr	r1, [r3, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	440b      	add	r3, r1
 80028f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002902:	e00f      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1e58      	subs	r0, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	0099      	lsls	r1, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	fbb0 f3f3 	udiv	r3, r0, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002920:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	6809      	ldr	r1, [r1, #0]
 8002928:	4313      	orrs	r3, r2
 800292a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002952:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6911      	ldr	r1, [r2, #16]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68d2      	ldr	r2, [r2, #12]
 800295e:	4311      	orrs	r1, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	430b      	orrs	r3, r1
 8002966:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	000186a0 	.word	0x000186a0
 80029c0:	001e847f 	.word	0x001e847f
 80029c4:	003d08ff 	.word	0x003d08ff
 80029c8:	431bde83 	.word	0x431bde83
 80029cc:	10624dd3 	.word	0x10624dd3

080029d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	4608      	mov	r0, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	461a      	mov	r2, r3
 80029de:	4603      	mov	r3, r0
 80029e0:	817b      	strh	r3, [r7, #10]
 80029e2:	460b      	mov	r3, r1
 80029e4:	813b      	strh	r3, [r7, #8]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ea:	f7ff fbf9 	bl	80021e0 <HAL_GetTick>
 80029ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	f040 80d9 	bne.w	8002bb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2319      	movs	r3, #25
 8002a04:	2201      	movs	r2, #1
 8002a06:	496d      	ldr	r1, [pc, #436]	@ (8002bbc <HAL_I2C_Mem_Write+0x1ec>)
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 fccd 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a14:	2302      	movs	r3, #2
 8002a16:	e0cc      	b.n	8002bb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_I2C_Mem_Write+0x56>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e0c5      	b.n	8002bb2 <HAL_I2C_Mem_Write+0x1e2>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d007      	beq.n	8002a4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2221      	movs	r2, #33	@ 0x21
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2240      	movs	r2, #64	@ 0x40
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a3a      	ldr	r2, [r7, #32]
 8002a76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a4d      	ldr	r2, [pc, #308]	@ (8002bc0 <HAL_I2C_Mem_Write+0x1f0>)
 8002a8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a8e:	88f8      	ldrh	r0, [r7, #6]
 8002a90:	893a      	ldrh	r2, [r7, #8]
 8002a92:	8979      	ldrh	r1, [r7, #10]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fb04 	bl	80030ac <I2C_RequestMemoryWrite>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d052      	beq.n	8002b50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e081      	b.n	8002bb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fd92 	bl	80035dc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d107      	bne.n	8002ad6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e06b      	b.n	8002bb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d11b      	bne.n	8002b50 <HAL_I2C_Mem_Write+0x180>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d017      	beq.n	8002b50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1aa      	bne.n	8002aae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fd85 	bl	800366c <I2C_WaitOnBTFFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00d      	beq.n	8002b84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d107      	bne.n	8002b80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e016      	b.n	8002bb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	00100002 	.word	0x00100002
 8002bc0:	ffff0000 	.word	0xffff0000

08002bc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08c      	sub	sp, #48	@ 0x30
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	4608      	mov	r0, r1
 8002bce:	4611      	mov	r1, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	817b      	strh	r3, [r7, #10]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	813b      	strh	r3, [r7, #8]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002be2:	f7ff fafd 	bl	80021e0 <HAL_GetTick>
 8002be6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	f040 8250 	bne.w	8003096 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2319      	movs	r3, #25
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4982      	ldr	r1, [pc, #520]	@ (8002e08 <HAL_I2C_Mem_Read+0x244>)
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fbd1 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e243      	b.n	8003098 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_I2C_Mem_Read+0x5a>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e23c      	b.n	8003098 <HAL_I2C_Mem_Read+0x4d4>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d007      	beq.n	8002c44 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2222      	movs	r2, #34	@ 0x22
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2240      	movs	r2, #64	@ 0x40
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a62      	ldr	r2, [pc, #392]	@ (8002e0c <HAL_I2C_Mem_Read+0x248>)
 8002c84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c86:	88f8      	ldrh	r0, [r7, #6]
 8002c88:	893a      	ldrh	r2, [r7, #8]
 8002c8a:	8979      	ldrh	r1, [r7, #10]
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	4603      	mov	r3, r0
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fa9e 	bl	80031d8 <I2C_RequestMemoryRead>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1f8      	b.n	8003098 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d113      	bne.n	8002cd6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e1cc      	b.n	8003070 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d11e      	bne.n	8002d1c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cee:	b672      	cpsid	i
}
 8002cf0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d18:	b662      	cpsie	i
}
 8002d1a:	e035      	b.n	8002d88 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d11e      	bne.n	8002d62 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d34:	b672      	cpsid	i
}
 8002d36:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d5e:	b662      	cpsie	i
}
 8002d60:	e012      	b.n	8002d88 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d70:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002d88:	e172      	b.n	8003070 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	f200 811f 	bhi.w	8002fd2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d123      	bne.n	8002de4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fcab 	bl	80036fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e173      	b.n	8003098 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002de2:	e145      	b.n	8003070 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d152      	bne.n	8002e92 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df2:	2200      	movs	r2, #0
 8002df4:	4906      	ldr	r1, [pc, #24]	@ (8002e10 <HAL_I2C_Mem_Read+0x24c>)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fad6 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e148      	b.n	8003098 <HAL_I2C_Mem_Read+0x4d4>
 8002e06:	bf00      	nop
 8002e08:	00100002 	.word	0x00100002
 8002e0c:	ffff0000 	.word	0xffff0000
 8002e10:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002e14:	b672      	cpsid	i
}
 8002e16:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e5a:	b662      	cpsie	i
}
 8002e5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e90:	e0ee      	b.n	8003070 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4981      	ldr	r1, [pc, #516]	@ (80030a0 <HAL_I2C_Mem_Read+0x4dc>)
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fa83 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0f5      	b.n	8003098 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ebc:	b672      	cpsid	i
}
 8002ebe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ef2:	4b6c      	ldr	r3, [pc, #432]	@ (80030a4 <HAL_I2C_Mem_Read+0x4e0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	08db      	lsrs	r3, r3, #3
 8002ef8:	4a6b      	ldr	r2, [pc, #428]	@ (80030a8 <HAL_I2C_Mem_Read+0x4e4>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	0a1a      	lsrs	r2, r3, #8
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	00da      	lsls	r2, r3, #3
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d118      	bne.n	8002f4a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002f3a:	b662      	cpsie	i
}
 8002f3c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0a6      	b.n	8003098 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d1d9      	bne.n	8002f0c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f9a:	b662      	cpsie	i
}
 8002f9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fd0:	e04e      	b.n	8003070 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fb90 	bl	80036fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e058      	b.n	8003098 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	1c5a      	adds	r2, r3, #1
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b04      	cmp	r3, #4
 8003024:	d124      	bne.n	8003070 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	2b03      	cmp	r3, #3
 800302c:	d107      	bne.n	800303e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800303c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	b2d2      	uxtb	r2, r2
 800304a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003074:	2b00      	cmp	r3, #0
 8003076:	f47f ae88 	bne.w	8002d8a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	3728      	adds	r7, #40	@ 0x28
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	00010004 	.word	0x00010004
 80030a4:	20000000 	.word	0x20000000
 80030a8:	14f8b589 	.word	0x14f8b589

080030ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	4608      	mov	r0, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	461a      	mov	r2, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	817b      	strh	r3, [r7, #10]
 80030be:	460b      	mov	r3, r1
 80030c0:	813b      	strh	r3, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	2200      	movs	r2, #0
 80030de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f960 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00d      	beq.n	800310a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030fc:	d103      	bne.n	8003106 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003104:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e05f      	b.n	80031ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800310a:	897b      	ldrh	r3, [r7, #10]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003118:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311c:	6a3a      	ldr	r2, [r7, #32]
 800311e:	492d      	ldr	r1, [pc, #180]	@ (80031d4 <I2C_RequestMemoryWrite+0x128>)
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f9bb 	bl	800349c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e04c      	b.n	80031ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003148:	6a39      	ldr	r1, [r7, #32]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fa46 	bl	80035dc <I2C_WaitOnTXEFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	2b04      	cmp	r3, #4
 800315c:	d107      	bne.n	800316e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800316c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e02b      	b.n	80031ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d105      	bne.n	8003184 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003178:	893b      	ldrh	r3, [r7, #8]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	611a      	str	r2, [r3, #16]
 8003182:	e021      	b.n	80031c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003184:	893b      	ldrh	r3, [r7, #8]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	b29b      	uxth	r3, r3
 800318a:	b2da      	uxtb	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003194:	6a39      	ldr	r1, [r7, #32]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fa20 	bl	80035dc <I2C_WaitOnTXEFlagUntilTimeout>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00d      	beq.n	80031be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d107      	bne.n	80031ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e005      	b.n	80031ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031be:	893b      	ldrh	r3, [r7, #8]
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	00010002 	.word	0x00010002

080031d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	4608      	mov	r0, r1
 80031e2:	4611      	mov	r1, r2
 80031e4:	461a      	mov	r2, r3
 80031e6:	4603      	mov	r3, r0
 80031e8:	817b      	strh	r3, [r7, #10]
 80031ea:	460b      	mov	r3, r1
 80031ec:	813b      	strh	r3, [r7, #8]
 80031ee:	4613      	mov	r3, r2
 80031f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003200:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003210:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	2200      	movs	r2, #0
 800321a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f8c2 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00d      	beq.n	8003246 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003234:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003238:	d103      	bne.n	8003242 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003240:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e0aa      	b.n	800339c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003246:	897b      	ldrh	r3, [r7, #10]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003254:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	6a3a      	ldr	r2, [r7, #32]
 800325a:	4952      	ldr	r1, [pc, #328]	@ (80033a4 <I2C_RequestMemoryRead+0x1cc>)
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f91d 	bl	800349c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e097      	b.n	800339c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003284:	6a39      	ldr	r1, [r7, #32]
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f9a8 	bl	80035dc <I2C_WaitOnTXEFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	2b04      	cmp	r3, #4
 8003298:	d107      	bne.n	80032aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e076      	b.n	800339c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d105      	bne.n	80032c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032b4:	893b      	ldrh	r3, [r7, #8]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	611a      	str	r2, [r3, #16]
 80032be:	e021      	b.n	8003304 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032c0:	893b      	ldrh	r3, [r7, #8]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d0:	6a39      	ldr	r1, [r7, #32]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f982 	bl	80035dc <I2C_WaitOnTXEFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00d      	beq.n	80032fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d107      	bne.n	80032f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e050      	b.n	800339c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032fa:	893b      	ldrh	r3, [r7, #8]
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003306:	6a39      	ldr	r1, [r7, #32]
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f967 	bl	80035dc <I2C_WaitOnTXEFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00d      	beq.n	8003330 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	2b04      	cmp	r3, #4
 800331a:	d107      	bne.n	800332c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800332a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e035      	b.n	800339c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800333e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	2200      	movs	r2, #0
 8003348:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f82b 	bl	80033a8 <I2C_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00d      	beq.n	8003374 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003366:	d103      	bne.n	8003370 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800336e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e013      	b.n	800339c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003374:	897b      	ldrh	r3, [r7, #10]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	b2da      	uxtb	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	6a3a      	ldr	r2, [r7, #32]
 8003388:	4906      	ldr	r1, [pc, #24]	@ (80033a4 <I2C_RequestMemoryRead+0x1cc>)
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f886 	bl	800349c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	00010002 	.word	0x00010002

080033a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	4613      	mov	r3, r2
 80033b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b8:	e048      	b.n	800344c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033c0:	d044      	beq.n	800344c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c2:	f7fe ff0d 	bl	80021e0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d302      	bcc.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d139      	bne.n	800344c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	0c1b      	lsrs	r3, r3, #16
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d10d      	bne.n	80033fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	43da      	mvns	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4013      	ands	r3, r2
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	e00c      	b.n	8003418 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	43da      	mvns	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4013      	ands	r3, r2
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	429a      	cmp	r2, r3
 800341c:	d116      	bne.n	800344c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	f043 0220 	orr.w	r2, r3, #32
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e023      	b.n	8003494 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	0c1b      	lsrs	r3, r3, #16
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d10d      	bne.n	8003472 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	43da      	mvns	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	4013      	ands	r3, r2
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	e00c      	b.n	800348c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	43da      	mvns	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4013      	ands	r3, r2
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	79fb      	ldrb	r3, [r7, #7]
 800348e:	429a      	cmp	r2, r3
 8003490:	d093      	beq.n	80033ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034aa:	e071      	b.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ba:	d123      	bne.n	8003504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	f043 0204 	orr.w	r2, r3, #4
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e067      	b.n	80035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800350a:	d041      	beq.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350c:	f7fe fe68 	bl	80021e0 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	429a      	cmp	r2, r3
 800351a:	d302      	bcc.n	8003522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d136      	bne.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	0c1b      	lsrs	r3, r3, #16
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d10c      	bne.n	8003546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	43da      	mvns	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4013      	ands	r3, r2
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf14      	ite	ne
 800353e:	2301      	movne	r3, #1
 8003540:	2300      	moveq	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	e00b      	b.n	800355e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	43da      	mvns	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	4013      	ands	r3, r2
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	bf14      	ite	ne
 8003558:	2301      	movne	r3, #1
 800355a:	2300      	moveq	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e021      	b.n	80035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	0c1b      	lsrs	r3, r3, #16
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b01      	cmp	r3, #1
 8003598:	d10c      	bne.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	43da      	mvns	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4013      	ands	r3, r2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	e00b      	b.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	43da      	mvns	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bf14      	ite	ne
 80035c6:	2301      	movne	r3, #1
 80035c8:	2300      	moveq	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f47f af6d 	bne.w	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e8:	e034      	b.n	8003654 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f8e3 	bl	80037b6 <I2C_IsAcknowledgeFailed>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e034      	b.n	8003664 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003600:	d028      	beq.n	8003654 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003602:	f7fe fded 	bl	80021e0 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	d302      	bcc.n	8003618 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d11d      	bne.n	8003654 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003622:	2b80      	cmp	r3, #128	@ 0x80
 8003624:	d016      	beq.n	8003654 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e007      	b.n	8003664 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365e:	2b80      	cmp	r3, #128	@ 0x80
 8003660:	d1c3      	bne.n	80035ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003678:	e034      	b.n	80036e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f89b 	bl	80037b6 <I2C_IsAcknowledgeFailed>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e034      	b.n	80036f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003690:	d028      	beq.n	80036e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003692:	f7fe fda5 	bl	80021e0 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d302      	bcc.n	80036a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d11d      	bne.n	80036e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d016      	beq.n	80036e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	f043 0220 	orr.w	r2, r3, #32
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e007      	b.n	80036f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d1c3      	bne.n	800367a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003708:	e049      	b.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b10      	cmp	r3, #16
 8003716:	d119      	bne.n	800374c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0210 	mvn.w	r2, #16
 8003720:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e030      	b.n	80037ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374c:	f7fe fd48 	bl	80021e0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	429a      	cmp	r2, r3
 800375a:	d302      	bcc.n	8003762 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d11d      	bne.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376c:	2b40      	cmp	r3, #64	@ 0x40
 800376e:	d016      	beq.n	800379e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	f043 0220 	orr.w	r2, r3, #32
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e007      	b.n	80037ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a8:	2b40      	cmp	r3, #64	@ 0x40
 80037aa:	d1ae      	bne.n	800370a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037cc:	d11b      	bne.n	8003806 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f2:	f043 0204 	orr.w	r2, r3, #4
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr
	...

08003814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e272      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8087 	beq.w	8003942 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003834:	4b92      	ldr	r3, [pc, #584]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b04      	cmp	r3, #4
 800383e:	d00c      	beq.n	800385a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003840:	4b8f      	ldr	r3, [pc, #572]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b08      	cmp	r3, #8
 800384a:	d112      	bne.n	8003872 <HAL_RCC_OscConfig+0x5e>
 800384c:	4b8c      	ldr	r3, [pc, #560]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003858:	d10b      	bne.n	8003872 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385a:	4b89      	ldr	r3, [pc, #548]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d06c      	beq.n	8003940 <HAL_RCC_OscConfig+0x12c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d168      	bne.n	8003940 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e24c      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x76>
 800387c:	4b80      	ldr	r3, [pc, #512]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a7f      	ldr	r2, [pc, #508]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	e02e      	b.n	80038e8 <HAL_RCC_OscConfig+0xd4>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x98>
 8003892:	4b7b      	ldr	r3, [pc, #492]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7a      	ldr	r2, [pc, #488]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4b78      	ldr	r3, [pc, #480]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a77      	ldr	r2, [pc, #476]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e01d      	b.n	80038e8 <HAL_RCC_OscConfig+0xd4>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0xbc>
 80038b6:	4b72      	ldr	r3, [pc, #456]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a71      	ldr	r2, [pc, #452]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0xd4>
 80038d0:	4b6b      	ldr	r3, [pc, #428]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b68      	ldr	r3, [pc, #416]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a67      	ldr	r2, [pc, #412]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80038e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe fc76 	bl	80021e0 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe fc72 	bl	80021e0 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	@ 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e200      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	4b5d      	ldr	r3, [pc, #372]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0xe4>
 8003916:	e014      	b.n	8003942 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fe fc62 	bl	80021e0 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003920:	f7fe fc5e 	bl	80021e0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	@ 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e1ec      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003932:	4b53      	ldr	r3, [pc, #332]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x10c>
 800393e:	e000      	b.n	8003942 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d063      	beq.n	8003a16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800394e:	4b4c      	ldr	r3, [pc, #304]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800395a:	4b49      	ldr	r3, [pc, #292]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b08      	cmp	r3, #8
 8003964:	d11c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x18c>
 8003966:	4b46      	ldr	r3, [pc, #280]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d116      	bne.n	80039a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	4b43      	ldr	r3, [pc, #268]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_RCC_OscConfig+0x176>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e1c0      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4939      	ldr	r1, [pc, #228]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399e:	e03a      	b.n	8003a16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d020      	beq.n	80039ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a8:	4b36      	ldr	r3, [pc, #216]	@ (8003a84 <HAL_RCC_OscConfig+0x270>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ae:	f7fe fc17 	bl	80021e0 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b6:	f7fe fc13 	bl	80021e0 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e1a1      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4927      	ldr	r1, [pc, #156]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]
 80039e8:	e015      	b.n	8003a16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ea:	4b26      	ldr	r3, [pc, #152]	@ (8003a84 <HAL_RCC_OscConfig+0x270>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fe fbf6 	bl	80021e0 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f8:	f7fe fbf2 	bl	80021e0 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e180      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d03a      	beq.n	8003a98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d019      	beq.n	8003a5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a2a:	4b17      	ldr	r3, [pc, #92]	@ (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a30:	f7fe fbd6 	bl	80021e0 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a38:	f7fe fbd2 	bl	80021e0 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e160      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a80 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a56:	2001      	movs	r0, #1
 8003a58:	f000 face 	bl	8003ff8 <RCC_Delay>
 8003a5c:	e01c      	b.n	8003a98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a88 <HAL_RCC_OscConfig+0x274>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a64:	f7fe fbbc 	bl	80021e0 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6a:	e00f      	b.n	8003a8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6c:	f7fe fbb8 	bl	80021e0 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d908      	bls.n	8003a8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e146      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
 8003a84:	42420000 	.word	0x42420000
 8003a88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8c:	4b92      	ldr	r3, [pc, #584]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e9      	bne.n	8003a6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80a6 	beq.w	8003bf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aaa:	4b8b      	ldr	r3, [pc, #556]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10d      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	4b88      	ldr	r3, [pc, #544]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	4a87      	ldr	r2, [pc, #540]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac0:	61d3      	str	r3, [r2, #28]
 8003ac2:	4b85      	ldr	r3, [pc, #532]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad2:	4b82      	ldr	r3, [pc, #520]	@ (8003cdc <HAL_RCC_OscConfig+0x4c8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d118      	bne.n	8003b10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ade:	4b7f      	ldr	r3, [pc, #508]	@ (8003cdc <HAL_RCC_OscConfig+0x4c8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8003cdc <HAL_RCC_OscConfig+0x4c8>)
 8003ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aea:	f7fe fb79 	bl	80021e0 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af2:	f7fe fb75 	bl	80021e0 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b64      	cmp	r3, #100	@ 0x64
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e103      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b04:	4b75      	ldr	r3, [pc, #468]	@ (8003cdc <HAL_RCC_OscConfig+0x4c8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d106      	bne.n	8003b26 <HAL_RCC_OscConfig+0x312>
 8003b18:	4b6f      	ldr	r3, [pc, #444]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6213      	str	r3, [r2, #32]
 8003b24:	e02d      	b.n	8003b82 <HAL_RCC_OscConfig+0x36e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x334>
 8003b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	4a69      	ldr	r2, [pc, #420]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	6213      	str	r3, [r2, #32]
 8003b3a:	4b67      	ldr	r3, [pc, #412]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4a66      	ldr	r2, [pc, #408]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	f023 0304 	bic.w	r3, r3, #4
 8003b44:	6213      	str	r3, [r2, #32]
 8003b46:	e01c      	b.n	8003b82 <HAL_RCC_OscConfig+0x36e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d10c      	bne.n	8003b6a <HAL_RCC_OscConfig+0x356>
 8003b50:	4b61      	ldr	r3, [pc, #388]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4a60      	ldr	r2, [pc, #384]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b56:	f043 0304 	orr.w	r3, r3, #4
 8003b5a:	6213      	str	r3, [r2, #32]
 8003b5c:	4b5e      	ldr	r3, [pc, #376]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	4a5d      	ldr	r2, [pc, #372]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	6213      	str	r3, [r2, #32]
 8003b68:	e00b      	b.n	8003b82 <HAL_RCC_OscConfig+0x36e>
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	4a5a      	ldr	r2, [pc, #360]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	6213      	str	r3, [r2, #32]
 8003b76:	4b58      	ldr	r3, [pc, #352]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	4a57      	ldr	r2, [pc, #348]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	f023 0304 	bic.w	r3, r3, #4
 8003b80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d015      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8a:	f7fe fb29 	bl	80021e0 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b90:	e00a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b92:	f7fe fb25 	bl	80021e0 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e0b1      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ee      	beq.n	8003b92 <HAL_RCC_OscConfig+0x37e>
 8003bb4:	e014      	b.n	8003be0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb6:	f7fe fb13 	bl	80021e0 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fe fb0f 	bl	80021e0 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e09b      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd4:	4b40      	ldr	r3, [pc, #256]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1ee      	bne.n	8003bbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d105      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be6:	4b3c      	ldr	r3, [pc, #240]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	4a3b      	ldr	r2, [pc, #236]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8087 	beq.w	8003d0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bfc:	4b36      	ldr	r3, [pc, #216]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 030c 	and.w	r3, r3, #12
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d061      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d146      	bne.n	8003c9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c10:	4b33      	ldr	r3, [pc, #204]	@ (8003ce0 <HAL_RCC_OscConfig+0x4cc>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c16:	f7fe fae3 	bl	80021e0 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7fe fadf 	bl	80021e0 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e06d      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c30:	4b29      	ldr	r3, [pc, #164]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c44:	d108      	bne.n	8003c58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c46:	4b24      	ldr	r3, [pc, #144]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	4921      	ldr	r1, [pc, #132]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c58:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a19      	ldr	r1, [r3, #32]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	491b      	ldr	r1, [pc, #108]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce0 <HAL_RCC_OscConfig+0x4cc>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c76:	f7fe fab3 	bl	80021e0 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7e:	f7fe faaf 	bl	80021e0 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e03d      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c90:	4b11      	ldr	r3, [pc, #68]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x46a>
 8003c9c:	e035      	b.n	8003d0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ce0 <HAL_RCC_OscConfig+0x4cc>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fa9c 	bl	80021e0 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe fa98 	bl	80021e0 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e026      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cbe:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x498>
 8003cca:	e01e      	b.n	8003d0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e019      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <HAL_RCC_OscConfig+0x500>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d001      	beq.n	8003d0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000

08003d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0d0      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d910      	bls.n	8003d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b67      	ldr	r3, [pc, #412]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 0207 	bic.w	r2, r3, #7
 8003d42:	4965      	ldr	r1, [pc, #404]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b63      	ldr	r3, [pc, #396]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0b8      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d74:	4b59      	ldr	r3, [pc, #356]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4a58      	ldr	r2, [pc, #352]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d8c:	4b53      	ldr	r3, [pc, #332]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	4a52      	ldr	r2, [pc, #328]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d92:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	4b50      	ldr	r3, [pc, #320]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	494d      	ldr	r1, [pc, #308]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d040      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b47      	ldr	r3, [pc, #284]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d115      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e07f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d107      	bne.n	8003de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd6:	4b41      	ldr	r3, [pc, #260]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e073      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de6:	4b3d      	ldr	r3, [pc, #244]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e06b      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df6:	4b39      	ldr	r3, [pc, #228]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f023 0203 	bic.w	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4936      	ldr	r1, [pc, #216]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e08:	f7fe f9ea 	bl	80021e0 <HAL_GetTick>
 8003e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e10:	f7fe f9e6 	bl	80021e0 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e053      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e26:	4b2d      	ldr	r3, [pc, #180]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 020c 	and.w	r2, r3, #12
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d1eb      	bne.n	8003e10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e38:	4b27      	ldr	r3, [pc, #156]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d210      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e46:	4b24      	ldr	r3, [pc, #144]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 0207 	bic.w	r2, r3, #7
 8003e4e:	4922      	ldr	r1, [pc, #136]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b20      	ldr	r3, [pc, #128]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e032      	b.n	8003ece <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e74:	4b19      	ldr	r3, [pc, #100]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4916      	ldr	r1, [pc, #88]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e92:	4b12      	ldr	r3, [pc, #72]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	490e      	ldr	r1, [pc, #56]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ea6:	f000 f821 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	4b0b      	ldr	r3, [pc, #44]	@ (8003edc <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	490a      	ldr	r1, [pc, #40]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb8:	5ccb      	ldrb	r3, [r1, r3]
 8003eba:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebe:	4a09      	ldr	r2, [pc, #36]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ec2:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe f948 	bl	800215c <HAL_InitTick>

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40022000 	.word	0x40022000
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	08009610 	.word	0x08009610
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	20000004 	.word	0x20000004

08003eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f06:	4b1e      	ldr	r3, [pc, #120]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d002      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0x30>
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d003      	beq.n	8003f22 <HAL_RCC_GetSysClockFreq+0x36>
 8003f1a:	e027      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f1c:	4b19      	ldr	r3, [pc, #100]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f1e:	613b      	str	r3, [r7, #16]
      break;
 8003f20:	e027      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	0c9b      	lsrs	r3, r3, #18
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	4a17      	ldr	r2, [pc, #92]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f2c:	5cd3      	ldrb	r3, [r2, r3]
 8003f2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d010      	beq.n	8003f5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f3a:	4b11      	ldr	r3, [pc, #68]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	0c5b      	lsrs	r3, r3, #17
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	4a11      	ldr	r2, [pc, #68]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f46:	5cd3      	ldrb	r3, [r2, r3]
 8003f48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f4e:	fb03 f202 	mul.w	r2, r3, r2
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e004      	b.n	8003f66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f60:	fb02 f303 	mul.w	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	613b      	str	r3, [r7, #16]
      break;
 8003f6a:	e002      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f6e:	613b      	str	r3, [r7, #16]
      break;
 8003f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f72:	693b      	ldr	r3, [r7, #16]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000
 8003f84:	007a1200 	.word	0x007a1200
 8003f88:	08009628 	.word	0x08009628
 8003f8c:	08009638 	.word	0x08009638
 8003f90:	003d0900 	.word	0x003d0900

08003f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f98:	4b02      	ldr	r3, [pc, #8]	@ (8003fa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	20000000 	.word	0x20000000

08003fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fac:	f7ff fff2 	bl	8003f94 <HAL_RCC_GetHCLKFreq>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	0a1b      	lsrs	r3, r3, #8
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	4903      	ldr	r1, [pc, #12]	@ (8003fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fbe:	5ccb      	ldrb	r3, [r1, r3]
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	08009620 	.word	0x08009620

08003fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fd4:	f7ff ffde 	bl	8003f94 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b05      	ldr	r3, [pc, #20]	@ (8003ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	0adb      	lsrs	r3, r3, #11
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4903      	ldr	r1, [pc, #12]	@ (8003ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	08009620 	.word	0x08009620

08003ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004000:	4b0a      	ldr	r3, [pc, #40]	@ (800402c <RCC_Delay+0x34>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a0a      	ldr	r2, [pc, #40]	@ (8004030 <RCC_Delay+0x38>)
 8004006:	fba2 2303 	umull	r2, r3, r2, r3
 800400a:	0a5b      	lsrs	r3, r3, #9
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	fb02 f303 	mul.w	r3, r2, r3
 8004012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004014:	bf00      	nop
  }
  while (Delay --);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1e5a      	subs	r2, r3, #1
 800401a:	60fa      	str	r2, [r7, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1f9      	bne.n	8004014 <RCC_Delay+0x1c>
}
 8004020:	bf00      	nop
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	20000000 	.word	0x20000000
 8004030:	10624dd3 	.word	0x10624dd3

08004034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e076      	b.n	8004134 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	2b00      	cmp	r3, #0
 800404c:	d108      	bne.n	8004060 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004056:	d009      	beq.n	800406c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	61da      	str	r2, [r3, #28]
 800405e:	e005      	b.n	800406c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd fda2 	bl	8001bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f0:	ea42 0103 	orr.w	r1, r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	0c1a      	lsrs	r2, r3, #16
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f002 0204 	and.w	r2, r2, #4
 8004112:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69da      	ldr	r2, [r3, #28]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004122:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	4613      	mov	r3, r2
 800414a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800414c:	f7fe f848 	bl	80021e0 <HAL_GetTick>
 8004150:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	d001      	beq.n	8004166 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
 8004164:	e12a      	b.n	80043bc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <HAL_SPI_Transmit+0x36>
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e122      	b.n	80043bc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_SPI_Transmit+0x48>
 8004180:	2302      	movs	r3, #2
 8004182:	e11b      	b.n	80043bc <HAL_SPI_Transmit+0x280>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2203      	movs	r2, #3
 8004190:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	88fa      	ldrh	r2, [r7, #6]
 80041a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	88fa      	ldrh	r2, [r7, #6]
 80041aa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041d2:	d10f      	bne.n	80041f4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fe:	2b40      	cmp	r3, #64	@ 0x40
 8004200:	d007      	beq.n	8004212 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004210:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800421a:	d152      	bne.n	80042c2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <HAL_SPI_Transmit+0xee>
 8004224:	8b7b      	ldrh	r3, [r7, #26]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d145      	bne.n	80042b6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423a:	1c9a      	adds	r2, r3, #2
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800424e:	e032      	b.n	80042b6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b02      	cmp	r3, #2
 800425c:	d112      	bne.n	8004284 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004262:	881a      	ldrh	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426e:	1c9a      	adds	r2, r3, #2
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004282:	e018      	b.n	80042b6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004284:	f7fd ffac 	bl	80021e0 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d803      	bhi.n	800429c <HAL_SPI_Transmit+0x160>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800429a:	d102      	bne.n	80042a2 <HAL_SPI_Transmit+0x166>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e082      	b.n	80043bc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1c7      	bne.n	8004250 <HAL_SPI_Transmit+0x114>
 80042c0:	e053      	b.n	800436a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_SPI_Transmit+0x194>
 80042ca:	8b7b      	ldrh	r3, [r7, #26]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d147      	bne.n	8004360 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	7812      	ldrb	r2, [r2, #0]
 80042dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042f6:	e033      	b.n	8004360 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b02      	cmp	r3, #2
 8004304:	d113      	bne.n	800432e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	330c      	adds	r3, #12
 8004310:	7812      	ldrb	r2, [r2, #0]
 8004312:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800432c:	e018      	b.n	8004360 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800432e:	f7fd ff57 	bl	80021e0 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d803      	bhi.n	8004346 <HAL_SPI_Transmit+0x20a>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004344:	d102      	bne.n	800434c <HAL_SPI_Transmit+0x210>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e02d      	b.n	80043bc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1c6      	bne.n	80042f8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	6839      	ldr	r1, [r7, #0]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f8b0 	bl	80044d4 <SPI_EndRxTxTransaction>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10a      	bne.n	800439e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80043ba:	2300      	movs	r3, #0
  }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043d4:	f7fd ff04 	bl	80021e0 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	4413      	add	r3, r2
 80043e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043e4:	f7fd fefc 	bl	80021e0 <HAL_GetTick>
 80043e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043ea:	4b39      	ldr	r3, [pc, #228]	@ (80044d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	015b      	lsls	r3, r3, #5
 80043f0:	0d1b      	lsrs	r3, r3, #20
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	fb02 f303 	mul.w	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043fa:	e054      	b.n	80044a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004402:	d050      	beq.n	80044a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004404:	f7fd feec 	bl	80021e0 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	429a      	cmp	r2, r3
 8004412:	d902      	bls.n	800441a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d13d      	bne.n	8004496 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004428:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004432:	d111      	bne.n	8004458 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800443c:	d004      	beq.n	8004448 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004446:	d107      	bne.n	8004458 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004456:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004460:	d10f      	bne.n	8004482 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004480:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e017      	b.n	80044c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	bf0c      	ite	eq
 80044b6:	2301      	moveq	r3, #1
 80044b8:	2300      	movne	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d19b      	bne.n	80043fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000000 	.word	0x20000000

080044d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2201      	movs	r2, #1
 80044e8:	2102      	movs	r1, #2
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f7ff ff6a 	bl	80043c4 <SPI_WaitFlagStateUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fa:	f043 0220 	orr.w	r2, r3, #32
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e013      	b.n	800452e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2200      	movs	r2, #0
 800450e:	2180      	movs	r1, #128	@ 0x80
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f7ff ff57 	bl	80043c4 <SPI_WaitFlagStateUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004520:	f043 0220 	orr.w	r2, r3, #32
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e000      	b.n	800452e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e041      	b.n	80045cc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d106      	bne.n	8004562 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7fd fd25 	bl	8001fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	4619      	mov	r1, r3
 8004574:	4610      	mov	r0, r2
 8004576:	f000 fa89 	bl	8004a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d001      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e03a      	b.n	8004662 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a18      	ldr	r2, [pc, #96]	@ (800466c <HAL_TIM_Base_Start_IT+0x98>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00e      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x58>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004616:	d009      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x58>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a14      	ldr	r2, [pc, #80]	@ (8004670 <HAL_TIM_Base_Start_IT+0x9c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x58>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a13      	ldr	r2, [pc, #76]	@ (8004674 <HAL_TIM_Base_Start_IT+0xa0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d111      	bne.n	8004650 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b06      	cmp	r3, #6
 800463c:	d010      	beq.n	8004660 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464e:	e007      	b.n	8004660 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr
 800466c:	40012c00 	.word	0x40012c00
 8004670:	40000400 	.word	0x40000400
 8004674:	40000800 	.word	0x40000800

08004678 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6a1a      	ldr	r2, [r3, #32]
 8004696:	f241 1311 	movw	r3, #4369	@ 0x1111
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10f      	bne.n	80046c0 <HAL_TIM_Base_Stop_IT+0x48>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6a1a      	ldr	r2, [r3, #32]
 80046a6:	f240 4344 	movw	r3, #1092	@ 0x444
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d107      	bne.n	80046c0 <HAL_TIM_Base_Stop_IT+0x48>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0201 	bic.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d020      	beq.n	8004738 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01b      	beq.n	8004738 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0202 	mvn.w	r2, #2
 8004708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f998 	bl	8004a54 <HAL_TIM_IC_CaptureCallback>
 8004724:	e005      	b.n	8004732 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f98b 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f99a 	bl	8004a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	d020      	beq.n	8004784 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d01b      	beq.n	8004784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0204 	mvn.w	r2, #4
 8004754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2202      	movs	r2, #2
 800475a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f972 	bl	8004a54 <HAL_TIM_IC_CaptureCallback>
 8004770:	e005      	b.n	800477e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f965 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f974 	bl	8004a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d020      	beq.n	80047d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01b      	beq.n	80047d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0208 	mvn.w	r2, #8
 80047a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2204      	movs	r2, #4
 80047a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f94c 	bl	8004a54 <HAL_TIM_IC_CaptureCallback>
 80047bc:	e005      	b.n	80047ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f93f 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f94e 	bl	8004a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d020      	beq.n	800481c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f003 0310 	and.w	r3, r3, #16
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01b      	beq.n	800481c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0210 	mvn.w	r2, #16
 80047ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2208      	movs	r2, #8
 80047f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f926 	bl	8004a54 <HAL_TIM_IC_CaptureCallback>
 8004808:	e005      	b.n	8004816 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f919 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f928 	bl	8004a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00c      	beq.n	8004840 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d007      	beq.n	8004840 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0201 	mvn.w	r2, #1
 8004838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fc fd14 	bl	8001268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00c      	beq.n	8004864 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800485c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fa7f 	bl	8004d62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00c      	beq.n	8004888 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8f8 	bl	8004a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00c      	beq.n	80048ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0220 	mvn.w	r2, #32
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fa52 	bl	8004d50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_TIM_ConfigClockSource+0x1c>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e0b4      	b.n	8004a3a <HAL_TIM_ConfigClockSource+0x186>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004908:	d03e      	beq.n	8004988 <HAL_TIM_ConfigClockSource+0xd4>
 800490a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800490e:	f200 8087 	bhi.w	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004916:	f000 8086 	beq.w	8004a26 <HAL_TIM_ConfigClockSource+0x172>
 800491a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800491e:	d87f      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004920:	2b70      	cmp	r3, #112	@ 0x70
 8004922:	d01a      	beq.n	800495a <HAL_TIM_ConfigClockSource+0xa6>
 8004924:	2b70      	cmp	r3, #112	@ 0x70
 8004926:	d87b      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004928:	2b60      	cmp	r3, #96	@ 0x60
 800492a:	d050      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0x11a>
 800492c:	2b60      	cmp	r3, #96	@ 0x60
 800492e:	d877      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004930:	2b50      	cmp	r3, #80	@ 0x50
 8004932:	d03c      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0xfa>
 8004934:	2b50      	cmp	r3, #80	@ 0x50
 8004936:	d873      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004938:	2b40      	cmp	r3, #64	@ 0x40
 800493a:	d058      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0x13a>
 800493c:	2b40      	cmp	r3, #64	@ 0x40
 800493e:	d86f      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004940:	2b30      	cmp	r3, #48	@ 0x30
 8004942:	d064      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x15a>
 8004944:	2b30      	cmp	r3, #48	@ 0x30
 8004946:	d86b      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004948:	2b20      	cmp	r3, #32
 800494a:	d060      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x15a>
 800494c:	2b20      	cmp	r3, #32
 800494e:	d867      	bhi.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d05c      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x15a>
 8004954:	2b10      	cmp	r3, #16
 8004956:	d05a      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x15a>
 8004958:	e062      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800496a:	f000 f974 	bl	8004c56 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800497c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	609a      	str	r2, [r3, #8]
      break;
 8004986:	e04f      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004998:	f000 f95d 	bl	8004c56 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049aa:	609a      	str	r2, [r3, #8]
      break;
 80049ac:	e03c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ba:	461a      	mov	r2, r3
 80049bc:	f000 f8d4 	bl	8004b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2150      	movs	r1, #80	@ 0x50
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f92b 	bl	8004c22 <TIM_ITRx_SetConfig>
      break;
 80049cc:	e02c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049da:	461a      	mov	r2, r3
 80049dc:	f000 f8f2 	bl	8004bc4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2160      	movs	r1, #96	@ 0x60
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f91b 	bl	8004c22 <TIM_ITRx_SetConfig>
      break;
 80049ec:	e01c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fa:	461a      	mov	r2, r3
 80049fc:	f000 f8b4 	bl	8004b68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2140      	movs	r1, #64	@ 0x40
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f90b 	bl	8004c22 <TIM_ITRx_SetConfig>
      break;
 8004a0c:	e00c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4619      	mov	r1, r3
 8004a18:	4610      	mov	r0, r2
 8004a1a:	f000 f902 	bl	8004c22 <TIM_ITRx_SetConfig>
      break;
 8004a1e:	e003      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
      break;
 8004a24:	e000      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr

08004a66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr

08004a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr
	...

08004a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8004b5c <TIM_Base_SetConfig+0xd0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00b      	beq.n	8004abc <TIM_Base_SetConfig+0x30>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aaa:	d007      	beq.n	8004abc <TIM_Base_SetConfig+0x30>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a2c      	ldr	r2, [pc, #176]	@ (8004b60 <TIM_Base_SetConfig+0xd4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d003      	beq.n	8004abc <TIM_Base_SetConfig+0x30>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a2b      	ldr	r2, [pc, #172]	@ (8004b64 <TIM_Base_SetConfig+0xd8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d108      	bne.n	8004ace <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a22      	ldr	r2, [pc, #136]	@ (8004b5c <TIM_Base_SetConfig+0xd0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00b      	beq.n	8004aee <TIM_Base_SetConfig+0x62>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004adc:	d007      	beq.n	8004aee <TIM_Base_SetConfig+0x62>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b60 <TIM_Base_SetConfig+0xd4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d003      	beq.n	8004aee <TIM_Base_SetConfig+0x62>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b64 <TIM_Base_SetConfig+0xd8>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d108      	bne.n	8004b00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a0d      	ldr	r2, [pc, #52]	@ (8004b5c <TIM_Base_SetConfig+0xd0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d103      	bne.n	8004b34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f023 0201 	bic.w	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	611a      	str	r2, [r3, #16]
  }
}
 8004b52:	bf00      	nop
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800

08004b68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f023 0201 	bic.w	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f023 030a 	bic.w	r3, r3, #10
 8004ba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f023 0210 	bic.w	r2, r3, #16
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	031b      	lsls	r3, r3, #12
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	621a      	str	r2, [r3, #32]
}
 8004c18:	bf00      	nop
 8004c1a:	371c      	adds	r7, #28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bc80      	pop	{r7}
 8004c20:	4770      	bx	lr

08004c22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b085      	sub	sp, #20
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f043 0307 	orr.w	r3, r3, #7
 8004c44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	609a      	str	r2, [r3, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr

08004c56 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b087      	sub	sp, #28
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	607a      	str	r2, [r7, #4]
 8004c62:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c70:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	021a      	lsls	r2, r3, #8
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	609a      	str	r2, [r3, #8]
}
 8004c8a:	bf00      	nop
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr

08004c94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e046      	b.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a16      	ldr	r2, [pc, #88]	@ (8004d44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00e      	beq.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf8:	d009      	beq.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a12      	ldr	r2, [pc, #72]	@ (8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d004      	beq.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a10      	ldr	r2, [pc, #64]	@ (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d10c      	bne.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr
 8004d44:	40012c00 	.word	0x40012c00
 8004d48:	40000400 	.word	0x40000400
 8004d4c:	40000800 	.word	0x40000800

08004d50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr

08004d62 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr

08004d74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e042      	b.n	8004e0c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fd f956 	bl	800204c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2224      	movs	r2, #36	@ 0x24
 8004da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004db6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f82b 	bl	8004e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695a      	ldr	r2, [r3, #20]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ddc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004dec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004e4e:	f023 030c 	bic.w	r3, r3, #12
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2c      	ldr	r2, [pc, #176]	@ (8004f28 <UART_SetConfig+0x114>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d103      	bne.n	8004e84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e7c:	f7ff f8a8 	bl	8003fd0 <HAL_RCC_GetPCLK2Freq>
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	e002      	b.n	8004e8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7ff f890 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 8004e88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009a      	lsls	r2, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	4a22      	ldr	r2, [pc, #136]	@ (8004f2c <UART_SetConfig+0x118>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	0119      	lsls	r1, r3, #4
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009a      	lsls	r2, r3, #2
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8004f2c <UART_SetConfig+0x118>)
 8004ec2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	2064      	movs	r0, #100	@ 0x64
 8004eca:	fb00 f303 	mul.w	r3, r0, r3
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	3332      	adds	r3, #50	@ 0x32
 8004ed4:	4a15      	ldr	r2, [pc, #84]	@ (8004f2c <UART_SetConfig+0x118>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ee0:	4419      	add	r1, r3
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009a      	lsls	r2, r3, #2
 8004eec:	441a      	add	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f2c <UART_SetConfig+0x118>)
 8004efa:	fba3 0302 	umull	r0, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	2064      	movs	r0, #100	@ 0x64
 8004f02:	fb00 f303 	mul.w	r3, r0, r3
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	3332      	adds	r3, #50	@ 0x32
 8004f0c:	4a07      	ldr	r2, [pc, #28]	@ (8004f2c <UART_SetConfig+0x118>)
 8004f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	f003 020f 	and.w	r2, r3, #15
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40013800 	.word	0x40013800
 8004f2c:	51eb851f 	.word	0x51eb851f

08004f30 <__cvt>:
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f36:	461d      	mov	r5, r3
 8004f38:	bfbb      	ittet	lt
 8004f3a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004f3e:	461d      	movlt	r5, r3
 8004f40:	2300      	movge	r3, #0
 8004f42:	232d      	movlt	r3, #45	@ 0x2d
 8004f44:	b088      	sub	sp, #32
 8004f46:	4614      	mov	r4, r2
 8004f48:	bfb8      	it	lt
 8004f4a:	4614      	movlt	r4, r2
 8004f4c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004f4e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004f50:	7013      	strb	r3, [r2, #0]
 8004f52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004f54:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004f58:	f023 0820 	bic.w	r8, r3, #32
 8004f5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f60:	d005      	beq.n	8004f6e <__cvt+0x3e>
 8004f62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f66:	d100      	bne.n	8004f6a <__cvt+0x3a>
 8004f68:	3601      	adds	r6, #1
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e000      	b.n	8004f70 <__cvt+0x40>
 8004f6e:	2303      	movs	r3, #3
 8004f70:	aa07      	add	r2, sp, #28
 8004f72:	9204      	str	r2, [sp, #16]
 8004f74:	aa06      	add	r2, sp, #24
 8004f76:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004f7a:	e9cd 3600 	strd	r3, r6, [sp]
 8004f7e:	4622      	mov	r2, r4
 8004f80:	462b      	mov	r3, r5
 8004f82:	f001 f881 	bl	8006088 <_dtoa_r>
 8004f86:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f8a:	4607      	mov	r7, r0
 8004f8c:	d119      	bne.n	8004fc2 <__cvt+0x92>
 8004f8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004f90:	07db      	lsls	r3, r3, #31
 8004f92:	d50e      	bpl.n	8004fb2 <__cvt+0x82>
 8004f94:	eb00 0906 	add.w	r9, r0, r6
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	f7fb fd02 	bl	80009a8 <__aeabi_dcmpeq>
 8004fa4:	b108      	cbz	r0, 8004faa <__cvt+0x7a>
 8004fa6:	f8cd 901c 	str.w	r9, [sp, #28]
 8004faa:	2230      	movs	r2, #48	@ 0x30
 8004fac:	9b07      	ldr	r3, [sp, #28]
 8004fae:	454b      	cmp	r3, r9
 8004fb0:	d31e      	bcc.n	8004ff0 <__cvt+0xc0>
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	9b07      	ldr	r3, [sp, #28]
 8004fb6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004fb8:	1bdb      	subs	r3, r3, r7
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	b008      	add	sp, #32
 8004fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004fc6:	eb00 0906 	add.w	r9, r0, r6
 8004fca:	d1e5      	bne.n	8004f98 <__cvt+0x68>
 8004fcc:	7803      	ldrb	r3, [r0, #0]
 8004fce:	2b30      	cmp	r3, #48	@ 0x30
 8004fd0:	d10a      	bne.n	8004fe8 <__cvt+0xb8>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	4629      	mov	r1, r5
 8004fda:	f7fb fce5 	bl	80009a8 <__aeabi_dcmpeq>
 8004fde:	b918      	cbnz	r0, 8004fe8 <__cvt+0xb8>
 8004fe0:	f1c6 0601 	rsb	r6, r6, #1
 8004fe4:	f8ca 6000 	str.w	r6, [sl]
 8004fe8:	f8da 3000 	ldr.w	r3, [sl]
 8004fec:	4499      	add	r9, r3
 8004fee:	e7d3      	b.n	8004f98 <__cvt+0x68>
 8004ff0:	1c59      	adds	r1, r3, #1
 8004ff2:	9107      	str	r1, [sp, #28]
 8004ff4:	701a      	strb	r2, [r3, #0]
 8004ff6:	e7d9      	b.n	8004fac <__cvt+0x7c>

08004ff8 <__exponent>:
 8004ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ffa:	2900      	cmp	r1, #0
 8004ffc:	bfb6      	itet	lt
 8004ffe:	232d      	movlt	r3, #45	@ 0x2d
 8005000:	232b      	movge	r3, #43	@ 0x2b
 8005002:	4249      	neglt	r1, r1
 8005004:	2909      	cmp	r1, #9
 8005006:	7002      	strb	r2, [r0, #0]
 8005008:	7043      	strb	r3, [r0, #1]
 800500a:	dd29      	ble.n	8005060 <__exponent+0x68>
 800500c:	f10d 0307 	add.w	r3, sp, #7
 8005010:	461d      	mov	r5, r3
 8005012:	270a      	movs	r7, #10
 8005014:	fbb1 f6f7 	udiv	r6, r1, r7
 8005018:	461a      	mov	r2, r3
 800501a:	fb07 1416 	mls	r4, r7, r6, r1
 800501e:	3430      	adds	r4, #48	@ 0x30
 8005020:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005024:	460c      	mov	r4, r1
 8005026:	2c63      	cmp	r4, #99	@ 0x63
 8005028:	4631      	mov	r1, r6
 800502a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800502e:	dcf1      	bgt.n	8005014 <__exponent+0x1c>
 8005030:	3130      	adds	r1, #48	@ 0x30
 8005032:	1e94      	subs	r4, r2, #2
 8005034:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005038:	4623      	mov	r3, r4
 800503a:	1c41      	adds	r1, r0, #1
 800503c:	42ab      	cmp	r3, r5
 800503e:	d30a      	bcc.n	8005056 <__exponent+0x5e>
 8005040:	f10d 0309 	add.w	r3, sp, #9
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	42ac      	cmp	r4, r5
 8005048:	bf88      	it	hi
 800504a:	2300      	movhi	r3, #0
 800504c:	3302      	adds	r3, #2
 800504e:	4403      	add	r3, r0
 8005050:	1a18      	subs	r0, r3, r0
 8005052:	b003      	add	sp, #12
 8005054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005056:	f813 6b01 	ldrb.w	r6, [r3], #1
 800505a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800505e:	e7ed      	b.n	800503c <__exponent+0x44>
 8005060:	2330      	movs	r3, #48	@ 0x30
 8005062:	3130      	adds	r1, #48	@ 0x30
 8005064:	7083      	strb	r3, [r0, #2]
 8005066:	70c1      	strb	r1, [r0, #3]
 8005068:	1d03      	adds	r3, r0, #4
 800506a:	e7f1      	b.n	8005050 <__exponent+0x58>

0800506c <_printf_float>:
 800506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005070:	b091      	sub	sp, #68	@ 0x44
 8005072:	460c      	mov	r4, r1
 8005074:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005078:	4616      	mov	r6, r2
 800507a:	461f      	mov	r7, r3
 800507c:	4605      	mov	r5, r0
 800507e:	f000 fef1 	bl	8005e64 <_localeconv_r>
 8005082:	6803      	ldr	r3, [r0, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	9308      	str	r3, [sp, #32]
 8005088:	f7fb f862 	bl	8000150 <strlen>
 800508c:	2300      	movs	r3, #0
 800508e:	930e      	str	r3, [sp, #56]	@ 0x38
 8005090:	f8d8 3000 	ldr.w	r3, [r8]
 8005094:	9009      	str	r0, [sp, #36]	@ 0x24
 8005096:	3307      	adds	r3, #7
 8005098:	f023 0307 	bic.w	r3, r3, #7
 800509c:	f103 0208 	add.w	r2, r3, #8
 80050a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80050a4:	f8d4 b000 	ldr.w	fp, [r4]
 80050a8:	f8c8 2000 	str.w	r2, [r8]
 80050ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80050b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050b6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80050ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80050c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80050c6:	4b9c      	ldr	r3, [pc, #624]	@ (8005338 <_printf_float+0x2cc>)
 80050c8:	f7fb fca0 	bl	8000a0c <__aeabi_dcmpun>
 80050cc:	bb70      	cbnz	r0, 800512c <_printf_float+0xc0>
 80050ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050d6:	4b98      	ldr	r3, [pc, #608]	@ (8005338 <_printf_float+0x2cc>)
 80050d8:	f7fb fc7a 	bl	80009d0 <__aeabi_dcmple>
 80050dc:	bb30      	cbnz	r0, 800512c <_printf_float+0xc0>
 80050de:	2200      	movs	r2, #0
 80050e0:	2300      	movs	r3, #0
 80050e2:	4640      	mov	r0, r8
 80050e4:	4649      	mov	r1, r9
 80050e6:	f7fb fc69 	bl	80009bc <__aeabi_dcmplt>
 80050ea:	b110      	cbz	r0, 80050f2 <_printf_float+0x86>
 80050ec:	232d      	movs	r3, #45	@ 0x2d
 80050ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050f2:	4a92      	ldr	r2, [pc, #584]	@ (800533c <_printf_float+0x2d0>)
 80050f4:	4b92      	ldr	r3, [pc, #584]	@ (8005340 <_printf_float+0x2d4>)
 80050f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80050fa:	bf94      	ite	ls
 80050fc:	4690      	movls	r8, r2
 80050fe:	4698      	movhi	r8, r3
 8005100:	2303      	movs	r3, #3
 8005102:	f04f 0900 	mov.w	r9, #0
 8005106:	6123      	str	r3, [r4, #16]
 8005108:	f02b 0304 	bic.w	r3, fp, #4
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	4633      	mov	r3, r6
 8005110:	4621      	mov	r1, r4
 8005112:	4628      	mov	r0, r5
 8005114:	9700      	str	r7, [sp, #0]
 8005116:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005118:	f000 f9d4 	bl	80054c4 <_printf_common>
 800511c:	3001      	adds	r0, #1
 800511e:	f040 8090 	bne.w	8005242 <_printf_float+0x1d6>
 8005122:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005126:	b011      	add	sp, #68	@ 0x44
 8005128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512c:	4642      	mov	r2, r8
 800512e:	464b      	mov	r3, r9
 8005130:	4640      	mov	r0, r8
 8005132:	4649      	mov	r1, r9
 8005134:	f7fb fc6a 	bl	8000a0c <__aeabi_dcmpun>
 8005138:	b148      	cbz	r0, 800514e <_printf_float+0xe2>
 800513a:	464b      	mov	r3, r9
 800513c:	2b00      	cmp	r3, #0
 800513e:	bfb8      	it	lt
 8005140:	232d      	movlt	r3, #45	@ 0x2d
 8005142:	4a80      	ldr	r2, [pc, #512]	@ (8005344 <_printf_float+0x2d8>)
 8005144:	bfb8      	it	lt
 8005146:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800514a:	4b7f      	ldr	r3, [pc, #508]	@ (8005348 <_printf_float+0x2dc>)
 800514c:	e7d3      	b.n	80050f6 <_printf_float+0x8a>
 800514e:	6863      	ldr	r3, [r4, #4]
 8005150:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	d13f      	bne.n	80051d8 <_printf_float+0x16c>
 8005158:	2306      	movs	r3, #6
 800515a:	6063      	str	r3, [r4, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005162:	6023      	str	r3, [r4, #0]
 8005164:	9206      	str	r2, [sp, #24]
 8005166:	aa0e      	add	r2, sp, #56	@ 0x38
 8005168:	e9cd a204 	strd	sl, r2, [sp, #16]
 800516c:	aa0d      	add	r2, sp, #52	@ 0x34
 800516e:	9203      	str	r2, [sp, #12]
 8005170:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005174:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005178:	6863      	ldr	r3, [r4, #4]
 800517a:	4642      	mov	r2, r8
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	4628      	mov	r0, r5
 8005180:	464b      	mov	r3, r9
 8005182:	910a      	str	r1, [sp, #40]	@ 0x28
 8005184:	f7ff fed4 	bl	8004f30 <__cvt>
 8005188:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800518a:	4680      	mov	r8, r0
 800518c:	2947      	cmp	r1, #71	@ 0x47
 800518e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005190:	d128      	bne.n	80051e4 <_printf_float+0x178>
 8005192:	1cc8      	adds	r0, r1, #3
 8005194:	db02      	blt.n	800519c <_printf_float+0x130>
 8005196:	6863      	ldr	r3, [r4, #4]
 8005198:	4299      	cmp	r1, r3
 800519a:	dd40      	ble.n	800521e <_printf_float+0x1b2>
 800519c:	f1aa 0a02 	sub.w	sl, sl, #2
 80051a0:	fa5f fa8a 	uxtb.w	sl, sl
 80051a4:	4652      	mov	r2, sl
 80051a6:	3901      	subs	r1, #1
 80051a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80051ac:	910d      	str	r1, [sp, #52]	@ 0x34
 80051ae:	f7ff ff23 	bl	8004ff8 <__exponent>
 80051b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80051b4:	4681      	mov	r9, r0
 80051b6:	1813      	adds	r3, r2, r0
 80051b8:	2a01      	cmp	r2, #1
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	dc02      	bgt.n	80051c4 <_printf_float+0x158>
 80051be:	6822      	ldr	r2, [r4, #0]
 80051c0:	07d2      	lsls	r2, r2, #31
 80051c2:	d501      	bpl.n	80051c8 <_printf_float+0x15c>
 80051c4:	3301      	adds	r3, #1
 80051c6:	6123      	str	r3, [r4, #16]
 80051c8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d09e      	beq.n	800510e <_printf_float+0xa2>
 80051d0:	232d      	movs	r3, #45	@ 0x2d
 80051d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051d6:	e79a      	b.n	800510e <_printf_float+0xa2>
 80051d8:	2947      	cmp	r1, #71	@ 0x47
 80051da:	d1bf      	bne.n	800515c <_printf_float+0xf0>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1bd      	bne.n	800515c <_printf_float+0xf0>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e7ba      	b.n	800515a <_printf_float+0xee>
 80051e4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051e8:	d9dc      	bls.n	80051a4 <_printf_float+0x138>
 80051ea:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80051ee:	d118      	bne.n	8005222 <_printf_float+0x1b6>
 80051f0:	2900      	cmp	r1, #0
 80051f2:	6863      	ldr	r3, [r4, #4]
 80051f4:	dd0b      	ble.n	800520e <_printf_float+0x1a2>
 80051f6:	6121      	str	r1, [r4, #16]
 80051f8:	b913      	cbnz	r3, 8005200 <_printf_float+0x194>
 80051fa:	6822      	ldr	r2, [r4, #0]
 80051fc:	07d0      	lsls	r0, r2, #31
 80051fe:	d502      	bpl.n	8005206 <_printf_float+0x19a>
 8005200:	3301      	adds	r3, #1
 8005202:	440b      	add	r3, r1
 8005204:	6123      	str	r3, [r4, #16]
 8005206:	f04f 0900 	mov.w	r9, #0
 800520a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800520c:	e7dc      	b.n	80051c8 <_printf_float+0x15c>
 800520e:	b913      	cbnz	r3, 8005216 <_printf_float+0x1aa>
 8005210:	6822      	ldr	r2, [r4, #0]
 8005212:	07d2      	lsls	r2, r2, #31
 8005214:	d501      	bpl.n	800521a <_printf_float+0x1ae>
 8005216:	3302      	adds	r3, #2
 8005218:	e7f4      	b.n	8005204 <_printf_float+0x198>
 800521a:	2301      	movs	r3, #1
 800521c:	e7f2      	b.n	8005204 <_printf_float+0x198>
 800521e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005222:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005224:	4299      	cmp	r1, r3
 8005226:	db05      	blt.n	8005234 <_printf_float+0x1c8>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	6121      	str	r1, [r4, #16]
 800522c:	07d8      	lsls	r0, r3, #31
 800522e:	d5ea      	bpl.n	8005206 <_printf_float+0x19a>
 8005230:	1c4b      	adds	r3, r1, #1
 8005232:	e7e7      	b.n	8005204 <_printf_float+0x198>
 8005234:	2900      	cmp	r1, #0
 8005236:	bfcc      	ite	gt
 8005238:	2201      	movgt	r2, #1
 800523a:	f1c1 0202 	rsble	r2, r1, #2
 800523e:	4413      	add	r3, r2
 8005240:	e7e0      	b.n	8005204 <_printf_float+0x198>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	055a      	lsls	r2, r3, #21
 8005246:	d407      	bmi.n	8005258 <_printf_float+0x1ec>
 8005248:	6923      	ldr	r3, [r4, #16]
 800524a:	4642      	mov	r2, r8
 800524c:	4631      	mov	r1, r6
 800524e:	4628      	mov	r0, r5
 8005250:	47b8      	blx	r7
 8005252:	3001      	adds	r0, #1
 8005254:	d12b      	bne.n	80052ae <_printf_float+0x242>
 8005256:	e764      	b.n	8005122 <_printf_float+0xb6>
 8005258:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800525c:	f240 80dc 	bls.w	8005418 <_printf_float+0x3ac>
 8005260:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005264:	2200      	movs	r2, #0
 8005266:	2300      	movs	r3, #0
 8005268:	f7fb fb9e 	bl	80009a8 <__aeabi_dcmpeq>
 800526c:	2800      	cmp	r0, #0
 800526e:	d033      	beq.n	80052d8 <_printf_float+0x26c>
 8005270:	2301      	movs	r3, #1
 8005272:	4631      	mov	r1, r6
 8005274:	4628      	mov	r0, r5
 8005276:	4a35      	ldr	r2, [pc, #212]	@ (800534c <_printf_float+0x2e0>)
 8005278:	47b8      	blx	r7
 800527a:	3001      	adds	r0, #1
 800527c:	f43f af51 	beq.w	8005122 <_printf_float+0xb6>
 8005280:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005284:	4543      	cmp	r3, r8
 8005286:	db02      	blt.n	800528e <_printf_float+0x222>
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	07d8      	lsls	r0, r3, #31
 800528c:	d50f      	bpl.n	80052ae <_printf_float+0x242>
 800528e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005292:	4631      	mov	r1, r6
 8005294:	4628      	mov	r0, r5
 8005296:	47b8      	blx	r7
 8005298:	3001      	adds	r0, #1
 800529a:	f43f af42 	beq.w	8005122 <_printf_float+0xb6>
 800529e:	f04f 0900 	mov.w	r9, #0
 80052a2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80052a6:	f104 0a1a 	add.w	sl, r4, #26
 80052aa:	45c8      	cmp	r8, r9
 80052ac:	dc09      	bgt.n	80052c2 <_printf_float+0x256>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	079b      	lsls	r3, r3, #30
 80052b2:	f100 8102 	bmi.w	80054ba <_printf_float+0x44e>
 80052b6:	68e0      	ldr	r0, [r4, #12]
 80052b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80052ba:	4298      	cmp	r0, r3
 80052bc:	bfb8      	it	lt
 80052be:	4618      	movlt	r0, r3
 80052c0:	e731      	b.n	8005126 <_printf_float+0xba>
 80052c2:	2301      	movs	r3, #1
 80052c4:	4652      	mov	r2, sl
 80052c6:	4631      	mov	r1, r6
 80052c8:	4628      	mov	r0, r5
 80052ca:	47b8      	blx	r7
 80052cc:	3001      	adds	r0, #1
 80052ce:	f43f af28 	beq.w	8005122 <_printf_float+0xb6>
 80052d2:	f109 0901 	add.w	r9, r9, #1
 80052d6:	e7e8      	b.n	80052aa <_printf_float+0x23e>
 80052d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052da:	2b00      	cmp	r3, #0
 80052dc:	dc38      	bgt.n	8005350 <_printf_float+0x2e4>
 80052de:	2301      	movs	r3, #1
 80052e0:	4631      	mov	r1, r6
 80052e2:	4628      	mov	r0, r5
 80052e4:	4a19      	ldr	r2, [pc, #100]	@ (800534c <_printf_float+0x2e0>)
 80052e6:	47b8      	blx	r7
 80052e8:	3001      	adds	r0, #1
 80052ea:	f43f af1a 	beq.w	8005122 <_printf_float+0xb6>
 80052ee:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80052f2:	ea59 0303 	orrs.w	r3, r9, r3
 80052f6:	d102      	bne.n	80052fe <_printf_float+0x292>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	07d9      	lsls	r1, r3, #31
 80052fc:	d5d7      	bpl.n	80052ae <_printf_float+0x242>
 80052fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005302:	4631      	mov	r1, r6
 8005304:	4628      	mov	r0, r5
 8005306:	47b8      	blx	r7
 8005308:	3001      	adds	r0, #1
 800530a:	f43f af0a 	beq.w	8005122 <_printf_float+0xb6>
 800530e:	f04f 0a00 	mov.w	sl, #0
 8005312:	f104 0b1a 	add.w	fp, r4, #26
 8005316:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005318:	425b      	negs	r3, r3
 800531a:	4553      	cmp	r3, sl
 800531c:	dc01      	bgt.n	8005322 <_printf_float+0x2b6>
 800531e:	464b      	mov	r3, r9
 8005320:	e793      	b.n	800524a <_printf_float+0x1de>
 8005322:	2301      	movs	r3, #1
 8005324:	465a      	mov	r2, fp
 8005326:	4631      	mov	r1, r6
 8005328:	4628      	mov	r0, r5
 800532a:	47b8      	blx	r7
 800532c:	3001      	adds	r0, #1
 800532e:	f43f aef8 	beq.w	8005122 <_printf_float+0xb6>
 8005332:	f10a 0a01 	add.w	sl, sl, #1
 8005336:	e7ee      	b.n	8005316 <_printf_float+0x2aa>
 8005338:	7fefffff 	.word	0x7fefffff
 800533c:	0800973b 	.word	0x0800973b
 8005340:	0800973f 	.word	0x0800973f
 8005344:	08009743 	.word	0x08009743
 8005348:	08009747 	.word	0x08009747
 800534c:	0800974b 	.word	0x0800974b
 8005350:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005352:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005356:	4553      	cmp	r3, sl
 8005358:	bfa8      	it	ge
 800535a:	4653      	movge	r3, sl
 800535c:	2b00      	cmp	r3, #0
 800535e:	4699      	mov	r9, r3
 8005360:	dc36      	bgt.n	80053d0 <_printf_float+0x364>
 8005362:	f04f 0b00 	mov.w	fp, #0
 8005366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800536a:	f104 021a 	add.w	r2, r4, #26
 800536e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005370:	930a      	str	r3, [sp, #40]	@ 0x28
 8005372:	eba3 0309 	sub.w	r3, r3, r9
 8005376:	455b      	cmp	r3, fp
 8005378:	dc31      	bgt.n	80053de <_printf_float+0x372>
 800537a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800537c:	459a      	cmp	sl, r3
 800537e:	dc3a      	bgt.n	80053f6 <_printf_float+0x38a>
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	07da      	lsls	r2, r3, #31
 8005384:	d437      	bmi.n	80053f6 <_printf_float+0x38a>
 8005386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005388:	ebaa 0903 	sub.w	r9, sl, r3
 800538c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800538e:	ebaa 0303 	sub.w	r3, sl, r3
 8005392:	4599      	cmp	r9, r3
 8005394:	bfa8      	it	ge
 8005396:	4699      	movge	r9, r3
 8005398:	f1b9 0f00 	cmp.w	r9, #0
 800539c:	dc33      	bgt.n	8005406 <_printf_float+0x39a>
 800539e:	f04f 0800 	mov.w	r8, #0
 80053a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053a6:	f104 0b1a 	add.w	fp, r4, #26
 80053aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80053ac:	ebaa 0303 	sub.w	r3, sl, r3
 80053b0:	eba3 0309 	sub.w	r3, r3, r9
 80053b4:	4543      	cmp	r3, r8
 80053b6:	f77f af7a 	ble.w	80052ae <_printf_float+0x242>
 80053ba:	2301      	movs	r3, #1
 80053bc:	465a      	mov	r2, fp
 80053be:	4631      	mov	r1, r6
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b8      	blx	r7
 80053c4:	3001      	adds	r0, #1
 80053c6:	f43f aeac 	beq.w	8005122 <_printf_float+0xb6>
 80053ca:	f108 0801 	add.w	r8, r8, #1
 80053ce:	e7ec      	b.n	80053aa <_printf_float+0x33e>
 80053d0:	4642      	mov	r2, r8
 80053d2:	4631      	mov	r1, r6
 80053d4:	4628      	mov	r0, r5
 80053d6:	47b8      	blx	r7
 80053d8:	3001      	adds	r0, #1
 80053da:	d1c2      	bne.n	8005362 <_printf_float+0x2f6>
 80053dc:	e6a1      	b.n	8005122 <_printf_float+0xb6>
 80053de:	2301      	movs	r3, #1
 80053e0:	4631      	mov	r1, r6
 80053e2:	4628      	mov	r0, r5
 80053e4:	920a      	str	r2, [sp, #40]	@ 0x28
 80053e6:	47b8      	blx	r7
 80053e8:	3001      	adds	r0, #1
 80053ea:	f43f ae9a 	beq.w	8005122 <_printf_float+0xb6>
 80053ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80053f0:	f10b 0b01 	add.w	fp, fp, #1
 80053f4:	e7bb      	b.n	800536e <_printf_float+0x302>
 80053f6:	4631      	mov	r1, r6
 80053f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80053fc:	4628      	mov	r0, r5
 80053fe:	47b8      	blx	r7
 8005400:	3001      	adds	r0, #1
 8005402:	d1c0      	bne.n	8005386 <_printf_float+0x31a>
 8005404:	e68d      	b.n	8005122 <_printf_float+0xb6>
 8005406:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005408:	464b      	mov	r3, r9
 800540a:	4631      	mov	r1, r6
 800540c:	4628      	mov	r0, r5
 800540e:	4442      	add	r2, r8
 8005410:	47b8      	blx	r7
 8005412:	3001      	adds	r0, #1
 8005414:	d1c3      	bne.n	800539e <_printf_float+0x332>
 8005416:	e684      	b.n	8005122 <_printf_float+0xb6>
 8005418:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800541c:	f1ba 0f01 	cmp.w	sl, #1
 8005420:	dc01      	bgt.n	8005426 <_printf_float+0x3ba>
 8005422:	07db      	lsls	r3, r3, #31
 8005424:	d536      	bpl.n	8005494 <_printf_float+0x428>
 8005426:	2301      	movs	r3, #1
 8005428:	4642      	mov	r2, r8
 800542a:	4631      	mov	r1, r6
 800542c:	4628      	mov	r0, r5
 800542e:	47b8      	blx	r7
 8005430:	3001      	adds	r0, #1
 8005432:	f43f ae76 	beq.w	8005122 <_printf_float+0xb6>
 8005436:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800543a:	4631      	mov	r1, r6
 800543c:	4628      	mov	r0, r5
 800543e:	47b8      	blx	r7
 8005440:	3001      	adds	r0, #1
 8005442:	f43f ae6e 	beq.w	8005122 <_printf_float+0xb6>
 8005446:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800544a:	2200      	movs	r2, #0
 800544c:	2300      	movs	r3, #0
 800544e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005452:	f7fb faa9 	bl	80009a8 <__aeabi_dcmpeq>
 8005456:	b9c0      	cbnz	r0, 800548a <_printf_float+0x41e>
 8005458:	4653      	mov	r3, sl
 800545a:	f108 0201 	add.w	r2, r8, #1
 800545e:	4631      	mov	r1, r6
 8005460:	4628      	mov	r0, r5
 8005462:	47b8      	blx	r7
 8005464:	3001      	adds	r0, #1
 8005466:	d10c      	bne.n	8005482 <_printf_float+0x416>
 8005468:	e65b      	b.n	8005122 <_printf_float+0xb6>
 800546a:	2301      	movs	r3, #1
 800546c:	465a      	mov	r2, fp
 800546e:	4631      	mov	r1, r6
 8005470:	4628      	mov	r0, r5
 8005472:	47b8      	blx	r7
 8005474:	3001      	adds	r0, #1
 8005476:	f43f ae54 	beq.w	8005122 <_printf_float+0xb6>
 800547a:	f108 0801 	add.w	r8, r8, #1
 800547e:	45d0      	cmp	r8, sl
 8005480:	dbf3      	blt.n	800546a <_printf_float+0x3fe>
 8005482:	464b      	mov	r3, r9
 8005484:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005488:	e6e0      	b.n	800524c <_printf_float+0x1e0>
 800548a:	f04f 0800 	mov.w	r8, #0
 800548e:	f104 0b1a 	add.w	fp, r4, #26
 8005492:	e7f4      	b.n	800547e <_printf_float+0x412>
 8005494:	2301      	movs	r3, #1
 8005496:	4642      	mov	r2, r8
 8005498:	e7e1      	b.n	800545e <_printf_float+0x3f2>
 800549a:	2301      	movs	r3, #1
 800549c:	464a      	mov	r2, r9
 800549e:	4631      	mov	r1, r6
 80054a0:	4628      	mov	r0, r5
 80054a2:	47b8      	blx	r7
 80054a4:	3001      	adds	r0, #1
 80054a6:	f43f ae3c 	beq.w	8005122 <_printf_float+0xb6>
 80054aa:	f108 0801 	add.w	r8, r8, #1
 80054ae:	68e3      	ldr	r3, [r4, #12]
 80054b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80054b2:	1a5b      	subs	r3, r3, r1
 80054b4:	4543      	cmp	r3, r8
 80054b6:	dcf0      	bgt.n	800549a <_printf_float+0x42e>
 80054b8:	e6fd      	b.n	80052b6 <_printf_float+0x24a>
 80054ba:	f04f 0800 	mov.w	r8, #0
 80054be:	f104 0919 	add.w	r9, r4, #25
 80054c2:	e7f4      	b.n	80054ae <_printf_float+0x442>

080054c4 <_printf_common>:
 80054c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054c8:	4616      	mov	r6, r2
 80054ca:	4698      	mov	r8, r3
 80054cc:	688a      	ldr	r2, [r1, #8]
 80054ce:	690b      	ldr	r3, [r1, #16]
 80054d0:	4607      	mov	r7, r0
 80054d2:	4293      	cmp	r3, r2
 80054d4:	bfb8      	it	lt
 80054d6:	4613      	movlt	r3, r2
 80054d8:	6033      	str	r3, [r6, #0]
 80054da:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054de:	460c      	mov	r4, r1
 80054e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054e4:	b10a      	cbz	r2, 80054ea <_printf_common+0x26>
 80054e6:	3301      	adds	r3, #1
 80054e8:	6033      	str	r3, [r6, #0]
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	0699      	lsls	r1, r3, #26
 80054ee:	bf42      	ittt	mi
 80054f0:	6833      	ldrmi	r3, [r6, #0]
 80054f2:	3302      	addmi	r3, #2
 80054f4:	6033      	strmi	r3, [r6, #0]
 80054f6:	6825      	ldr	r5, [r4, #0]
 80054f8:	f015 0506 	ands.w	r5, r5, #6
 80054fc:	d106      	bne.n	800550c <_printf_common+0x48>
 80054fe:	f104 0a19 	add.w	sl, r4, #25
 8005502:	68e3      	ldr	r3, [r4, #12]
 8005504:	6832      	ldr	r2, [r6, #0]
 8005506:	1a9b      	subs	r3, r3, r2
 8005508:	42ab      	cmp	r3, r5
 800550a:	dc2b      	bgt.n	8005564 <_printf_common+0xa0>
 800550c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005510:	6822      	ldr	r2, [r4, #0]
 8005512:	3b00      	subs	r3, #0
 8005514:	bf18      	it	ne
 8005516:	2301      	movne	r3, #1
 8005518:	0692      	lsls	r2, r2, #26
 800551a:	d430      	bmi.n	800557e <_printf_common+0xba>
 800551c:	4641      	mov	r1, r8
 800551e:	4638      	mov	r0, r7
 8005520:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005524:	47c8      	blx	r9
 8005526:	3001      	adds	r0, #1
 8005528:	d023      	beq.n	8005572 <_printf_common+0xae>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	6922      	ldr	r2, [r4, #16]
 800552e:	f003 0306 	and.w	r3, r3, #6
 8005532:	2b04      	cmp	r3, #4
 8005534:	bf14      	ite	ne
 8005536:	2500      	movne	r5, #0
 8005538:	6833      	ldreq	r3, [r6, #0]
 800553a:	f04f 0600 	mov.w	r6, #0
 800553e:	bf08      	it	eq
 8005540:	68e5      	ldreq	r5, [r4, #12]
 8005542:	f104 041a 	add.w	r4, r4, #26
 8005546:	bf08      	it	eq
 8005548:	1aed      	subeq	r5, r5, r3
 800554a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800554e:	bf08      	it	eq
 8005550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005554:	4293      	cmp	r3, r2
 8005556:	bfc4      	itt	gt
 8005558:	1a9b      	subgt	r3, r3, r2
 800555a:	18ed      	addgt	r5, r5, r3
 800555c:	42b5      	cmp	r5, r6
 800555e:	d11a      	bne.n	8005596 <_printf_common+0xd2>
 8005560:	2000      	movs	r0, #0
 8005562:	e008      	b.n	8005576 <_printf_common+0xb2>
 8005564:	2301      	movs	r3, #1
 8005566:	4652      	mov	r2, sl
 8005568:	4641      	mov	r1, r8
 800556a:	4638      	mov	r0, r7
 800556c:	47c8      	blx	r9
 800556e:	3001      	adds	r0, #1
 8005570:	d103      	bne.n	800557a <_printf_common+0xb6>
 8005572:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557a:	3501      	adds	r5, #1
 800557c:	e7c1      	b.n	8005502 <_printf_common+0x3e>
 800557e:	2030      	movs	r0, #48	@ 0x30
 8005580:	18e1      	adds	r1, r4, r3
 8005582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800558c:	4422      	add	r2, r4
 800558e:	3302      	adds	r3, #2
 8005590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005594:	e7c2      	b.n	800551c <_printf_common+0x58>
 8005596:	2301      	movs	r3, #1
 8005598:	4622      	mov	r2, r4
 800559a:	4641      	mov	r1, r8
 800559c:	4638      	mov	r0, r7
 800559e:	47c8      	blx	r9
 80055a0:	3001      	adds	r0, #1
 80055a2:	d0e6      	beq.n	8005572 <_printf_common+0xae>
 80055a4:	3601      	adds	r6, #1
 80055a6:	e7d9      	b.n	800555c <_printf_common+0x98>

080055a8 <_printf_i>:
 80055a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	7e0f      	ldrb	r7, [r1, #24]
 80055ae:	4691      	mov	r9, r2
 80055b0:	2f78      	cmp	r7, #120	@ 0x78
 80055b2:	4680      	mov	r8, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	469a      	mov	sl, r3
 80055b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055be:	d807      	bhi.n	80055d0 <_printf_i+0x28>
 80055c0:	2f62      	cmp	r7, #98	@ 0x62
 80055c2:	d80a      	bhi.n	80055da <_printf_i+0x32>
 80055c4:	2f00      	cmp	r7, #0
 80055c6:	f000 80d3 	beq.w	8005770 <_printf_i+0x1c8>
 80055ca:	2f58      	cmp	r7, #88	@ 0x58
 80055cc:	f000 80ba 	beq.w	8005744 <_printf_i+0x19c>
 80055d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055d8:	e03a      	b.n	8005650 <_printf_i+0xa8>
 80055da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055de:	2b15      	cmp	r3, #21
 80055e0:	d8f6      	bhi.n	80055d0 <_printf_i+0x28>
 80055e2:	a101      	add	r1, pc, #4	@ (adr r1, 80055e8 <_printf_i+0x40>)
 80055e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055e8:	08005641 	.word	0x08005641
 80055ec:	08005655 	.word	0x08005655
 80055f0:	080055d1 	.word	0x080055d1
 80055f4:	080055d1 	.word	0x080055d1
 80055f8:	080055d1 	.word	0x080055d1
 80055fc:	080055d1 	.word	0x080055d1
 8005600:	08005655 	.word	0x08005655
 8005604:	080055d1 	.word	0x080055d1
 8005608:	080055d1 	.word	0x080055d1
 800560c:	080055d1 	.word	0x080055d1
 8005610:	080055d1 	.word	0x080055d1
 8005614:	08005757 	.word	0x08005757
 8005618:	0800567f 	.word	0x0800567f
 800561c:	08005711 	.word	0x08005711
 8005620:	080055d1 	.word	0x080055d1
 8005624:	080055d1 	.word	0x080055d1
 8005628:	08005779 	.word	0x08005779
 800562c:	080055d1 	.word	0x080055d1
 8005630:	0800567f 	.word	0x0800567f
 8005634:	080055d1 	.word	0x080055d1
 8005638:	080055d1 	.word	0x080055d1
 800563c:	08005719 	.word	0x08005719
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	1d1a      	adds	r2, r3, #4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6032      	str	r2, [r6, #0]
 8005648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800564c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005650:	2301      	movs	r3, #1
 8005652:	e09e      	b.n	8005792 <_printf_i+0x1ea>
 8005654:	6833      	ldr	r3, [r6, #0]
 8005656:	6820      	ldr	r0, [r4, #0]
 8005658:	1d19      	adds	r1, r3, #4
 800565a:	6031      	str	r1, [r6, #0]
 800565c:	0606      	lsls	r6, r0, #24
 800565e:	d501      	bpl.n	8005664 <_printf_i+0xbc>
 8005660:	681d      	ldr	r5, [r3, #0]
 8005662:	e003      	b.n	800566c <_printf_i+0xc4>
 8005664:	0645      	lsls	r5, r0, #25
 8005666:	d5fb      	bpl.n	8005660 <_printf_i+0xb8>
 8005668:	f9b3 5000 	ldrsh.w	r5, [r3]
 800566c:	2d00      	cmp	r5, #0
 800566e:	da03      	bge.n	8005678 <_printf_i+0xd0>
 8005670:	232d      	movs	r3, #45	@ 0x2d
 8005672:	426d      	negs	r5, r5
 8005674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005678:	230a      	movs	r3, #10
 800567a:	4859      	ldr	r0, [pc, #356]	@ (80057e0 <_printf_i+0x238>)
 800567c:	e011      	b.n	80056a2 <_printf_i+0xfa>
 800567e:	6821      	ldr	r1, [r4, #0]
 8005680:	6833      	ldr	r3, [r6, #0]
 8005682:	0608      	lsls	r0, r1, #24
 8005684:	f853 5b04 	ldr.w	r5, [r3], #4
 8005688:	d402      	bmi.n	8005690 <_printf_i+0xe8>
 800568a:	0649      	lsls	r1, r1, #25
 800568c:	bf48      	it	mi
 800568e:	b2ad      	uxthmi	r5, r5
 8005690:	2f6f      	cmp	r7, #111	@ 0x6f
 8005692:	6033      	str	r3, [r6, #0]
 8005694:	bf14      	ite	ne
 8005696:	230a      	movne	r3, #10
 8005698:	2308      	moveq	r3, #8
 800569a:	4851      	ldr	r0, [pc, #324]	@ (80057e0 <_printf_i+0x238>)
 800569c:	2100      	movs	r1, #0
 800569e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056a2:	6866      	ldr	r6, [r4, #4]
 80056a4:	2e00      	cmp	r6, #0
 80056a6:	bfa8      	it	ge
 80056a8:	6821      	ldrge	r1, [r4, #0]
 80056aa:	60a6      	str	r6, [r4, #8]
 80056ac:	bfa4      	itt	ge
 80056ae:	f021 0104 	bicge.w	r1, r1, #4
 80056b2:	6021      	strge	r1, [r4, #0]
 80056b4:	b90d      	cbnz	r5, 80056ba <_printf_i+0x112>
 80056b6:	2e00      	cmp	r6, #0
 80056b8:	d04b      	beq.n	8005752 <_printf_i+0x1aa>
 80056ba:	4616      	mov	r6, r2
 80056bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80056c0:	fb03 5711 	mls	r7, r3, r1, r5
 80056c4:	5dc7      	ldrb	r7, [r0, r7]
 80056c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056ca:	462f      	mov	r7, r5
 80056cc:	42bb      	cmp	r3, r7
 80056ce:	460d      	mov	r5, r1
 80056d0:	d9f4      	bls.n	80056bc <_printf_i+0x114>
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d10b      	bne.n	80056ee <_printf_i+0x146>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	07df      	lsls	r7, r3, #31
 80056da:	d508      	bpl.n	80056ee <_printf_i+0x146>
 80056dc:	6923      	ldr	r3, [r4, #16]
 80056de:	6861      	ldr	r1, [r4, #4]
 80056e0:	4299      	cmp	r1, r3
 80056e2:	bfde      	ittt	le
 80056e4:	2330      	movle	r3, #48	@ 0x30
 80056e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056ea:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80056ee:	1b92      	subs	r2, r2, r6
 80056f0:	6122      	str	r2, [r4, #16]
 80056f2:	464b      	mov	r3, r9
 80056f4:	4621      	mov	r1, r4
 80056f6:	4640      	mov	r0, r8
 80056f8:	f8cd a000 	str.w	sl, [sp]
 80056fc:	aa03      	add	r2, sp, #12
 80056fe:	f7ff fee1 	bl	80054c4 <_printf_common>
 8005702:	3001      	adds	r0, #1
 8005704:	d14a      	bne.n	800579c <_printf_i+0x1f4>
 8005706:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800570a:	b004      	add	sp, #16
 800570c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	f043 0320 	orr.w	r3, r3, #32
 8005716:	6023      	str	r3, [r4, #0]
 8005718:	2778      	movs	r7, #120	@ 0x78
 800571a:	4832      	ldr	r0, [pc, #200]	@ (80057e4 <_printf_i+0x23c>)
 800571c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	6831      	ldr	r1, [r6, #0]
 8005724:	061f      	lsls	r7, r3, #24
 8005726:	f851 5b04 	ldr.w	r5, [r1], #4
 800572a:	d402      	bmi.n	8005732 <_printf_i+0x18a>
 800572c:	065f      	lsls	r7, r3, #25
 800572e:	bf48      	it	mi
 8005730:	b2ad      	uxthmi	r5, r5
 8005732:	6031      	str	r1, [r6, #0]
 8005734:	07d9      	lsls	r1, r3, #31
 8005736:	bf44      	itt	mi
 8005738:	f043 0320 	orrmi.w	r3, r3, #32
 800573c:	6023      	strmi	r3, [r4, #0]
 800573e:	b11d      	cbz	r5, 8005748 <_printf_i+0x1a0>
 8005740:	2310      	movs	r3, #16
 8005742:	e7ab      	b.n	800569c <_printf_i+0xf4>
 8005744:	4826      	ldr	r0, [pc, #152]	@ (80057e0 <_printf_i+0x238>)
 8005746:	e7e9      	b.n	800571c <_printf_i+0x174>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	f023 0320 	bic.w	r3, r3, #32
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	e7f6      	b.n	8005740 <_printf_i+0x198>
 8005752:	4616      	mov	r6, r2
 8005754:	e7bd      	b.n	80056d2 <_printf_i+0x12a>
 8005756:	6833      	ldr	r3, [r6, #0]
 8005758:	6825      	ldr	r5, [r4, #0]
 800575a:	1d18      	adds	r0, r3, #4
 800575c:	6961      	ldr	r1, [r4, #20]
 800575e:	6030      	str	r0, [r6, #0]
 8005760:	062e      	lsls	r6, r5, #24
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	d501      	bpl.n	800576a <_printf_i+0x1c2>
 8005766:	6019      	str	r1, [r3, #0]
 8005768:	e002      	b.n	8005770 <_printf_i+0x1c8>
 800576a:	0668      	lsls	r0, r5, #25
 800576c:	d5fb      	bpl.n	8005766 <_printf_i+0x1be>
 800576e:	8019      	strh	r1, [r3, #0]
 8005770:	2300      	movs	r3, #0
 8005772:	4616      	mov	r6, r2
 8005774:	6123      	str	r3, [r4, #16]
 8005776:	e7bc      	b.n	80056f2 <_printf_i+0x14a>
 8005778:	6833      	ldr	r3, [r6, #0]
 800577a:	2100      	movs	r1, #0
 800577c:	1d1a      	adds	r2, r3, #4
 800577e:	6032      	str	r2, [r6, #0]
 8005780:	681e      	ldr	r6, [r3, #0]
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	4630      	mov	r0, r6
 8005786:	f000 fbe4 	bl	8005f52 <memchr>
 800578a:	b108      	cbz	r0, 8005790 <_printf_i+0x1e8>
 800578c:	1b80      	subs	r0, r0, r6
 800578e:	6060      	str	r0, [r4, #4]
 8005790:	6863      	ldr	r3, [r4, #4]
 8005792:	6123      	str	r3, [r4, #16]
 8005794:	2300      	movs	r3, #0
 8005796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800579a:	e7aa      	b.n	80056f2 <_printf_i+0x14a>
 800579c:	4632      	mov	r2, r6
 800579e:	4649      	mov	r1, r9
 80057a0:	4640      	mov	r0, r8
 80057a2:	6923      	ldr	r3, [r4, #16]
 80057a4:	47d0      	blx	sl
 80057a6:	3001      	adds	r0, #1
 80057a8:	d0ad      	beq.n	8005706 <_printf_i+0x15e>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	079b      	lsls	r3, r3, #30
 80057ae:	d413      	bmi.n	80057d8 <_printf_i+0x230>
 80057b0:	68e0      	ldr	r0, [r4, #12]
 80057b2:	9b03      	ldr	r3, [sp, #12]
 80057b4:	4298      	cmp	r0, r3
 80057b6:	bfb8      	it	lt
 80057b8:	4618      	movlt	r0, r3
 80057ba:	e7a6      	b.n	800570a <_printf_i+0x162>
 80057bc:	2301      	movs	r3, #1
 80057be:	4632      	mov	r2, r6
 80057c0:	4649      	mov	r1, r9
 80057c2:	4640      	mov	r0, r8
 80057c4:	47d0      	blx	sl
 80057c6:	3001      	adds	r0, #1
 80057c8:	d09d      	beq.n	8005706 <_printf_i+0x15e>
 80057ca:	3501      	adds	r5, #1
 80057cc:	68e3      	ldr	r3, [r4, #12]
 80057ce:	9903      	ldr	r1, [sp, #12]
 80057d0:	1a5b      	subs	r3, r3, r1
 80057d2:	42ab      	cmp	r3, r5
 80057d4:	dcf2      	bgt.n	80057bc <_printf_i+0x214>
 80057d6:	e7eb      	b.n	80057b0 <_printf_i+0x208>
 80057d8:	2500      	movs	r5, #0
 80057da:	f104 0619 	add.w	r6, r4, #25
 80057de:	e7f5      	b.n	80057cc <_printf_i+0x224>
 80057e0:	0800974d 	.word	0x0800974d
 80057e4:	0800975e 	.word	0x0800975e

080057e8 <_scanf_float>:
 80057e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ec:	b087      	sub	sp, #28
 80057ee:	9303      	str	r3, [sp, #12]
 80057f0:	688b      	ldr	r3, [r1, #8]
 80057f2:	4617      	mov	r7, r2
 80057f4:	1e5a      	subs	r2, r3, #1
 80057f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80057fa:	bf82      	ittt	hi
 80057fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005800:	eb03 0b05 	addhi.w	fp, r3, r5
 8005804:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005808:	460a      	mov	r2, r1
 800580a:	f04f 0500 	mov.w	r5, #0
 800580e:	bf88      	it	hi
 8005810:	608b      	strhi	r3, [r1, #8]
 8005812:	680b      	ldr	r3, [r1, #0]
 8005814:	4680      	mov	r8, r0
 8005816:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800581a:	f842 3b1c 	str.w	r3, [r2], #28
 800581e:	460c      	mov	r4, r1
 8005820:	bf98      	it	ls
 8005822:	f04f 0b00 	movls.w	fp, #0
 8005826:	4616      	mov	r6, r2
 8005828:	46aa      	mov	sl, r5
 800582a:	46a9      	mov	r9, r5
 800582c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005830:	9201      	str	r2, [sp, #4]
 8005832:	9502      	str	r5, [sp, #8]
 8005834:	68a2      	ldr	r2, [r4, #8]
 8005836:	b152      	cbz	r2, 800584e <_scanf_float+0x66>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b4e      	cmp	r3, #78	@ 0x4e
 800583e:	d865      	bhi.n	800590c <_scanf_float+0x124>
 8005840:	2b40      	cmp	r3, #64	@ 0x40
 8005842:	d83d      	bhi.n	80058c0 <_scanf_float+0xd8>
 8005844:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005848:	b2c8      	uxtb	r0, r1
 800584a:	280e      	cmp	r0, #14
 800584c:	d93b      	bls.n	80058c6 <_scanf_float+0xde>
 800584e:	f1b9 0f00 	cmp.w	r9, #0
 8005852:	d003      	beq.n	800585c <_scanf_float+0x74>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800585a:	6023      	str	r3, [r4, #0]
 800585c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005860:	f1ba 0f01 	cmp.w	sl, #1
 8005864:	f200 8118 	bhi.w	8005a98 <_scanf_float+0x2b0>
 8005868:	9b01      	ldr	r3, [sp, #4]
 800586a:	429e      	cmp	r6, r3
 800586c:	f200 8109 	bhi.w	8005a82 <_scanf_float+0x29a>
 8005870:	2001      	movs	r0, #1
 8005872:	b007      	add	sp, #28
 8005874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005878:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800587c:	2a0d      	cmp	r2, #13
 800587e:	d8e6      	bhi.n	800584e <_scanf_float+0x66>
 8005880:	a101      	add	r1, pc, #4	@ (adr r1, 8005888 <_scanf_float+0xa0>)
 8005882:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005886:	bf00      	nop
 8005888:	080059cf 	.word	0x080059cf
 800588c:	0800584f 	.word	0x0800584f
 8005890:	0800584f 	.word	0x0800584f
 8005894:	0800584f 	.word	0x0800584f
 8005898:	08005a2f 	.word	0x08005a2f
 800589c:	08005a07 	.word	0x08005a07
 80058a0:	0800584f 	.word	0x0800584f
 80058a4:	0800584f 	.word	0x0800584f
 80058a8:	080059dd 	.word	0x080059dd
 80058ac:	0800584f 	.word	0x0800584f
 80058b0:	0800584f 	.word	0x0800584f
 80058b4:	0800584f 	.word	0x0800584f
 80058b8:	0800584f 	.word	0x0800584f
 80058bc:	08005995 	.word	0x08005995
 80058c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80058c4:	e7da      	b.n	800587c <_scanf_float+0x94>
 80058c6:	290e      	cmp	r1, #14
 80058c8:	d8c1      	bhi.n	800584e <_scanf_float+0x66>
 80058ca:	a001      	add	r0, pc, #4	@ (adr r0, 80058d0 <_scanf_float+0xe8>)
 80058cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80058d0:	08005985 	.word	0x08005985
 80058d4:	0800584f 	.word	0x0800584f
 80058d8:	08005985 	.word	0x08005985
 80058dc:	08005a1b 	.word	0x08005a1b
 80058e0:	0800584f 	.word	0x0800584f
 80058e4:	0800592d 	.word	0x0800592d
 80058e8:	0800596b 	.word	0x0800596b
 80058ec:	0800596b 	.word	0x0800596b
 80058f0:	0800596b 	.word	0x0800596b
 80058f4:	0800596b 	.word	0x0800596b
 80058f8:	0800596b 	.word	0x0800596b
 80058fc:	0800596b 	.word	0x0800596b
 8005900:	0800596b 	.word	0x0800596b
 8005904:	0800596b 	.word	0x0800596b
 8005908:	0800596b 	.word	0x0800596b
 800590c:	2b6e      	cmp	r3, #110	@ 0x6e
 800590e:	d809      	bhi.n	8005924 <_scanf_float+0x13c>
 8005910:	2b60      	cmp	r3, #96	@ 0x60
 8005912:	d8b1      	bhi.n	8005878 <_scanf_float+0x90>
 8005914:	2b54      	cmp	r3, #84	@ 0x54
 8005916:	d07b      	beq.n	8005a10 <_scanf_float+0x228>
 8005918:	2b59      	cmp	r3, #89	@ 0x59
 800591a:	d198      	bne.n	800584e <_scanf_float+0x66>
 800591c:	2d07      	cmp	r5, #7
 800591e:	d196      	bne.n	800584e <_scanf_float+0x66>
 8005920:	2508      	movs	r5, #8
 8005922:	e02c      	b.n	800597e <_scanf_float+0x196>
 8005924:	2b74      	cmp	r3, #116	@ 0x74
 8005926:	d073      	beq.n	8005a10 <_scanf_float+0x228>
 8005928:	2b79      	cmp	r3, #121	@ 0x79
 800592a:	e7f6      	b.n	800591a <_scanf_float+0x132>
 800592c:	6821      	ldr	r1, [r4, #0]
 800592e:	05c8      	lsls	r0, r1, #23
 8005930:	d51b      	bpl.n	800596a <_scanf_float+0x182>
 8005932:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005936:	6021      	str	r1, [r4, #0]
 8005938:	f109 0901 	add.w	r9, r9, #1
 800593c:	f1bb 0f00 	cmp.w	fp, #0
 8005940:	d003      	beq.n	800594a <_scanf_float+0x162>
 8005942:	3201      	adds	r2, #1
 8005944:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005948:	60a2      	str	r2, [r4, #8]
 800594a:	68a3      	ldr	r3, [r4, #8]
 800594c:	3b01      	subs	r3, #1
 800594e:	60a3      	str	r3, [r4, #8]
 8005950:	6923      	ldr	r3, [r4, #16]
 8005952:	3301      	adds	r3, #1
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3b01      	subs	r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	f340 8087 	ble.w	8005a70 <_scanf_float+0x288>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	e764      	b.n	8005834 <_scanf_float+0x4c>
 800596a:	eb1a 0105 	adds.w	r1, sl, r5
 800596e:	f47f af6e 	bne.w	800584e <_scanf_float+0x66>
 8005972:	460d      	mov	r5, r1
 8005974:	468a      	mov	sl, r1
 8005976:	6822      	ldr	r2, [r4, #0]
 8005978:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800597c:	6022      	str	r2, [r4, #0]
 800597e:	f806 3b01 	strb.w	r3, [r6], #1
 8005982:	e7e2      	b.n	800594a <_scanf_float+0x162>
 8005984:	6822      	ldr	r2, [r4, #0]
 8005986:	0610      	lsls	r0, r2, #24
 8005988:	f57f af61 	bpl.w	800584e <_scanf_float+0x66>
 800598c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005990:	6022      	str	r2, [r4, #0]
 8005992:	e7f4      	b.n	800597e <_scanf_float+0x196>
 8005994:	f1ba 0f00 	cmp.w	sl, #0
 8005998:	d10e      	bne.n	80059b8 <_scanf_float+0x1d0>
 800599a:	f1b9 0f00 	cmp.w	r9, #0
 800599e:	d10e      	bne.n	80059be <_scanf_float+0x1d6>
 80059a0:	6822      	ldr	r2, [r4, #0]
 80059a2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80059a6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80059aa:	d108      	bne.n	80059be <_scanf_float+0x1d6>
 80059ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80059b0:	f04f 0a01 	mov.w	sl, #1
 80059b4:	6022      	str	r2, [r4, #0]
 80059b6:	e7e2      	b.n	800597e <_scanf_float+0x196>
 80059b8:	f1ba 0f02 	cmp.w	sl, #2
 80059bc:	d055      	beq.n	8005a6a <_scanf_float+0x282>
 80059be:	2d01      	cmp	r5, #1
 80059c0:	d002      	beq.n	80059c8 <_scanf_float+0x1e0>
 80059c2:	2d04      	cmp	r5, #4
 80059c4:	f47f af43 	bne.w	800584e <_scanf_float+0x66>
 80059c8:	3501      	adds	r5, #1
 80059ca:	b2ed      	uxtb	r5, r5
 80059cc:	e7d7      	b.n	800597e <_scanf_float+0x196>
 80059ce:	f1ba 0f01 	cmp.w	sl, #1
 80059d2:	f47f af3c 	bne.w	800584e <_scanf_float+0x66>
 80059d6:	f04f 0a02 	mov.w	sl, #2
 80059da:	e7d0      	b.n	800597e <_scanf_float+0x196>
 80059dc:	b97d      	cbnz	r5, 80059fe <_scanf_float+0x216>
 80059de:	f1b9 0f00 	cmp.w	r9, #0
 80059e2:	f47f af37 	bne.w	8005854 <_scanf_float+0x6c>
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80059ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80059f0:	f040 8103 	bne.w	8005bfa <_scanf_float+0x412>
 80059f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80059f8:	2501      	movs	r5, #1
 80059fa:	6022      	str	r2, [r4, #0]
 80059fc:	e7bf      	b.n	800597e <_scanf_float+0x196>
 80059fe:	2d03      	cmp	r5, #3
 8005a00:	d0e2      	beq.n	80059c8 <_scanf_float+0x1e0>
 8005a02:	2d05      	cmp	r5, #5
 8005a04:	e7de      	b.n	80059c4 <_scanf_float+0x1dc>
 8005a06:	2d02      	cmp	r5, #2
 8005a08:	f47f af21 	bne.w	800584e <_scanf_float+0x66>
 8005a0c:	2503      	movs	r5, #3
 8005a0e:	e7b6      	b.n	800597e <_scanf_float+0x196>
 8005a10:	2d06      	cmp	r5, #6
 8005a12:	f47f af1c 	bne.w	800584e <_scanf_float+0x66>
 8005a16:	2507      	movs	r5, #7
 8005a18:	e7b1      	b.n	800597e <_scanf_float+0x196>
 8005a1a:	6822      	ldr	r2, [r4, #0]
 8005a1c:	0591      	lsls	r1, r2, #22
 8005a1e:	f57f af16 	bpl.w	800584e <_scanf_float+0x66>
 8005a22:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005a26:	6022      	str	r2, [r4, #0]
 8005a28:	f8cd 9008 	str.w	r9, [sp, #8]
 8005a2c:	e7a7      	b.n	800597e <_scanf_float+0x196>
 8005a2e:	6822      	ldr	r2, [r4, #0]
 8005a30:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005a34:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005a38:	d006      	beq.n	8005a48 <_scanf_float+0x260>
 8005a3a:	0550      	lsls	r0, r2, #21
 8005a3c:	f57f af07 	bpl.w	800584e <_scanf_float+0x66>
 8005a40:	f1b9 0f00 	cmp.w	r9, #0
 8005a44:	f000 80d9 	beq.w	8005bfa <_scanf_float+0x412>
 8005a48:	0591      	lsls	r1, r2, #22
 8005a4a:	bf58      	it	pl
 8005a4c:	9902      	ldrpl	r1, [sp, #8]
 8005a4e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005a52:	bf58      	it	pl
 8005a54:	eba9 0101 	subpl.w	r1, r9, r1
 8005a58:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005a5c:	f04f 0900 	mov.w	r9, #0
 8005a60:	bf58      	it	pl
 8005a62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005a66:	6022      	str	r2, [r4, #0]
 8005a68:	e789      	b.n	800597e <_scanf_float+0x196>
 8005a6a:	f04f 0a03 	mov.w	sl, #3
 8005a6e:	e786      	b.n	800597e <_scanf_float+0x196>
 8005a70:	4639      	mov	r1, r7
 8005a72:	4640      	mov	r0, r8
 8005a74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005a78:	4798      	blx	r3
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	f43f aeda 	beq.w	8005834 <_scanf_float+0x4c>
 8005a80:	e6e5      	b.n	800584e <_scanf_float+0x66>
 8005a82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a86:	463a      	mov	r2, r7
 8005a88:	4640      	mov	r0, r8
 8005a8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a8e:	4798      	blx	r3
 8005a90:	6923      	ldr	r3, [r4, #16]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	e6e7      	b.n	8005868 <_scanf_float+0x80>
 8005a98:	1e6b      	subs	r3, r5, #1
 8005a9a:	2b06      	cmp	r3, #6
 8005a9c:	d824      	bhi.n	8005ae8 <_scanf_float+0x300>
 8005a9e:	2d02      	cmp	r5, #2
 8005aa0:	d836      	bhi.n	8005b10 <_scanf_float+0x328>
 8005aa2:	9b01      	ldr	r3, [sp, #4]
 8005aa4:	429e      	cmp	r6, r3
 8005aa6:	f67f aee3 	bls.w	8005870 <_scanf_float+0x88>
 8005aaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005aae:	463a      	mov	r2, r7
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ab6:	4798      	blx	r3
 8005ab8:	6923      	ldr	r3, [r4, #16]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	6123      	str	r3, [r4, #16]
 8005abe:	e7f0      	b.n	8005aa2 <_scanf_float+0x2ba>
 8005ac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ac4:	463a      	mov	r2, r7
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005acc:	4798      	blx	r3
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005ad8:	fa5f fa8a 	uxtb.w	sl, sl
 8005adc:	f1ba 0f02 	cmp.w	sl, #2
 8005ae0:	d1ee      	bne.n	8005ac0 <_scanf_float+0x2d8>
 8005ae2:	3d03      	subs	r5, #3
 8005ae4:	b2ed      	uxtb	r5, r5
 8005ae6:	1b76      	subs	r6, r6, r5
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	05da      	lsls	r2, r3, #23
 8005aec:	d530      	bpl.n	8005b50 <_scanf_float+0x368>
 8005aee:	055b      	lsls	r3, r3, #21
 8005af0:	d511      	bpl.n	8005b16 <_scanf_float+0x32e>
 8005af2:	9b01      	ldr	r3, [sp, #4]
 8005af4:	429e      	cmp	r6, r3
 8005af6:	f67f aebb 	bls.w	8005870 <_scanf_float+0x88>
 8005afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005afe:	463a      	mov	r2, r7
 8005b00:	4640      	mov	r0, r8
 8005b02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b06:	4798      	blx	r3
 8005b08:	6923      	ldr	r3, [r4, #16]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	6123      	str	r3, [r4, #16]
 8005b0e:	e7f0      	b.n	8005af2 <_scanf_float+0x30a>
 8005b10:	46aa      	mov	sl, r5
 8005b12:	46b3      	mov	fp, r6
 8005b14:	e7de      	b.n	8005ad4 <_scanf_float+0x2ec>
 8005b16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005b1a:	6923      	ldr	r3, [r4, #16]
 8005b1c:	2965      	cmp	r1, #101	@ 0x65
 8005b1e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005b22:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8005b26:	6123      	str	r3, [r4, #16]
 8005b28:	d00c      	beq.n	8005b44 <_scanf_float+0x35c>
 8005b2a:	2945      	cmp	r1, #69	@ 0x45
 8005b2c:	d00a      	beq.n	8005b44 <_scanf_float+0x35c>
 8005b2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b32:	463a      	mov	r2, r7
 8005b34:	4640      	mov	r0, r8
 8005b36:	4798      	blx	r3
 8005b38:	6923      	ldr	r3, [r4, #16]
 8005b3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	1eb5      	subs	r5, r6, #2
 8005b42:	6123      	str	r3, [r4, #16]
 8005b44:	463a      	mov	r2, r7
 8005b46:	4640      	mov	r0, r8
 8005b48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b4c:	4798      	blx	r3
 8005b4e:	462e      	mov	r6, r5
 8005b50:	6822      	ldr	r2, [r4, #0]
 8005b52:	f012 0210 	ands.w	r2, r2, #16
 8005b56:	d001      	beq.n	8005b5c <_scanf_float+0x374>
 8005b58:	2000      	movs	r0, #0
 8005b5a:	e68a      	b.n	8005872 <_scanf_float+0x8a>
 8005b5c:	7032      	strb	r2, [r6, #0]
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b68:	d11c      	bne.n	8005ba4 <_scanf_float+0x3bc>
 8005b6a:	9b02      	ldr	r3, [sp, #8]
 8005b6c:	454b      	cmp	r3, r9
 8005b6e:	eba3 0209 	sub.w	r2, r3, r9
 8005b72:	d123      	bne.n	8005bbc <_scanf_float+0x3d4>
 8005b74:	2200      	movs	r2, #0
 8005b76:	4640      	mov	r0, r8
 8005b78:	9901      	ldr	r1, [sp, #4]
 8005b7a:	f002 fbed 	bl	8008358 <_strtod_r>
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	6825      	ldr	r5, [r4, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f015 0f02 	tst.w	r5, #2
 8005b88:	4606      	mov	r6, r0
 8005b8a:	460f      	mov	r7, r1
 8005b8c:	f103 0204 	add.w	r2, r3, #4
 8005b90:	d01f      	beq.n	8005bd2 <_scanf_float+0x3ea>
 8005b92:	9903      	ldr	r1, [sp, #12]
 8005b94:	600a      	str	r2, [r1, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	e9c3 6700 	strd	r6, r7, [r3]
 8005b9c:	68e3      	ldr	r3, [r4, #12]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	60e3      	str	r3, [r4, #12]
 8005ba2:	e7d9      	b.n	8005b58 <_scanf_float+0x370>
 8005ba4:	9b04      	ldr	r3, [sp, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0e4      	beq.n	8005b74 <_scanf_float+0x38c>
 8005baa:	9905      	ldr	r1, [sp, #20]
 8005bac:	230a      	movs	r3, #10
 8005bae:	4640      	mov	r0, r8
 8005bb0:	3101      	adds	r1, #1
 8005bb2:	f002 fc51 	bl	8008458 <_strtol_r>
 8005bb6:	9b04      	ldr	r3, [sp, #16]
 8005bb8:	9e05      	ldr	r6, [sp, #20]
 8005bba:	1ac2      	subs	r2, r0, r3
 8005bbc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005bc0:	429e      	cmp	r6, r3
 8005bc2:	bf28      	it	cs
 8005bc4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005bc8:	4630      	mov	r0, r6
 8005bca:	490d      	ldr	r1, [pc, #52]	@ (8005c00 <_scanf_float+0x418>)
 8005bcc:	f000 f8de 	bl	8005d8c <siprintf>
 8005bd0:	e7d0      	b.n	8005b74 <_scanf_float+0x38c>
 8005bd2:	076d      	lsls	r5, r5, #29
 8005bd4:	d4dd      	bmi.n	8005b92 <_scanf_float+0x3aa>
 8005bd6:	9d03      	ldr	r5, [sp, #12]
 8005bd8:	602a      	str	r2, [r5, #0]
 8005bda:	681d      	ldr	r5, [r3, #0]
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	f7fa ff14 	bl	8000a0c <__aeabi_dcmpun>
 8005be4:	b120      	cbz	r0, 8005bf0 <_scanf_float+0x408>
 8005be6:	4807      	ldr	r0, [pc, #28]	@ (8005c04 <_scanf_float+0x41c>)
 8005be8:	f000 f9c2 	bl	8005f70 <nanf>
 8005bec:	6028      	str	r0, [r5, #0]
 8005bee:	e7d5      	b.n	8005b9c <_scanf_float+0x3b4>
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	f7fa ff68 	bl	8000ac8 <__aeabi_d2f>
 8005bf8:	e7f8      	b.n	8005bec <_scanf_float+0x404>
 8005bfa:	f04f 0900 	mov.w	r9, #0
 8005bfe:	e62d      	b.n	800585c <_scanf_float+0x74>
 8005c00:	0800976f 	.word	0x0800976f
 8005c04:	08009a04 	.word	0x08009a04

08005c08 <std>:
 8005c08:	2300      	movs	r3, #0
 8005c0a:	b510      	push	{r4, lr}
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8005c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c16:	6083      	str	r3, [r0, #8]
 8005c18:	8181      	strh	r1, [r0, #12]
 8005c1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c1c:	81c2      	strh	r2, [r0, #14]
 8005c1e:	6183      	str	r3, [r0, #24]
 8005c20:	4619      	mov	r1, r3
 8005c22:	2208      	movs	r2, #8
 8005c24:	305c      	adds	r0, #92	@ 0x5c
 8005c26:	f000 f914 	bl	8005e52 <memset>
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c60 <std+0x58>)
 8005c2c:	6224      	str	r4, [r4, #32]
 8005c2e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c30:	4b0c      	ldr	r3, [pc, #48]	@ (8005c64 <std+0x5c>)
 8005c32:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c34:	4b0c      	ldr	r3, [pc, #48]	@ (8005c68 <std+0x60>)
 8005c36:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c38:	4b0c      	ldr	r3, [pc, #48]	@ (8005c6c <std+0x64>)
 8005c3a:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c70 <std+0x68>)
 8005c3e:	429c      	cmp	r4, r3
 8005c40:	d006      	beq.n	8005c50 <std+0x48>
 8005c42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c46:	4294      	cmp	r4, r2
 8005c48:	d002      	beq.n	8005c50 <std+0x48>
 8005c4a:	33d0      	adds	r3, #208	@ 0xd0
 8005c4c:	429c      	cmp	r4, r3
 8005c4e:	d105      	bne.n	8005c5c <std+0x54>
 8005c50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c58:	f000 b978 	b.w	8005f4c <__retarget_lock_init_recursive>
 8005c5c:	bd10      	pop	{r4, pc}
 8005c5e:	bf00      	nop
 8005c60:	08005dcd 	.word	0x08005dcd
 8005c64:	08005def 	.word	0x08005def
 8005c68:	08005e27 	.word	0x08005e27
 8005c6c:	08005e4b 	.word	0x08005e4b
 8005c70:	20000838 	.word	0x20000838

08005c74 <stdio_exit_handler>:
 8005c74:	4a02      	ldr	r2, [pc, #8]	@ (8005c80 <stdio_exit_handler+0xc>)
 8005c76:	4903      	ldr	r1, [pc, #12]	@ (8005c84 <stdio_exit_handler+0x10>)
 8005c78:	4803      	ldr	r0, [pc, #12]	@ (8005c88 <stdio_exit_handler+0x14>)
 8005c7a:	f000 b869 	b.w	8005d50 <_fwalk_sglue>
 8005c7e:	bf00      	nop
 8005c80:	2000000c 	.word	0x2000000c
 8005c84:	0800880d 	.word	0x0800880d
 8005c88:	2000001c 	.word	0x2000001c

08005c8c <cleanup_stdio>:
 8005c8c:	6841      	ldr	r1, [r0, #4]
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc0 <cleanup_stdio+0x34>)
 8005c90:	b510      	push	{r4, lr}
 8005c92:	4299      	cmp	r1, r3
 8005c94:	4604      	mov	r4, r0
 8005c96:	d001      	beq.n	8005c9c <cleanup_stdio+0x10>
 8005c98:	f002 fdb8 	bl	800880c <_fflush_r>
 8005c9c:	68a1      	ldr	r1, [r4, #8]
 8005c9e:	4b09      	ldr	r3, [pc, #36]	@ (8005cc4 <cleanup_stdio+0x38>)
 8005ca0:	4299      	cmp	r1, r3
 8005ca2:	d002      	beq.n	8005caa <cleanup_stdio+0x1e>
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f002 fdb1 	bl	800880c <_fflush_r>
 8005caa:	68e1      	ldr	r1, [r4, #12]
 8005cac:	4b06      	ldr	r3, [pc, #24]	@ (8005cc8 <cleanup_stdio+0x3c>)
 8005cae:	4299      	cmp	r1, r3
 8005cb0:	d004      	beq.n	8005cbc <cleanup_stdio+0x30>
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb8:	f002 bda8 	b.w	800880c <_fflush_r>
 8005cbc:	bd10      	pop	{r4, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20000838 	.word	0x20000838
 8005cc4:	200008a0 	.word	0x200008a0
 8005cc8:	20000908 	.word	0x20000908

08005ccc <global_stdio_init.part.0>:
 8005ccc:	b510      	push	{r4, lr}
 8005cce:	4b0b      	ldr	r3, [pc, #44]	@ (8005cfc <global_stdio_init.part.0+0x30>)
 8005cd0:	4c0b      	ldr	r4, [pc, #44]	@ (8005d00 <global_stdio_init.part.0+0x34>)
 8005cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8005d04 <global_stdio_init.part.0+0x38>)
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	2104      	movs	r1, #4
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f7ff ff94 	bl	8005c08 <std>
 8005ce0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	2109      	movs	r1, #9
 8005ce8:	f7ff ff8e 	bl	8005c08 <std>
 8005cec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cf6:	2112      	movs	r1, #18
 8005cf8:	f7ff bf86 	b.w	8005c08 <std>
 8005cfc:	20000970 	.word	0x20000970
 8005d00:	20000838 	.word	0x20000838
 8005d04:	08005c75 	.word	0x08005c75

08005d08 <__sfp_lock_acquire>:
 8005d08:	4801      	ldr	r0, [pc, #4]	@ (8005d10 <__sfp_lock_acquire+0x8>)
 8005d0a:	f000 b920 	b.w	8005f4e <__retarget_lock_acquire_recursive>
 8005d0e:	bf00      	nop
 8005d10:	20000979 	.word	0x20000979

08005d14 <__sfp_lock_release>:
 8005d14:	4801      	ldr	r0, [pc, #4]	@ (8005d1c <__sfp_lock_release+0x8>)
 8005d16:	f000 b91b 	b.w	8005f50 <__retarget_lock_release_recursive>
 8005d1a:	bf00      	nop
 8005d1c:	20000979 	.word	0x20000979

08005d20 <__sinit>:
 8005d20:	b510      	push	{r4, lr}
 8005d22:	4604      	mov	r4, r0
 8005d24:	f7ff fff0 	bl	8005d08 <__sfp_lock_acquire>
 8005d28:	6a23      	ldr	r3, [r4, #32]
 8005d2a:	b11b      	cbz	r3, 8005d34 <__sinit+0x14>
 8005d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d30:	f7ff bff0 	b.w	8005d14 <__sfp_lock_release>
 8005d34:	4b04      	ldr	r3, [pc, #16]	@ (8005d48 <__sinit+0x28>)
 8005d36:	6223      	str	r3, [r4, #32]
 8005d38:	4b04      	ldr	r3, [pc, #16]	@ (8005d4c <__sinit+0x2c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1f5      	bne.n	8005d2c <__sinit+0xc>
 8005d40:	f7ff ffc4 	bl	8005ccc <global_stdio_init.part.0>
 8005d44:	e7f2      	b.n	8005d2c <__sinit+0xc>
 8005d46:	bf00      	nop
 8005d48:	08005c8d 	.word	0x08005c8d
 8005d4c:	20000970 	.word	0x20000970

08005d50 <_fwalk_sglue>:
 8005d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d54:	4607      	mov	r7, r0
 8005d56:	4688      	mov	r8, r1
 8005d58:	4614      	mov	r4, r2
 8005d5a:	2600      	movs	r6, #0
 8005d5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d60:	f1b9 0901 	subs.w	r9, r9, #1
 8005d64:	d505      	bpl.n	8005d72 <_fwalk_sglue+0x22>
 8005d66:	6824      	ldr	r4, [r4, #0]
 8005d68:	2c00      	cmp	r4, #0
 8005d6a:	d1f7      	bne.n	8005d5c <_fwalk_sglue+0xc>
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d72:	89ab      	ldrh	r3, [r5, #12]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d907      	bls.n	8005d88 <_fwalk_sglue+0x38>
 8005d78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	d003      	beq.n	8005d88 <_fwalk_sglue+0x38>
 8005d80:	4629      	mov	r1, r5
 8005d82:	4638      	mov	r0, r7
 8005d84:	47c0      	blx	r8
 8005d86:	4306      	orrs	r6, r0
 8005d88:	3568      	adds	r5, #104	@ 0x68
 8005d8a:	e7e9      	b.n	8005d60 <_fwalk_sglue+0x10>

08005d8c <siprintf>:
 8005d8c:	b40e      	push	{r1, r2, r3}
 8005d8e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d92:	b500      	push	{lr}
 8005d94:	b09c      	sub	sp, #112	@ 0x70
 8005d96:	ab1d      	add	r3, sp, #116	@ 0x74
 8005d98:	9002      	str	r0, [sp, #8]
 8005d9a:	9006      	str	r0, [sp, #24]
 8005d9c:	9107      	str	r1, [sp, #28]
 8005d9e:	9104      	str	r1, [sp, #16]
 8005da0:	4808      	ldr	r0, [pc, #32]	@ (8005dc4 <siprintf+0x38>)
 8005da2:	4909      	ldr	r1, [pc, #36]	@ (8005dc8 <siprintf+0x3c>)
 8005da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005da8:	9105      	str	r1, [sp, #20]
 8005daa:	6800      	ldr	r0, [r0, #0]
 8005dac:	a902      	add	r1, sp, #8
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	f002 fbb0 	bl	8008514 <_svfiprintf_r>
 8005db4:	2200      	movs	r2, #0
 8005db6:	9b02      	ldr	r3, [sp, #8]
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	b01c      	add	sp, #112	@ 0x70
 8005dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dc0:	b003      	add	sp, #12
 8005dc2:	4770      	bx	lr
 8005dc4:	20000018 	.word	0x20000018
 8005dc8:	ffff0208 	.word	0xffff0208

08005dcc <__sread>:
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	460c      	mov	r4, r1
 8005dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd4:	f000 f86c 	bl	8005eb0 <_read_r>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	bfab      	itete	ge
 8005ddc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005dde:	89a3      	ldrhlt	r3, [r4, #12]
 8005de0:	181b      	addge	r3, r3, r0
 8005de2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005de6:	bfac      	ite	ge
 8005de8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005dea:	81a3      	strhlt	r3, [r4, #12]
 8005dec:	bd10      	pop	{r4, pc}

08005dee <__swrite>:
 8005dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df2:	461f      	mov	r7, r3
 8005df4:	898b      	ldrh	r3, [r1, #12]
 8005df6:	4605      	mov	r5, r0
 8005df8:	05db      	lsls	r3, r3, #23
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	4616      	mov	r6, r2
 8005dfe:	d505      	bpl.n	8005e0c <__swrite+0x1e>
 8005e00:	2302      	movs	r3, #2
 8005e02:	2200      	movs	r2, #0
 8005e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e08:	f000 f840 	bl	8005e8c <_lseek_r>
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	4632      	mov	r2, r6
 8005e10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e14:	81a3      	strh	r3, [r4, #12]
 8005e16:	4628      	mov	r0, r5
 8005e18:	463b      	mov	r3, r7
 8005e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e22:	f000 b857 	b.w	8005ed4 <_write_r>

08005e26 <__sseek>:
 8005e26:	b510      	push	{r4, lr}
 8005e28:	460c      	mov	r4, r1
 8005e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e2e:	f000 f82d 	bl	8005e8c <_lseek_r>
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	89a3      	ldrh	r3, [r4, #12]
 8005e36:	bf15      	itete	ne
 8005e38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e42:	81a3      	strheq	r3, [r4, #12]
 8005e44:	bf18      	it	ne
 8005e46:	81a3      	strhne	r3, [r4, #12]
 8005e48:	bd10      	pop	{r4, pc}

08005e4a <__sclose>:
 8005e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e4e:	f000 b80d 	b.w	8005e6c <_close_r>

08005e52 <memset>:
 8005e52:	4603      	mov	r3, r0
 8005e54:	4402      	add	r2, r0
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d100      	bne.n	8005e5c <memset+0xa>
 8005e5a:	4770      	bx	lr
 8005e5c:	f803 1b01 	strb.w	r1, [r3], #1
 8005e60:	e7f9      	b.n	8005e56 <memset+0x4>
	...

08005e64 <_localeconv_r>:
 8005e64:	4800      	ldr	r0, [pc, #0]	@ (8005e68 <_localeconv_r+0x4>)
 8005e66:	4770      	bx	lr
 8005e68:	20000158 	.word	0x20000158

08005e6c <_close_r>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	2300      	movs	r3, #0
 8005e70:	4d05      	ldr	r5, [pc, #20]	@ (8005e88 <_close_r+0x1c>)
 8005e72:	4604      	mov	r4, r0
 8005e74:	4608      	mov	r0, r1
 8005e76:	602b      	str	r3, [r5, #0]
 8005e78:	f7fb ffdb 	bl	8001e32 <_close>
 8005e7c:	1c43      	adds	r3, r0, #1
 8005e7e:	d102      	bne.n	8005e86 <_close_r+0x1a>
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	b103      	cbz	r3, 8005e86 <_close_r+0x1a>
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	bd38      	pop	{r3, r4, r5, pc}
 8005e88:	20000974 	.word	0x20000974

08005e8c <_lseek_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	4604      	mov	r4, r0
 8005e90:	4608      	mov	r0, r1
 8005e92:	4611      	mov	r1, r2
 8005e94:	2200      	movs	r2, #0
 8005e96:	4d05      	ldr	r5, [pc, #20]	@ (8005eac <_lseek_r+0x20>)
 8005e98:	602a      	str	r2, [r5, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f7fb ffed 	bl	8001e7a <_lseek>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d102      	bne.n	8005eaa <_lseek_r+0x1e>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	b103      	cbz	r3, 8005eaa <_lseek_r+0x1e>
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	bd38      	pop	{r3, r4, r5, pc}
 8005eac:	20000974 	.word	0x20000974

08005eb0 <_read_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	4608      	mov	r0, r1
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4d05      	ldr	r5, [pc, #20]	@ (8005ed0 <_read_r+0x20>)
 8005ebc:	602a      	str	r2, [r5, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f7fb ff7e 	bl	8001dc0 <_read>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	d102      	bne.n	8005ece <_read_r+0x1e>
 8005ec8:	682b      	ldr	r3, [r5, #0]
 8005eca:	b103      	cbz	r3, 8005ece <_read_r+0x1e>
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	20000974 	.word	0x20000974

08005ed4 <_write_r>:
 8005ed4:	b538      	push	{r3, r4, r5, lr}
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4608      	mov	r0, r1
 8005eda:	4611      	mov	r1, r2
 8005edc:	2200      	movs	r2, #0
 8005ede:	4d05      	ldr	r5, [pc, #20]	@ (8005ef4 <_write_r+0x20>)
 8005ee0:	602a      	str	r2, [r5, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f7fb ff89 	bl	8001dfa <_write>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d102      	bne.n	8005ef2 <_write_r+0x1e>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	b103      	cbz	r3, 8005ef2 <_write_r+0x1e>
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	20000974 	.word	0x20000974

08005ef8 <__errno>:
 8005ef8:	4b01      	ldr	r3, [pc, #4]	@ (8005f00 <__errno+0x8>)
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20000018 	.word	0x20000018

08005f04 <__libc_init_array>:
 8005f04:	b570      	push	{r4, r5, r6, lr}
 8005f06:	2600      	movs	r6, #0
 8005f08:	4d0c      	ldr	r5, [pc, #48]	@ (8005f3c <__libc_init_array+0x38>)
 8005f0a:	4c0d      	ldr	r4, [pc, #52]	@ (8005f40 <__libc_init_array+0x3c>)
 8005f0c:	1b64      	subs	r4, r4, r5
 8005f0e:	10a4      	asrs	r4, r4, #2
 8005f10:	42a6      	cmp	r6, r4
 8005f12:	d109      	bne.n	8005f28 <__libc_init_array+0x24>
 8005f14:	f003 fb66 	bl	80095e4 <_init>
 8005f18:	2600      	movs	r6, #0
 8005f1a:	4d0a      	ldr	r5, [pc, #40]	@ (8005f44 <__libc_init_array+0x40>)
 8005f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8005f48 <__libc_init_array+0x44>)
 8005f1e:	1b64      	subs	r4, r4, r5
 8005f20:	10a4      	asrs	r4, r4, #2
 8005f22:	42a6      	cmp	r6, r4
 8005f24:	d105      	bne.n	8005f32 <__libc_init_array+0x2e>
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
 8005f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f2c:	4798      	blx	r3
 8005f2e:	3601      	adds	r6, #1
 8005f30:	e7ee      	b.n	8005f10 <__libc_init_array+0xc>
 8005f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f36:	4798      	blx	r3
 8005f38:	3601      	adds	r6, #1
 8005f3a:	e7f2      	b.n	8005f22 <__libc_init_array+0x1e>
 8005f3c:	08009a70 	.word	0x08009a70
 8005f40:	08009a70 	.word	0x08009a70
 8005f44:	08009a70 	.word	0x08009a70
 8005f48:	08009a74 	.word	0x08009a74

08005f4c <__retarget_lock_init_recursive>:
 8005f4c:	4770      	bx	lr

08005f4e <__retarget_lock_acquire_recursive>:
 8005f4e:	4770      	bx	lr

08005f50 <__retarget_lock_release_recursive>:
 8005f50:	4770      	bx	lr

08005f52 <memchr>:
 8005f52:	4603      	mov	r3, r0
 8005f54:	b510      	push	{r4, lr}
 8005f56:	b2c9      	uxtb	r1, r1
 8005f58:	4402      	add	r2, r0
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	d101      	bne.n	8005f64 <memchr+0x12>
 8005f60:	2000      	movs	r0, #0
 8005f62:	e003      	b.n	8005f6c <memchr+0x1a>
 8005f64:	7804      	ldrb	r4, [r0, #0]
 8005f66:	3301      	adds	r3, #1
 8005f68:	428c      	cmp	r4, r1
 8005f6a:	d1f6      	bne.n	8005f5a <memchr+0x8>
 8005f6c:	bd10      	pop	{r4, pc}
	...

08005f70 <nanf>:
 8005f70:	4800      	ldr	r0, [pc, #0]	@ (8005f74 <nanf+0x4>)
 8005f72:	4770      	bx	lr
 8005f74:	7fc00000 	.word	0x7fc00000

08005f78 <quorem>:
 8005f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7c:	6903      	ldr	r3, [r0, #16]
 8005f7e:	690c      	ldr	r4, [r1, #16]
 8005f80:	4607      	mov	r7, r0
 8005f82:	42a3      	cmp	r3, r4
 8005f84:	db7e      	blt.n	8006084 <quorem+0x10c>
 8005f86:	3c01      	subs	r4, #1
 8005f88:	00a3      	lsls	r3, r4, #2
 8005f8a:	f100 0514 	add.w	r5, r0, #20
 8005f8e:	f101 0814 	add.w	r8, r1, #20
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	fbb2 f6f3 	udiv	r6, r2, r3
 8005faa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fae:	d32e      	bcc.n	800600e <quorem+0x96>
 8005fb0:	f04f 0a00 	mov.w	sl, #0
 8005fb4:	46c4      	mov	ip, r8
 8005fb6:	46ae      	mov	lr, r5
 8005fb8:	46d3      	mov	fp, sl
 8005fba:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005fbe:	b298      	uxth	r0, r3
 8005fc0:	fb06 a000 	mla	r0, r6, r0, sl
 8005fc4:	0c1b      	lsrs	r3, r3, #16
 8005fc6:	0c02      	lsrs	r2, r0, #16
 8005fc8:	fb06 2303 	mla	r3, r6, r3, r2
 8005fcc:	f8de 2000 	ldr.w	r2, [lr]
 8005fd0:	b280      	uxth	r0, r0
 8005fd2:	b292      	uxth	r2, r2
 8005fd4:	1a12      	subs	r2, r2, r0
 8005fd6:	445a      	add	r2, fp
 8005fd8:	f8de 0000 	ldr.w	r0, [lr]
 8005fdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005fe6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005fea:	b292      	uxth	r2, r2
 8005fec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005ff0:	45e1      	cmp	r9, ip
 8005ff2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005ff6:	f84e 2b04 	str.w	r2, [lr], #4
 8005ffa:	d2de      	bcs.n	8005fba <quorem+0x42>
 8005ffc:	9b00      	ldr	r3, [sp, #0]
 8005ffe:	58eb      	ldr	r3, [r5, r3]
 8006000:	b92b      	cbnz	r3, 800600e <quorem+0x96>
 8006002:	9b01      	ldr	r3, [sp, #4]
 8006004:	3b04      	subs	r3, #4
 8006006:	429d      	cmp	r5, r3
 8006008:	461a      	mov	r2, r3
 800600a:	d32f      	bcc.n	800606c <quorem+0xf4>
 800600c:	613c      	str	r4, [r7, #16]
 800600e:	4638      	mov	r0, r7
 8006010:	f001 f9c2 	bl	8007398 <__mcmp>
 8006014:	2800      	cmp	r0, #0
 8006016:	db25      	blt.n	8006064 <quorem+0xec>
 8006018:	4629      	mov	r1, r5
 800601a:	2000      	movs	r0, #0
 800601c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006020:	f8d1 c000 	ldr.w	ip, [r1]
 8006024:	fa1f fe82 	uxth.w	lr, r2
 8006028:	fa1f f38c 	uxth.w	r3, ip
 800602c:	eba3 030e 	sub.w	r3, r3, lr
 8006030:	4403      	add	r3, r0
 8006032:	0c12      	lsrs	r2, r2, #16
 8006034:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006038:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006042:	45c1      	cmp	r9, r8
 8006044:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006048:	f841 3b04 	str.w	r3, [r1], #4
 800604c:	d2e6      	bcs.n	800601c <quorem+0xa4>
 800604e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006052:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006056:	b922      	cbnz	r2, 8006062 <quorem+0xea>
 8006058:	3b04      	subs	r3, #4
 800605a:	429d      	cmp	r5, r3
 800605c:	461a      	mov	r2, r3
 800605e:	d30b      	bcc.n	8006078 <quorem+0x100>
 8006060:	613c      	str	r4, [r7, #16]
 8006062:	3601      	adds	r6, #1
 8006064:	4630      	mov	r0, r6
 8006066:	b003      	add	sp, #12
 8006068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	3b04      	subs	r3, #4
 8006070:	2a00      	cmp	r2, #0
 8006072:	d1cb      	bne.n	800600c <quorem+0x94>
 8006074:	3c01      	subs	r4, #1
 8006076:	e7c6      	b.n	8006006 <quorem+0x8e>
 8006078:	6812      	ldr	r2, [r2, #0]
 800607a:	3b04      	subs	r3, #4
 800607c:	2a00      	cmp	r2, #0
 800607e:	d1ef      	bne.n	8006060 <quorem+0xe8>
 8006080:	3c01      	subs	r4, #1
 8006082:	e7ea      	b.n	800605a <quorem+0xe2>
 8006084:	2000      	movs	r0, #0
 8006086:	e7ee      	b.n	8006066 <quorem+0xee>

08006088 <_dtoa_r>:
 8006088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608c:	4614      	mov	r4, r2
 800608e:	461d      	mov	r5, r3
 8006090:	69c7      	ldr	r7, [r0, #28]
 8006092:	b097      	sub	sp, #92	@ 0x5c
 8006094:	4683      	mov	fp, r0
 8006096:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800609a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800609c:	b97f      	cbnz	r7, 80060be <_dtoa_r+0x36>
 800609e:	2010      	movs	r0, #16
 80060a0:	f000 fe02 	bl	8006ca8 <malloc>
 80060a4:	4602      	mov	r2, r0
 80060a6:	f8cb 001c 	str.w	r0, [fp, #28]
 80060aa:	b920      	cbnz	r0, 80060b6 <_dtoa_r+0x2e>
 80060ac:	21ef      	movs	r1, #239	@ 0xef
 80060ae:	4ba8      	ldr	r3, [pc, #672]	@ (8006350 <_dtoa_r+0x2c8>)
 80060b0:	48a8      	ldr	r0, [pc, #672]	@ (8006354 <_dtoa_r+0x2cc>)
 80060b2:	f002 fc23 	bl	80088fc <__assert_func>
 80060b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80060ba:	6007      	str	r7, [r0, #0]
 80060bc:	60c7      	str	r7, [r0, #12]
 80060be:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060c2:	6819      	ldr	r1, [r3, #0]
 80060c4:	b159      	cbz	r1, 80060de <_dtoa_r+0x56>
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	2301      	movs	r3, #1
 80060ca:	4093      	lsls	r3, r2
 80060cc:	604a      	str	r2, [r1, #4]
 80060ce:	608b      	str	r3, [r1, #8]
 80060d0:	4658      	mov	r0, fp
 80060d2:	f000 fedf 	bl	8006e94 <_Bfree>
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	1e2b      	subs	r3, r5, #0
 80060e0:	bfaf      	iteee	ge
 80060e2:	2300      	movge	r3, #0
 80060e4:	2201      	movlt	r2, #1
 80060e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80060ea:	9303      	strlt	r3, [sp, #12]
 80060ec:	bfa8      	it	ge
 80060ee:	6033      	strge	r3, [r6, #0]
 80060f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80060f4:	4b98      	ldr	r3, [pc, #608]	@ (8006358 <_dtoa_r+0x2d0>)
 80060f6:	bfb8      	it	lt
 80060f8:	6032      	strlt	r2, [r6, #0]
 80060fa:	ea33 0308 	bics.w	r3, r3, r8
 80060fe:	d112      	bne.n	8006126 <_dtoa_r+0x9e>
 8006100:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006104:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800610c:	4323      	orrs	r3, r4
 800610e:	f000 8550 	beq.w	8006bb2 <_dtoa_r+0xb2a>
 8006112:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006114:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800635c <_dtoa_r+0x2d4>
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8552 	beq.w	8006bc2 <_dtoa_r+0xb3a>
 800611e:	f10a 0303 	add.w	r3, sl, #3
 8006122:	f000 bd4c 	b.w	8006bbe <_dtoa_r+0xb36>
 8006126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800612a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800612e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006132:	2200      	movs	r2, #0
 8006134:	2300      	movs	r3, #0
 8006136:	f7fa fc37 	bl	80009a8 <__aeabi_dcmpeq>
 800613a:	4607      	mov	r7, r0
 800613c:	b158      	cbz	r0, 8006156 <_dtoa_r+0xce>
 800613e:	2301      	movs	r3, #1
 8006140:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006146:	b113      	cbz	r3, 800614e <_dtoa_r+0xc6>
 8006148:	4b85      	ldr	r3, [pc, #532]	@ (8006360 <_dtoa_r+0x2d8>)
 800614a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006364 <_dtoa_r+0x2dc>
 8006152:	f000 bd36 	b.w	8006bc2 <_dtoa_r+0xb3a>
 8006156:	ab14      	add	r3, sp, #80	@ 0x50
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	ab15      	add	r3, sp, #84	@ 0x54
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	4658      	mov	r0, fp
 8006160:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006164:	f001 fa30 	bl	80075c8 <__d2b>
 8006168:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800616c:	4681      	mov	r9, r0
 800616e:	2e00      	cmp	r6, #0
 8006170:	d077      	beq.n	8006262 <_dtoa_r+0x1da>
 8006172:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006176:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006178:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800617c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006180:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006184:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006188:	9712      	str	r7, [sp, #72]	@ 0x48
 800618a:	4619      	mov	r1, r3
 800618c:	2200      	movs	r2, #0
 800618e:	4b76      	ldr	r3, [pc, #472]	@ (8006368 <_dtoa_r+0x2e0>)
 8006190:	f7f9 ffea 	bl	8000168 <__aeabi_dsub>
 8006194:	a368      	add	r3, pc, #416	@ (adr r3, 8006338 <_dtoa_r+0x2b0>)
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	f7fa f99d 	bl	80004d8 <__aeabi_dmul>
 800619e:	a368      	add	r3, pc, #416	@ (adr r3, 8006340 <_dtoa_r+0x2b8>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f7f9 ffe2 	bl	800016c <__adddf3>
 80061a8:	4604      	mov	r4, r0
 80061aa:	4630      	mov	r0, r6
 80061ac:	460d      	mov	r5, r1
 80061ae:	f7fa f929 	bl	8000404 <__aeabi_i2d>
 80061b2:	a365      	add	r3, pc, #404	@ (adr r3, 8006348 <_dtoa_r+0x2c0>)
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f7fa f98e 	bl	80004d8 <__aeabi_dmul>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4620      	mov	r0, r4
 80061c2:	4629      	mov	r1, r5
 80061c4:	f7f9 ffd2 	bl	800016c <__adddf3>
 80061c8:	4604      	mov	r4, r0
 80061ca:	460d      	mov	r5, r1
 80061cc:	f7fa fc34 	bl	8000a38 <__aeabi_d2iz>
 80061d0:	2200      	movs	r2, #0
 80061d2:	4607      	mov	r7, r0
 80061d4:	2300      	movs	r3, #0
 80061d6:	4620      	mov	r0, r4
 80061d8:	4629      	mov	r1, r5
 80061da:	f7fa fbef 	bl	80009bc <__aeabi_dcmplt>
 80061de:	b140      	cbz	r0, 80061f2 <_dtoa_r+0x16a>
 80061e0:	4638      	mov	r0, r7
 80061e2:	f7fa f90f 	bl	8000404 <__aeabi_i2d>
 80061e6:	4622      	mov	r2, r4
 80061e8:	462b      	mov	r3, r5
 80061ea:	f7fa fbdd 	bl	80009a8 <__aeabi_dcmpeq>
 80061ee:	b900      	cbnz	r0, 80061f2 <_dtoa_r+0x16a>
 80061f0:	3f01      	subs	r7, #1
 80061f2:	2f16      	cmp	r7, #22
 80061f4:	d853      	bhi.n	800629e <_dtoa_r+0x216>
 80061f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061fa:	4b5c      	ldr	r3, [pc, #368]	@ (800636c <_dtoa_r+0x2e4>)
 80061fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	f7fa fbda 	bl	80009bc <__aeabi_dcmplt>
 8006208:	2800      	cmp	r0, #0
 800620a:	d04a      	beq.n	80062a2 <_dtoa_r+0x21a>
 800620c:	2300      	movs	r3, #0
 800620e:	3f01      	subs	r7, #1
 8006210:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006212:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006214:	1b9b      	subs	r3, r3, r6
 8006216:	1e5a      	subs	r2, r3, #1
 8006218:	bf46      	itte	mi
 800621a:	f1c3 0801 	rsbmi	r8, r3, #1
 800621e:	2300      	movmi	r3, #0
 8006220:	f04f 0800 	movpl.w	r8, #0
 8006224:	9209      	str	r2, [sp, #36]	@ 0x24
 8006226:	bf48      	it	mi
 8006228:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800622a:	2f00      	cmp	r7, #0
 800622c:	db3b      	blt.n	80062a6 <_dtoa_r+0x21e>
 800622e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006230:	970e      	str	r7, [sp, #56]	@ 0x38
 8006232:	443b      	add	r3, r7
 8006234:	9309      	str	r3, [sp, #36]	@ 0x24
 8006236:	2300      	movs	r3, #0
 8006238:	930a      	str	r3, [sp, #40]	@ 0x28
 800623a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800623c:	2b09      	cmp	r3, #9
 800623e:	d866      	bhi.n	800630e <_dtoa_r+0x286>
 8006240:	2b05      	cmp	r3, #5
 8006242:	bfc4      	itt	gt
 8006244:	3b04      	subgt	r3, #4
 8006246:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006248:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800624a:	bfc8      	it	gt
 800624c:	2400      	movgt	r4, #0
 800624e:	f1a3 0302 	sub.w	r3, r3, #2
 8006252:	bfd8      	it	le
 8006254:	2401      	movle	r4, #1
 8006256:	2b03      	cmp	r3, #3
 8006258:	d864      	bhi.n	8006324 <_dtoa_r+0x29c>
 800625a:	e8df f003 	tbb	[pc, r3]
 800625e:	382b      	.short	0x382b
 8006260:	5636      	.short	0x5636
 8006262:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006266:	441e      	add	r6, r3
 8006268:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800626c:	2b20      	cmp	r3, #32
 800626e:	bfc1      	itttt	gt
 8006270:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006274:	fa08 f803 	lslgt.w	r8, r8, r3
 8006278:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800627c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006280:	bfd6      	itet	le
 8006282:	f1c3 0320 	rsble	r3, r3, #32
 8006286:	ea48 0003 	orrgt.w	r0, r8, r3
 800628a:	fa04 f003 	lslle.w	r0, r4, r3
 800628e:	f7fa f8a9 	bl	80003e4 <__aeabi_ui2d>
 8006292:	2201      	movs	r2, #1
 8006294:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006298:	3e01      	subs	r6, #1
 800629a:	9212      	str	r2, [sp, #72]	@ 0x48
 800629c:	e775      	b.n	800618a <_dtoa_r+0x102>
 800629e:	2301      	movs	r3, #1
 80062a0:	e7b6      	b.n	8006210 <_dtoa_r+0x188>
 80062a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80062a4:	e7b5      	b.n	8006212 <_dtoa_r+0x18a>
 80062a6:	427b      	negs	r3, r7
 80062a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80062aa:	2300      	movs	r3, #0
 80062ac:	eba8 0807 	sub.w	r8, r8, r7
 80062b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80062b2:	e7c2      	b.n	800623a <_dtoa_r+0x1b2>
 80062b4:	2300      	movs	r3, #0
 80062b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	dc35      	bgt.n	800632a <_dtoa_r+0x2a2>
 80062be:	2301      	movs	r3, #1
 80062c0:	461a      	mov	r2, r3
 80062c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80062c6:	9221      	str	r2, [sp, #132]	@ 0x84
 80062c8:	e00b      	b.n	80062e2 <_dtoa_r+0x25a>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e7f3      	b.n	80062b6 <_dtoa_r+0x22e>
 80062ce:	2300      	movs	r3, #0
 80062d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	9308      	str	r3, [sp, #32]
 80062d8:	3301      	adds	r3, #1
 80062da:	2b01      	cmp	r3, #1
 80062dc:	9307      	str	r3, [sp, #28]
 80062de:	bfb8      	it	lt
 80062e0:	2301      	movlt	r3, #1
 80062e2:	2100      	movs	r1, #0
 80062e4:	2204      	movs	r2, #4
 80062e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80062ea:	f102 0514 	add.w	r5, r2, #20
 80062ee:	429d      	cmp	r5, r3
 80062f0:	d91f      	bls.n	8006332 <_dtoa_r+0x2aa>
 80062f2:	6041      	str	r1, [r0, #4]
 80062f4:	4658      	mov	r0, fp
 80062f6:	f000 fd8d 	bl	8006e14 <_Balloc>
 80062fa:	4682      	mov	sl, r0
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d139      	bne.n	8006374 <_dtoa_r+0x2ec>
 8006300:	4602      	mov	r2, r0
 8006302:	f240 11af 	movw	r1, #431	@ 0x1af
 8006306:	4b1a      	ldr	r3, [pc, #104]	@ (8006370 <_dtoa_r+0x2e8>)
 8006308:	e6d2      	b.n	80060b0 <_dtoa_r+0x28>
 800630a:	2301      	movs	r3, #1
 800630c:	e7e0      	b.n	80062d0 <_dtoa_r+0x248>
 800630e:	2401      	movs	r4, #1
 8006310:	2300      	movs	r3, #0
 8006312:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006314:	9320      	str	r3, [sp, #128]	@ 0x80
 8006316:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800631a:	2200      	movs	r2, #0
 800631c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006320:	2312      	movs	r3, #18
 8006322:	e7d0      	b.n	80062c6 <_dtoa_r+0x23e>
 8006324:	2301      	movs	r3, #1
 8006326:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006328:	e7f5      	b.n	8006316 <_dtoa_r+0x28e>
 800632a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800632c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006330:	e7d7      	b.n	80062e2 <_dtoa_r+0x25a>
 8006332:	3101      	adds	r1, #1
 8006334:	0052      	lsls	r2, r2, #1
 8006336:	e7d8      	b.n	80062ea <_dtoa_r+0x262>
 8006338:	636f4361 	.word	0x636f4361
 800633c:	3fd287a7 	.word	0x3fd287a7
 8006340:	8b60c8b3 	.word	0x8b60c8b3
 8006344:	3fc68a28 	.word	0x3fc68a28
 8006348:	509f79fb 	.word	0x509f79fb
 800634c:	3fd34413 	.word	0x3fd34413
 8006350:	08009781 	.word	0x08009781
 8006354:	08009798 	.word	0x08009798
 8006358:	7ff00000 	.word	0x7ff00000
 800635c:	0800977d 	.word	0x0800977d
 8006360:	0800974c 	.word	0x0800974c
 8006364:	0800974b 	.word	0x0800974b
 8006368:	3ff80000 	.word	0x3ff80000
 800636c:	08009890 	.word	0x08009890
 8006370:	080097f0 	.word	0x080097f0
 8006374:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006378:	6018      	str	r0, [r3, #0]
 800637a:	9b07      	ldr	r3, [sp, #28]
 800637c:	2b0e      	cmp	r3, #14
 800637e:	f200 80a4 	bhi.w	80064ca <_dtoa_r+0x442>
 8006382:	2c00      	cmp	r4, #0
 8006384:	f000 80a1 	beq.w	80064ca <_dtoa_r+0x442>
 8006388:	2f00      	cmp	r7, #0
 800638a:	dd33      	ble.n	80063f4 <_dtoa_r+0x36c>
 800638c:	4b86      	ldr	r3, [pc, #536]	@ (80065a8 <_dtoa_r+0x520>)
 800638e:	f007 020f 	and.w	r2, r7, #15
 8006392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006396:	05f8      	lsls	r0, r7, #23
 8006398:	e9d3 3400 	ldrd	r3, r4, [r3]
 800639c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80063a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80063a4:	d516      	bpl.n	80063d4 <_dtoa_r+0x34c>
 80063a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063aa:	4b80      	ldr	r3, [pc, #512]	@ (80065ac <_dtoa_r+0x524>)
 80063ac:	2603      	movs	r6, #3
 80063ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063b2:	f7fa f9bb 	bl	800072c <__aeabi_ddiv>
 80063b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063ba:	f004 040f 	and.w	r4, r4, #15
 80063be:	4d7b      	ldr	r5, [pc, #492]	@ (80065ac <_dtoa_r+0x524>)
 80063c0:	b954      	cbnz	r4, 80063d8 <_dtoa_r+0x350>
 80063c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ca:	f7fa f9af 	bl	800072c <__aeabi_ddiv>
 80063ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063d2:	e028      	b.n	8006426 <_dtoa_r+0x39e>
 80063d4:	2602      	movs	r6, #2
 80063d6:	e7f2      	b.n	80063be <_dtoa_r+0x336>
 80063d8:	07e1      	lsls	r1, r4, #31
 80063da:	d508      	bpl.n	80063ee <_dtoa_r+0x366>
 80063dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80063e4:	f7fa f878 	bl	80004d8 <__aeabi_dmul>
 80063e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063ec:	3601      	adds	r6, #1
 80063ee:	1064      	asrs	r4, r4, #1
 80063f0:	3508      	adds	r5, #8
 80063f2:	e7e5      	b.n	80063c0 <_dtoa_r+0x338>
 80063f4:	f000 80d2 	beq.w	800659c <_dtoa_r+0x514>
 80063f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063fc:	427c      	negs	r4, r7
 80063fe:	4b6a      	ldr	r3, [pc, #424]	@ (80065a8 <_dtoa_r+0x520>)
 8006400:	f004 020f 	and.w	r2, r4, #15
 8006404:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f7fa f864 	bl	80004d8 <__aeabi_dmul>
 8006410:	2602      	movs	r6, #2
 8006412:	2300      	movs	r3, #0
 8006414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006418:	4d64      	ldr	r5, [pc, #400]	@ (80065ac <_dtoa_r+0x524>)
 800641a:	1124      	asrs	r4, r4, #4
 800641c:	2c00      	cmp	r4, #0
 800641e:	f040 80b2 	bne.w	8006586 <_dtoa_r+0x4fe>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1d3      	bne.n	80063ce <_dtoa_r+0x346>
 8006426:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800642a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 80b7 	beq.w	80065a0 <_dtoa_r+0x518>
 8006432:	2200      	movs	r2, #0
 8006434:	4620      	mov	r0, r4
 8006436:	4629      	mov	r1, r5
 8006438:	4b5d      	ldr	r3, [pc, #372]	@ (80065b0 <_dtoa_r+0x528>)
 800643a:	f7fa fabf 	bl	80009bc <__aeabi_dcmplt>
 800643e:	2800      	cmp	r0, #0
 8006440:	f000 80ae 	beq.w	80065a0 <_dtoa_r+0x518>
 8006444:	9b07      	ldr	r3, [sp, #28]
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 80aa 	beq.w	80065a0 <_dtoa_r+0x518>
 800644c:	9b08      	ldr	r3, [sp, #32]
 800644e:	2b00      	cmp	r3, #0
 8006450:	dd37      	ble.n	80064c2 <_dtoa_r+0x43a>
 8006452:	1e7b      	subs	r3, r7, #1
 8006454:	4620      	mov	r0, r4
 8006456:	9304      	str	r3, [sp, #16]
 8006458:	2200      	movs	r2, #0
 800645a:	4629      	mov	r1, r5
 800645c:	4b55      	ldr	r3, [pc, #340]	@ (80065b4 <_dtoa_r+0x52c>)
 800645e:	f7fa f83b 	bl	80004d8 <__aeabi_dmul>
 8006462:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006466:	9c08      	ldr	r4, [sp, #32]
 8006468:	3601      	adds	r6, #1
 800646a:	4630      	mov	r0, r6
 800646c:	f7f9 ffca 	bl	8000404 <__aeabi_i2d>
 8006470:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006474:	f7fa f830 	bl	80004d8 <__aeabi_dmul>
 8006478:	2200      	movs	r2, #0
 800647a:	4b4f      	ldr	r3, [pc, #316]	@ (80065b8 <_dtoa_r+0x530>)
 800647c:	f7f9 fe76 	bl	800016c <__adddf3>
 8006480:	4605      	mov	r5, r0
 8006482:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006486:	2c00      	cmp	r4, #0
 8006488:	f040 809a 	bne.w	80065c0 <_dtoa_r+0x538>
 800648c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006490:	2200      	movs	r2, #0
 8006492:	4b4a      	ldr	r3, [pc, #296]	@ (80065bc <_dtoa_r+0x534>)
 8006494:	f7f9 fe68 	bl	8000168 <__aeabi_dsub>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064a0:	462a      	mov	r2, r5
 80064a2:	4633      	mov	r3, r6
 80064a4:	f7fa faa8 	bl	80009f8 <__aeabi_dcmpgt>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	f040 828e 	bne.w	80069ca <_dtoa_r+0x942>
 80064ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b2:	462a      	mov	r2, r5
 80064b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80064b8:	f7fa fa80 	bl	80009bc <__aeabi_dcmplt>
 80064bc:	2800      	cmp	r0, #0
 80064be:	f040 8127 	bne.w	8006710 <_dtoa_r+0x688>
 80064c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80064c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80064ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f2c0 8163 	blt.w	8006798 <_dtoa_r+0x710>
 80064d2:	2f0e      	cmp	r7, #14
 80064d4:	f300 8160 	bgt.w	8006798 <_dtoa_r+0x710>
 80064d8:	4b33      	ldr	r3, [pc, #204]	@ (80065a8 <_dtoa_r+0x520>)
 80064da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80064e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	da03      	bge.n	80064f4 <_dtoa_r+0x46c>
 80064ec:	9b07      	ldr	r3, [sp, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f340 8100 	ble.w	80066f4 <_dtoa_r+0x66c>
 80064f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80064f8:	4656      	mov	r6, sl
 80064fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	f7fa f913 	bl	800072c <__aeabi_ddiv>
 8006506:	f7fa fa97 	bl	8000a38 <__aeabi_d2iz>
 800650a:	4680      	mov	r8, r0
 800650c:	f7f9 ff7a 	bl	8000404 <__aeabi_i2d>
 8006510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006514:	f7f9 ffe0 	bl	80004d8 <__aeabi_dmul>
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	4620      	mov	r0, r4
 800651e:	4629      	mov	r1, r5
 8006520:	f7f9 fe22 	bl	8000168 <__aeabi_dsub>
 8006524:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006528:	9d07      	ldr	r5, [sp, #28]
 800652a:	f806 4b01 	strb.w	r4, [r6], #1
 800652e:	eba6 040a 	sub.w	r4, r6, sl
 8006532:	42a5      	cmp	r5, r4
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	f040 8116 	bne.w	8006768 <_dtoa_r+0x6e0>
 800653c:	f7f9 fe16 	bl	800016c <__adddf3>
 8006540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006544:	4604      	mov	r4, r0
 8006546:	460d      	mov	r5, r1
 8006548:	f7fa fa56 	bl	80009f8 <__aeabi_dcmpgt>
 800654c:	2800      	cmp	r0, #0
 800654e:	f040 80f8 	bne.w	8006742 <_dtoa_r+0x6ba>
 8006552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006556:	4620      	mov	r0, r4
 8006558:	4629      	mov	r1, r5
 800655a:	f7fa fa25 	bl	80009a8 <__aeabi_dcmpeq>
 800655e:	b118      	cbz	r0, 8006568 <_dtoa_r+0x4e0>
 8006560:	f018 0f01 	tst.w	r8, #1
 8006564:	f040 80ed 	bne.w	8006742 <_dtoa_r+0x6ba>
 8006568:	4649      	mov	r1, r9
 800656a:	4658      	mov	r0, fp
 800656c:	f000 fc92 	bl	8006e94 <_Bfree>
 8006570:	2300      	movs	r3, #0
 8006572:	7033      	strb	r3, [r6, #0]
 8006574:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006576:	3701      	adds	r7, #1
 8006578:	601f      	str	r7, [r3, #0]
 800657a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 8320 	beq.w	8006bc2 <_dtoa_r+0xb3a>
 8006582:	601e      	str	r6, [r3, #0]
 8006584:	e31d      	b.n	8006bc2 <_dtoa_r+0xb3a>
 8006586:	07e2      	lsls	r2, r4, #31
 8006588:	d505      	bpl.n	8006596 <_dtoa_r+0x50e>
 800658a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800658e:	f7f9 ffa3 	bl	80004d8 <__aeabi_dmul>
 8006592:	2301      	movs	r3, #1
 8006594:	3601      	adds	r6, #1
 8006596:	1064      	asrs	r4, r4, #1
 8006598:	3508      	adds	r5, #8
 800659a:	e73f      	b.n	800641c <_dtoa_r+0x394>
 800659c:	2602      	movs	r6, #2
 800659e:	e742      	b.n	8006426 <_dtoa_r+0x39e>
 80065a0:	9c07      	ldr	r4, [sp, #28]
 80065a2:	9704      	str	r7, [sp, #16]
 80065a4:	e761      	b.n	800646a <_dtoa_r+0x3e2>
 80065a6:	bf00      	nop
 80065a8:	08009890 	.word	0x08009890
 80065ac:	08009868 	.word	0x08009868
 80065b0:	3ff00000 	.word	0x3ff00000
 80065b4:	40240000 	.word	0x40240000
 80065b8:	401c0000 	.word	0x401c0000
 80065bc:	40140000 	.word	0x40140000
 80065c0:	4b70      	ldr	r3, [pc, #448]	@ (8006784 <_dtoa_r+0x6fc>)
 80065c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80065cc:	4454      	add	r4, sl
 80065ce:	2900      	cmp	r1, #0
 80065d0:	d045      	beq.n	800665e <_dtoa_r+0x5d6>
 80065d2:	2000      	movs	r0, #0
 80065d4:	496c      	ldr	r1, [pc, #432]	@ (8006788 <_dtoa_r+0x700>)
 80065d6:	f7fa f8a9 	bl	800072c <__aeabi_ddiv>
 80065da:	4633      	mov	r3, r6
 80065dc:	462a      	mov	r2, r5
 80065de:	f7f9 fdc3 	bl	8000168 <__aeabi_dsub>
 80065e2:	4656      	mov	r6, sl
 80065e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80065e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ec:	f7fa fa24 	bl	8000a38 <__aeabi_d2iz>
 80065f0:	4605      	mov	r5, r0
 80065f2:	f7f9 ff07 	bl	8000404 <__aeabi_i2d>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065fe:	f7f9 fdb3 	bl	8000168 <__aeabi_dsub>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	3530      	adds	r5, #48	@ 0x30
 8006608:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800660c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006610:	f806 5b01 	strb.w	r5, [r6], #1
 8006614:	f7fa f9d2 	bl	80009bc <__aeabi_dcmplt>
 8006618:	2800      	cmp	r0, #0
 800661a:	d163      	bne.n	80066e4 <_dtoa_r+0x65c>
 800661c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006620:	2000      	movs	r0, #0
 8006622:	495a      	ldr	r1, [pc, #360]	@ (800678c <_dtoa_r+0x704>)
 8006624:	f7f9 fda0 	bl	8000168 <__aeabi_dsub>
 8006628:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800662c:	f7fa f9c6 	bl	80009bc <__aeabi_dcmplt>
 8006630:	2800      	cmp	r0, #0
 8006632:	f040 8087 	bne.w	8006744 <_dtoa_r+0x6bc>
 8006636:	42a6      	cmp	r6, r4
 8006638:	f43f af43 	beq.w	80064c2 <_dtoa_r+0x43a>
 800663c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006640:	2200      	movs	r2, #0
 8006642:	4b53      	ldr	r3, [pc, #332]	@ (8006790 <_dtoa_r+0x708>)
 8006644:	f7f9 ff48 	bl	80004d8 <__aeabi_dmul>
 8006648:	2200      	movs	r2, #0
 800664a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800664e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006652:	4b4f      	ldr	r3, [pc, #316]	@ (8006790 <_dtoa_r+0x708>)
 8006654:	f7f9 ff40 	bl	80004d8 <__aeabi_dmul>
 8006658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800665c:	e7c4      	b.n	80065e8 <_dtoa_r+0x560>
 800665e:	4631      	mov	r1, r6
 8006660:	4628      	mov	r0, r5
 8006662:	f7f9 ff39 	bl	80004d8 <__aeabi_dmul>
 8006666:	4656      	mov	r6, sl
 8006668:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800666c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800666e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006672:	f7fa f9e1 	bl	8000a38 <__aeabi_d2iz>
 8006676:	4605      	mov	r5, r0
 8006678:	f7f9 fec4 	bl	8000404 <__aeabi_i2d>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006684:	f7f9 fd70 	bl	8000168 <__aeabi_dsub>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	3530      	adds	r5, #48	@ 0x30
 800668e:	f806 5b01 	strb.w	r5, [r6], #1
 8006692:	42a6      	cmp	r6, r4
 8006694:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	d124      	bne.n	80066e8 <_dtoa_r+0x660>
 800669e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066a2:	4b39      	ldr	r3, [pc, #228]	@ (8006788 <_dtoa_r+0x700>)
 80066a4:	f7f9 fd62 	bl	800016c <__adddf3>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066b0:	f7fa f9a2 	bl	80009f8 <__aeabi_dcmpgt>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d145      	bne.n	8006744 <_dtoa_r+0x6bc>
 80066b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066bc:	2000      	movs	r0, #0
 80066be:	4932      	ldr	r1, [pc, #200]	@ (8006788 <_dtoa_r+0x700>)
 80066c0:	f7f9 fd52 	bl	8000168 <__aeabi_dsub>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066cc:	f7fa f976 	bl	80009bc <__aeabi_dcmplt>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f43f aef6 	beq.w	80064c2 <_dtoa_r+0x43a>
 80066d6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80066d8:	1e73      	subs	r3, r6, #1
 80066da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80066dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80066e0:	2b30      	cmp	r3, #48	@ 0x30
 80066e2:	d0f8      	beq.n	80066d6 <_dtoa_r+0x64e>
 80066e4:	9f04      	ldr	r7, [sp, #16]
 80066e6:	e73f      	b.n	8006568 <_dtoa_r+0x4e0>
 80066e8:	4b29      	ldr	r3, [pc, #164]	@ (8006790 <_dtoa_r+0x708>)
 80066ea:	f7f9 fef5 	bl	80004d8 <__aeabi_dmul>
 80066ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066f2:	e7bc      	b.n	800666e <_dtoa_r+0x5e6>
 80066f4:	d10c      	bne.n	8006710 <_dtoa_r+0x688>
 80066f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066fa:	2200      	movs	r2, #0
 80066fc:	4b25      	ldr	r3, [pc, #148]	@ (8006794 <_dtoa_r+0x70c>)
 80066fe:	f7f9 feeb 	bl	80004d8 <__aeabi_dmul>
 8006702:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006706:	f7fa f96d 	bl	80009e4 <__aeabi_dcmpge>
 800670a:	2800      	cmp	r0, #0
 800670c:	f000 815b 	beq.w	80069c6 <_dtoa_r+0x93e>
 8006710:	2400      	movs	r4, #0
 8006712:	4625      	mov	r5, r4
 8006714:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006716:	4656      	mov	r6, sl
 8006718:	43db      	mvns	r3, r3
 800671a:	9304      	str	r3, [sp, #16]
 800671c:	2700      	movs	r7, #0
 800671e:	4621      	mov	r1, r4
 8006720:	4658      	mov	r0, fp
 8006722:	f000 fbb7 	bl	8006e94 <_Bfree>
 8006726:	2d00      	cmp	r5, #0
 8006728:	d0dc      	beq.n	80066e4 <_dtoa_r+0x65c>
 800672a:	b12f      	cbz	r7, 8006738 <_dtoa_r+0x6b0>
 800672c:	42af      	cmp	r7, r5
 800672e:	d003      	beq.n	8006738 <_dtoa_r+0x6b0>
 8006730:	4639      	mov	r1, r7
 8006732:	4658      	mov	r0, fp
 8006734:	f000 fbae 	bl	8006e94 <_Bfree>
 8006738:	4629      	mov	r1, r5
 800673a:	4658      	mov	r0, fp
 800673c:	f000 fbaa 	bl	8006e94 <_Bfree>
 8006740:	e7d0      	b.n	80066e4 <_dtoa_r+0x65c>
 8006742:	9704      	str	r7, [sp, #16]
 8006744:	4633      	mov	r3, r6
 8006746:	461e      	mov	r6, r3
 8006748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800674c:	2a39      	cmp	r2, #57	@ 0x39
 800674e:	d107      	bne.n	8006760 <_dtoa_r+0x6d8>
 8006750:	459a      	cmp	sl, r3
 8006752:	d1f8      	bne.n	8006746 <_dtoa_r+0x6be>
 8006754:	9a04      	ldr	r2, [sp, #16]
 8006756:	3201      	adds	r2, #1
 8006758:	9204      	str	r2, [sp, #16]
 800675a:	2230      	movs	r2, #48	@ 0x30
 800675c:	f88a 2000 	strb.w	r2, [sl]
 8006760:	781a      	ldrb	r2, [r3, #0]
 8006762:	3201      	adds	r2, #1
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	e7bd      	b.n	80066e4 <_dtoa_r+0x65c>
 8006768:	2200      	movs	r2, #0
 800676a:	4b09      	ldr	r3, [pc, #36]	@ (8006790 <_dtoa_r+0x708>)
 800676c:	f7f9 feb4 	bl	80004d8 <__aeabi_dmul>
 8006770:	2200      	movs	r2, #0
 8006772:	2300      	movs	r3, #0
 8006774:	4604      	mov	r4, r0
 8006776:	460d      	mov	r5, r1
 8006778:	f7fa f916 	bl	80009a8 <__aeabi_dcmpeq>
 800677c:	2800      	cmp	r0, #0
 800677e:	f43f aebc 	beq.w	80064fa <_dtoa_r+0x472>
 8006782:	e6f1      	b.n	8006568 <_dtoa_r+0x4e0>
 8006784:	08009890 	.word	0x08009890
 8006788:	3fe00000 	.word	0x3fe00000
 800678c:	3ff00000 	.word	0x3ff00000
 8006790:	40240000 	.word	0x40240000
 8006794:	40140000 	.word	0x40140000
 8006798:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800679a:	2a00      	cmp	r2, #0
 800679c:	f000 80db 	beq.w	8006956 <_dtoa_r+0x8ce>
 80067a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80067a2:	2a01      	cmp	r2, #1
 80067a4:	f300 80bf 	bgt.w	8006926 <_dtoa_r+0x89e>
 80067a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80067aa:	2a00      	cmp	r2, #0
 80067ac:	f000 80b7 	beq.w	800691e <_dtoa_r+0x896>
 80067b0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80067b4:	4646      	mov	r6, r8
 80067b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80067b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067ba:	2101      	movs	r1, #1
 80067bc:	441a      	add	r2, r3
 80067be:	4658      	mov	r0, fp
 80067c0:	4498      	add	r8, r3
 80067c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80067c4:	f000 fc64 	bl	8007090 <__i2b>
 80067c8:	4605      	mov	r5, r0
 80067ca:	b15e      	cbz	r6, 80067e4 <_dtoa_r+0x75c>
 80067cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	dd08      	ble.n	80067e4 <_dtoa_r+0x75c>
 80067d2:	42b3      	cmp	r3, r6
 80067d4:	bfa8      	it	ge
 80067d6:	4633      	movge	r3, r6
 80067d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067da:	eba8 0803 	sub.w	r8, r8, r3
 80067de:	1af6      	subs	r6, r6, r3
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067e6:	b1f3      	cbz	r3, 8006826 <_dtoa_r+0x79e>
 80067e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 80b7 	beq.w	800695e <_dtoa_r+0x8d6>
 80067f0:	b18c      	cbz	r4, 8006816 <_dtoa_r+0x78e>
 80067f2:	4629      	mov	r1, r5
 80067f4:	4622      	mov	r2, r4
 80067f6:	4658      	mov	r0, fp
 80067f8:	f000 fd08 	bl	800720c <__pow5mult>
 80067fc:	464a      	mov	r2, r9
 80067fe:	4601      	mov	r1, r0
 8006800:	4605      	mov	r5, r0
 8006802:	4658      	mov	r0, fp
 8006804:	f000 fc5a 	bl	80070bc <__multiply>
 8006808:	4649      	mov	r1, r9
 800680a:	9004      	str	r0, [sp, #16]
 800680c:	4658      	mov	r0, fp
 800680e:	f000 fb41 	bl	8006e94 <_Bfree>
 8006812:	9b04      	ldr	r3, [sp, #16]
 8006814:	4699      	mov	r9, r3
 8006816:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006818:	1b1a      	subs	r2, r3, r4
 800681a:	d004      	beq.n	8006826 <_dtoa_r+0x79e>
 800681c:	4649      	mov	r1, r9
 800681e:	4658      	mov	r0, fp
 8006820:	f000 fcf4 	bl	800720c <__pow5mult>
 8006824:	4681      	mov	r9, r0
 8006826:	2101      	movs	r1, #1
 8006828:	4658      	mov	r0, fp
 800682a:	f000 fc31 	bl	8007090 <__i2b>
 800682e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006830:	4604      	mov	r4, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 81c9 	beq.w	8006bca <_dtoa_r+0xb42>
 8006838:	461a      	mov	r2, r3
 800683a:	4601      	mov	r1, r0
 800683c:	4658      	mov	r0, fp
 800683e:	f000 fce5 	bl	800720c <__pow5mult>
 8006842:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006844:	4604      	mov	r4, r0
 8006846:	2b01      	cmp	r3, #1
 8006848:	f300 808f 	bgt.w	800696a <_dtoa_r+0x8e2>
 800684c:	9b02      	ldr	r3, [sp, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	f040 8087 	bne.w	8006962 <_dtoa_r+0x8da>
 8006854:	9b03      	ldr	r3, [sp, #12]
 8006856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800685a:	2b00      	cmp	r3, #0
 800685c:	f040 8083 	bne.w	8006966 <_dtoa_r+0x8de>
 8006860:	9b03      	ldr	r3, [sp, #12]
 8006862:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006866:	0d1b      	lsrs	r3, r3, #20
 8006868:	051b      	lsls	r3, r3, #20
 800686a:	b12b      	cbz	r3, 8006878 <_dtoa_r+0x7f0>
 800686c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800686e:	f108 0801 	add.w	r8, r8, #1
 8006872:	3301      	adds	r3, #1
 8006874:	9309      	str	r3, [sp, #36]	@ 0x24
 8006876:	2301      	movs	r3, #1
 8006878:	930a      	str	r3, [sp, #40]	@ 0x28
 800687a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 81aa 	beq.w	8006bd6 <_dtoa_r+0xb4e>
 8006882:	6923      	ldr	r3, [r4, #16]
 8006884:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006888:	6918      	ldr	r0, [r3, #16]
 800688a:	f000 fbb5 	bl	8006ff8 <__hi0bits>
 800688e:	f1c0 0020 	rsb	r0, r0, #32
 8006892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006894:	4418      	add	r0, r3
 8006896:	f010 001f 	ands.w	r0, r0, #31
 800689a:	d071      	beq.n	8006980 <_dtoa_r+0x8f8>
 800689c:	f1c0 0320 	rsb	r3, r0, #32
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	dd65      	ble.n	8006970 <_dtoa_r+0x8e8>
 80068a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a6:	f1c0 001c 	rsb	r0, r0, #28
 80068aa:	4403      	add	r3, r0
 80068ac:	4480      	add	r8, r0
 80068ae:	4406      	add	r6, r0
 80068b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80068b2:	f1b8 0f00 	cmp.w	r8, #0
 80068b6:	dd05      	ble.n	80068c4 <_dtoa_r+0x83c>
 80068b8:	4649      	mov	r1, r9
 80068ba:	4642      	mov	r2, r8
 80068bc:	4658      	mov	r0, fp
 80068be:	f000 fcff 	bl	80072c0 <__lshift>
 80068c2:	4681      	mov	r9, r0
 80068c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	dd05      	ble.n	80068d6 <_dtoa_r+0x84e>
 80068ca:	4621      	mov	r1, r4
 80068cc:	461a      	mov	r2, r3
 80068ce:	4658      	mov	r0, fp
 80068d0:	f000 fcf6 	bl	80072c0 <__lshift>
 80068d4:	4604      	mov	r4, r0
 80068d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d053      	beq.n	8006984 <_dtoa_r+0x8fc>
 80068dc:	4621      	mov	r1, r4
 80068de:	4648      	mov	r0, r9
 80068e0:	f000 fd5a 	bl	8007398 <__mcmp>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	da4d      	bge.n	8006984 <_dtoa_r+0x8fc>
 80068e8:	1e7b      	subs	r3, r7, #1
 80068ea:	4649      	mov	r1, r9
 80068ec:	9304      	str	r3, [sp, #16]
 80068ee:	220a      	movs	r2, #10
 80068f0:	2300      	movs	r3, #0
 80068f2:	4658      	mov	r0, fp
 80068f4:	f000 faf0 	bl	8006ed8 <__multadd>
 80068f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068fa:	4681      	mov	r9, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 816c 	beq.w	8006bda <_dtoa_r+0xb52>
 8006902:	2300      	movs	r3, #0
 8006904:	4629      	mov	r1, r5
 8006906:	220a      	movs	r2, #10
 8006908:	4658      	mov	r0, fp
 800690a:	f000 fae5 	bl	8006ed8 <__multadd>
 800690e:	9b08      	ldr	r3, [sp, #32]
 8006910:	4605      	mov	r5, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	dc61      	bgt.n	80069da <_dtoa_r+0x952>
 8006916:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006918:	2b02      	cmp	r3, #2
 800691a:	dc3b      	bgt.n	8006994 <_dtoa_r+0x90c>
 800691c:	e05d      	b.n	80069da <_dtoa_r+0x952>
 800691e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006920:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006924:	e746      	b.n	80067b4 <_dtoa_r+0x72c>
 8006926:	9b07      	ldr	r3, [sp, #28]
 8006928:	1e5c      	subs	r4, r3, #1
 800692a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800692c:	42a3      	cmp	r3, r4
 800692e:	bfbf      	itttt	lt
 8006930:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006932:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006934:	1ae3      	sublt	r3, r4, r3
 8006936:	18d2      	addlt	r2, r2, r3
 8006938:	bfa8      	it	ge
 800693a:	1b1c      	subge	r4, r3, r4
 800693c:	9b07      	ldr	r3, [sp, #28]
 800693e:	bfbe      	ittt	lt
 8006940:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006942:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006944:	2400      	movlt	r4, #0
 8006946:	2b00      	cmp	r3, #0
 8006948:	bfb5      	itete	lt
 800694a:	eba8 0603 	sublt.w	r6, r8, r3
 800694e:	4646      	movge	r6, r8
 8006950:	2300      	movlt	r3, #0
 8006952:	9b07      	ldrge	r3, [sp, #28]
 8006954:	e730      	b.n	80067b8 <_dtoa_r+0x730>
 8006956:	4646      	mov	r6, r8
 8006958:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800695a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800695c:	e735      	b.n	80067ca <_dtoa_r+0x742>
 800695e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006960:	e75c      	b.n	800681c <_dtoa_r+0x794>
 8006962:	2300      	movs	r3, #0
 8006964:	e788      	b.n	8006878 <_dtoa_r+0x7f0>
 8006966:	9b02      	ldr	r3, [sp, #8]
 8006968:	e786      	b.n	8006878 <_dtoa_r+0x7f0>
 800696a:	2300      	movs	r3, #0
 800696c:	930a      	str	r3, [sp, #40]	@ 0x28
 800696e:	e788      	b.n	8006882 <_dtoa_r+0x7fa>
 8006970:	d09f      	beq.n	80068b2 <_dtoa_r+0x82a>
 8006972:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006974:	331c      	adds	r3, #28
 8006976:	441a      	add	r2, r3
 8006978:	4498      	add	r8, r3
 800697a:	441e      	add	r6, r3
 800697c:	9209      	str	r2, [sp, #36]	@ 0x24
 800697e:	e798      	b.n	80068b2 <_dtoa_r+0x82a>
 8006980:	4603      	mov	r3, r0
 8006982:	e7f6      	b.n	8006972 <_dtoa_r+0x8ea>
 8006984:	9b07      	ldr	r3, [sp, #28]
 8006986:	9704      	str	r7, [sp, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	dc20      	bgt.n	80069ce <_dtoa_r+0x946>
 800698c:	9308      	str	r3, [sp, #32]
 800698e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006990:	2b02      	cmp	r3, #2
 8006992:	dd1e      	ble.n	80069d2 <_dtoa_r+0x94a>
 8006994:	9b08      	ldr	r3, [sp, #32]
 8006996:	2b00      	cmp	r3, #0
 8006998:	f47f aebc 	bne.w	8006714 <_dtoa_r+0x68c>
 800699c:	4621      	mov	r1, r4
 800699e:	2205      	movs	r2, #5
 80069a0:	4658      	mov	r0, fp
 80069a2:	f000 fa99 	bl	8006ed8 <__multadd>
 80069a6:	4601      	mov	r1, r0
 80069a8:	4604      	mov	r4, r0
 80069aa:	4648      	mov	r0, r9
 80069ac:	f000 fcf4 	bl	8007398 <__mcmp>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	f77f aeaf 	ble.w	8006714 <_dtoa_r+0x68c>
 80069b6:	2331      	movs	r3, #49	@ 0x31
 80069b8:	4656      	mov	r6, sl
 80069ba:	f806 3b01 	strb.w	r3, [r6], #1
 80069be:	9b04      	ldr	r3, [sp, #16]
 80069c0:	3301      	adds	r3, #1
 80069c2:	9304      	str	r3, [sp, #16]
 80069c4:	e6aa      	b.n	800671c <_dtoa_r+0x694>
 80069c6:	9c07      	ldr	r4, [sp, #28]
 80069c8:	9704      	str	r7, [sp, #16]
 80069ca:	4625      	mov	r5, r4
 80069cc:	e7f3      	b.n	80069b6 <_dtoa_r+0x92e>
 80069ce:	9b07      	ldr	r3, [sp, #28]
 80069d0:	9308      	str	r3, [sp, #32]
 80069d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8104 	beq.w	8006be2 <_dtoa_r+0xb5a>
 80069da:	2e00      	cmp	r6, #0
 80069dc:	dd05      	ble.n	80069ea <_dtoa_r+0x962>
 80069de:	4629      	mov	r1, r5
 80069e0:	4632      	mov	r2, r6
 80069e2:	4658      	mov	r0, fp
 80069e4:	f000 fc6c 	bl	80072c0 <__lshift>
 80069e8:	4605      	mov	r5, r0
 80069ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d05a      	beq.n	8006aa6 <_dtoa_r+0xa1e>
 80069f0:	4658      	mov	r0, fp
 80069f2:	6869      	ldr	r1, [r5, #4]
 80069f4:	f000 fa0e 	bl	8006e14 <_Balloc>
 80069f8:	4606      	mov	r6, r0
 80069fa:	b928      	cbnz	r0, 8006a08 <_dtoa_r+0x980>
 80069fc:	4602      	mov	r2, r0
 80069fe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a02:	4b83      	ldr	r3, [pc, #524]	@ (8006c10 <_dtoa_r+0xb88>)
 8006a04:	f7ff bb54 	b.w	80060b0 <_dtoa_r+0x28>
 8006a08:	692a      	ldr	r2, [r5, #16]
 8006a0a:	f105 010c 	add.w	r1, r5, #12
 8006a0e:	3202      	adds	r2, #2
 8006a10:	0092      	lsls	r2, r2, #2
 8006a12:	300c      	adds	r0, #12
 8006a14:	f001 ff5e 	bl	80088d4 <memcpy>
 8006a18:	2201      	movs	r2, #1
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4658      	mov	r0, fp
 8006a1e:	f000 fc4f 	bl	80072c0 <__lshift>
 8006a22:	462f      	mov	r7, r5
 8006a24:	4605      	mov	r5, r0
 8006a26:	f10a 0301 	add.w	r3, sl, #1
 8006a2a:	9307      	str	r3, [sp, #28]
 8006a2c:	9b08      	ldr	r3, [sp, #32]
 8006a2e:	4453      	add	r3, sl
 8006a30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a32:	9b02      	ldr	r3, [sp, #8]
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a3a:	9b07      	ldr	r3, [sp, #28]
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	4648      	mov	r0, r9
 8006a42:	9302      	str	r3, [sp, #8]
 8006a44:	f7ff fa98 	bl	8005f78 <quorem>
 8006a48:	4639      	mov	r1, r7
 8006a4a:	9008      	str	r0, [sp, #32]
 8006a4c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006a50:	4648      	mov	r0, r9
 8006a52:	f000 fca1 	bl	8007398 <__mcmp>
 8006a56:	462a      	mov	r2, r5
 8006a58:	9009      	str	r0, [sp, #36]	@ 0x24
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	4658      	mov	r0, fp
 8006a5e:	f000 fcb7 	bl	80073d0 <__mdiff>
 8006a62:	68c2      	ldr	r2, [r0, #12]
 8006a64:	4606      	mov	r6, r0
 8006a66:	bb02      	cbnz	r2, 8006aaa <_dtoa_r+0xa22>
 8006a68:	4601      	mov	r1, r0
 8006a6a:	4648      	mov	r0, r9
 8006a6c:	f000 fc94 	bl	8007398 <__mcmp>
 8006a70:	4602      	mov	r2, r0
 8006a72:	4631      	mov	r1, r6
 8006a74:	4658      	mov	r0, fp
 8006a76:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a78:	f000 fa0c 	bl	8006e94 <_Bfree>
 8006a7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006a80:	9e07      	ldr	r6, [sp, #28]
 8006a82:	ea43 0102 	orr.w	r1, r3, r2
 8006a86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a88:	4319      	orrs	r1, r3
 8006a8a:	d110      	bne.n	8006aae <_dtoa_r+0xa26>
 8006a8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006a90:	d029      	beq.n	8006ae6 <_dtoa_r+0xa5e>
 8006a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	dd02      	ble.n	8006a9e <_dtoa_r+0xa16>
 8006a98:	9b08      	ldr	r3, [sp, #32]
 8006a9a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006a9e:	9b02      	ldr	r3, [sp, #8]
 8006aa0:	f883 8000 	strb.w	r8, [r3]
 8006aa4:	e63b      	b.n	800671e <_dtoa_r+0x696>
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	e7bb      	b.n	8006a22 <_dtoa_r+0x99a>
 8006aaa:	2201      	movs	r2, #1
 8006aac:	e7e1      	b.n	8006a72 <_dtoa_r+0x9ea>
 8006aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	db04      	blt.n	8006abe <_dtoa_r+0xa36>
 8006ab4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006aba:	430b      	orrs	r3, r1
 8006abc:	d120      	bne.n	8006b00 <_dtoa_r+0xa78>
 8006abe:	2a00      	cmp	r2, #0
 8006ac0:	dded      	ble.n	8006a9e <_dtoa_r+0xa16>
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	4658      	mov	r0, fp
 8006ac8:	f000 fbfa 	bl	80072c0 <__lshift>
 8006acc:	4621      	mov	r1, r4
 8006ace:	4681      	mov	r9, r0
 8006ad0:	f000 fc62 	bl	8007398 <__mcmp>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	dc03      	bgt.n	8006ae0 <_dtoa_r+0xa58>
 8006ad8:	d1e1      	bne.n	8006a9e <_dtoa_r+0xa16>
 8006ada:	f018 0f01 	tst.w	r8, #1
 8006ade:	d0de      	beq.n	8006a9e <_dtoa_r+0xa16>
 8006ae0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ae4:	d1d8      	bne.n	8006a98 <_dtoa_r+0xa10>
 8006ae6:	2339      	movs	r3, #57	@ 0x39
 8006ae8:	9a02      	ldr	r2, [sp, #8]
 8006aea:	7013      	strb	r3, [r2, #0]
 8006aec:	4633      	mov	r3, r6
 8006aee:	461e      	mov	r6, r3
 8006af0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006af4:	3b01      	subs	r3, #1
 8006af6:	2a39      	cmp	r2, #57	@ 0x39
 8006af8:	d052      	beq.n	8006ba0 <_dtoa_r+0xb18>
 8006afa:	3201      	adds	r2, #1
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	e60e      	b.n	800671e <_dtoa_r+0x696>
 8006b00:	2a00      	cmp	r2, #0
 8006b02:	dd07      	ble.n	8006b14 <_dtoa_r+0xa8c>
 8006b04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b08:	d0ed      	beq.n	8006ae6 <_dtoa_r+0xa5e>
 8006b0a:	9a02      	ldr	r2, [sp, #8]
 8006b0c:	f108 0301 	add.w	r3, r8, #1
 8006b10:	7013      	strb	r3, [r2, #0]
 8006b12:	e604      	b.n	800671e <_dtoa_r+0x696>
 8006b14:	9b07      	ldr	r3, [sp, #28]
 8006b16:	9a07      	ldr	r2, [sp, #28]
 8006b18:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006b1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d028      	beq.n	8006b74 <_dtoa_r+0xaec>
 8006b22:	4649      	mov	r1, r9
 8006b24:	2300      	movs	r3, #0
 8006b26:	220a      	movs	r2, #10
 8006b28:	4658      	mov	r0, fp
 8006b2a:	f000 f9d5 	bl	8006ed8 <__multadd>
 8006b2e:	42af      	cmp	r7, r5
 8006b30:	4681      	mov	r9, r0
 8006b32:	f04f 0300 	mov.w	r3, #0
 8006b36:	f04f 020a 	mov.w	r2, #10
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	4658      	mov	r0, fp
 8006b3e:	d107      	bne.n	8006b50 <_dtoa_r+0xac8>
 8006b40:	f000 f9ca 	bl	8006ed8 <__multadd>
 8006b44:	4607      	mov	r7, r0
 8006b46:	4605      	mov	r5, r0
 8006b48:	9b07      	ldr	r3, [sp, #28]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	9307      	str	r3, [sp, #28]
 8006b4e:	e774      	b.n	8006a3a <_dtoa_r+0x9b2>
 8006b50:	f000 f9c2 	bl	8006ed8 <__multadd>
 8006b54:	4629      	mov	r1, r5
 8006b56:	4607      	mov	r7, r0
 8006b58:	2300      	movs	r3, #0
 8006b5a:	220a      	movs	r2, #10
 8006b5c:	4658      	mov	r0, fp
 8006b5e:	f000 f9bb 	bl	8006ed8 <__multadd>
 8006b62:	4605      	mov	r5, r0
 8006b64:	e7f0      	b.n	8006b48 <_dtoa_r+0xac0>
 8006b66:	9b08      	ldr	r3, [sp, #32]
 8006b68:	2700      	movs	r7, #0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	bfcc      	ite	gt
 8006b6e:	461e      	movgt	r6, r3
 8006b70:	2601      	movle	r6, #1
 8006b72:	4456      	add	r6, sl
 8006b74:	4649      	mov	r1, r9
 8006b76:	2201      	movs	r2, #1
 8006b78:	4658      	mov	r0, fp
 8006b7a:	f000 fba1 	bl	80072c0 <__lshift>
 8006b7e:	4621      	mov	r1, r4
 8006b80:	4681      	mov	r9, r0
 8006b82:	f000 fc09 	bl	8007398 <__mcmp>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	dcb0      	bgt.n	8006aec <_dtoa_r+0xa64>
 8006b8a:	d102      	bne.n	8006b92 <_dtoa_r+0xb0a>
 8006b8c:	f018 0f01 	tst.w	r8, #1
 8006b90:	d1ac      	bne.n	8006aec <_dtoa_r+0xa64>
 8006b92:	4633      	mov	r3, r6
 8006b94:	461e      	mov	r6, r3
 8006b96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b9a:	2a30      	cmp	r2, #48	@ 0x30
 8006b9c:	d0fa      	beq.n	8006b94 <_dtoa_r+0xb0c>
 8006b9e:	e5be      	b.n	800671e <_dtoa_r+0x696>
 8006ba0:	459a      	cmp	sl, r3
 8006ba2:	d1a4      	bne.n	8006aee <_dtoa_r+0xa66>
 8006ba4:	9b04      	ldr	r3, [sp, #16]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	9304      	str	r3, [sp, #16]
 8006baa:	2331      	movs	r3, #49	@ 0x31
 8006bac:	f88a 3000 	strb.w	r3, [sl]
 8006bb0:	e5b5      	b.n	800671e <_dtoa_r+0x696>
 8006bb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006bb4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006c14 <_dtoa_r+0xb8c>
 8006bb8:	b11b      	cbz	r3, 8006bc2 <_dtoa_r+0xb3a>
 8006bba:	f10a 0308 	add.w	r3, sl, #8
 8006bbe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	4650      	mov	r0, sl
 8006bc4:	b017      	add	sp, #92	@ 0x5c
 8006bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	f77f ae3d 	ble.w	800684c <_dtoa_r+0x7c4>
 8006bd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	e65b      	b.n	8006892 <_dtoa_r+0x80a>
 8006bda:	9b08      	ldr	r3, [sp, #32]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f77f aed6 	ble.w	800698e <_dtoa_r+0x906>
 8006be2:	4656      	mov	r6, sl
 8006be4:	4621      	mov	r1, r4
 8006be6:	4648      	mov	r0, r9
 8006be8:	f7ff f9c6 	bl	8005f78 <quorem>
 8006bec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006bf0:	9b08      	ldr	r3, [sp, #32]
 8006bf2:	f806 8b01 	strb.w	r8, [r6], #1
 8006bf6:	eba6 020a 	sub.w	r2, r6, sl
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	ddb3      	ble.n	8006b66 <_dtoa_r+0xade>
 8006bfe:	4649      	mov	r1, r9
 8006c00:	2300      	movs	r3, #0
 8006c02:	220a      	movs	r2, #10
 8006c04:	4658      	mov	r0, fp
 8006c06:	f000 f967 	bl	8006ed8 <__multadd>
 8006c0a:	4681      	mov	r9, r0
 8006c0c:	e7ea      	b.n	8006be4 <_dtoa_r+0xb5c>
 8006c0e:	bf00      	nop
 8006c10:	080097f0 	.word	0x080097f0
 8006c14:	08009774 	.word	0x08009774

08006c18 <_free_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	4605      	mov	r5, r0
 8006c1c:	2900      	cmp	r1, #0
 8006c1e:	d040      	beq.n	8006ca2 <_free_r+0x8a>
 8006c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c24:	1f0c      	subs	r4, r1, #4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	bfb8      	it	lt
 8006c2a:	18e4      	addlt	r4, r4, r3
 8006c2c:	f000 f8e6 	bl	8006dfc <__malloc_lock>
 8006c30:	4a1c      	ldr	r2, [pc, #112]	@ (8006ca4 <_free_r+0x8c>)
 8006c32:	6813      	ldr	r3, [r2, #0]
 8006c34:	b933      	cbnz	r3, 8006c44 <_free_r+0x2c>
 8006c36:	6063      	str	r3, [r4, #4]
 8006c38:	6014      	str	r4, [r2, #0]
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c40:	f000 b8e2 	b.w	8006e08 <__malloc_unlock>
 8006c44:	42a3      	cmp	r3, r4
 8006c46:	d908      	bls.n	8006c5a <_free_r+0x42>
 8006c48:	6820      	ldr	r0, [r4, #0]
 8006c4a:	1821      	adds	r1, r4, r0
 8006c4c:	428b      	cmp	r3, r1
 8006c4e:	bf01      	itttt	eq
 8006c50:	6819      	ldreq	r1, [r3, #0]
 8006c52:	685b      	ldreq	r3, [r3, #4]
 8006c54:	1809      	addeq	r1, r1, r0
 8006c56:	6021      	streq	r1, [r4, #0]
 8006c58:	e7ed      	b.n	8006c36 <_free_r+0x1e>
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	b10b      	cbz	r3, 8006c64 <_free_r+0x4c>
 8006c60:	42a3      	cmp	r3, r4
 8006c62:	d9fa      	bls.n	8006c5a <_free_r+0x42>
 8006c64:	6811      	ldr	r1, [r2, #0]
 8006c66:	1850      	adds	r0, r2, r1
 8006c68:	42a0      	cmp	r0, r4
 8006c6a:	d10b      	bne.n	8006c84 <_free_r+0x6c>
 8006c6c:	6820      	ldr	r0, [r4, #0]
 8006c6e:	4401      	add	r1, r0
 8006c70:	1850      	adds	r0, r2, r1
 8006c72:	4283      	cmp	r3, r0
 8006c74:	6011      	str	r1, [r2, #0]
 8006c76:	d1e0      	bne.n	8006c3a <_free_r+0x22>
 8006c78:	6818      	ldr	r0, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	4408      	add	r0, r1
 8006c7e:	6010      	str	r0, [r2, #0]
 8006c80:	6053      	str	r3, [r2, #4]
 8006c82:	e7da      	b.n	8006c3a <_free_r+0x22>
 8006c84:	d902      	bls.n	8006c8c <_free_r+0x74>
 8006c86:	230c      	movs	r3, #12
 8006c88:	602b      	str	r3, [r5, #0]
 8006c8a:	e7d6      	b.n	8006c3a <_free_r+0x22>
 8006c8c:	6820      	ldr	r0, [r4, #0]
 8006c8e:	1821      	adds	r1, r4, r0
 8006c90:	428b      	cmp	r3, r1
 8006c92:	bf01      	itttt	eq
 8006c94:	6819      	ldreq	r1, [r3, #0]
 8006c96:	685b      	ldreq	r3, [r3, #4]
 8006c98:	1809      	addeq	r1, r1, r0
 8006c9a:	6021      	streq	r1, [r4, #0]
 8006c9c:	6063      	str	r3, [r4, #4]
 8006c9e:	6054      	str	r4, [r2, #4]
 8006ca0:	e7cb      	b.n	8006c3a <_free_r+0x22>
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	20000980 	.word	0x20000980

08006ca8 <malloc>:
 8006ca8:	4b02      	ldr	r3, [pc, #8]	@ (8006cb4 <malloc+0xc>)
 8006caa:	4601      	mov	r1, r0
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	f000 b825 	b.w	8006cfc <_malloc_r>
 8006cb2:	bf00      	nop
 8006cb4:	20000018 	.word	0x20000018

08006cb8 <sbrk_aligned>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	4e0f      	ldr	r6, [pc, #60]	@ (8006cf8 <sbrk_aligned+0x40>)
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	6831      	ldr	r1, [r6, #0]
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	b911      	cbnz	r1, 8006cca <sbrk_aligned+0x12>
 8006cc4:	f001 fdf6 	bl	80088b4 <_sbrk_r>
 8006cc8:	6030      	str	r0, [r6, #0]
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f001 fdf1 	bl	80088b4 <_sbrk_r>
 8006cd2:	1c43      	adds	r3, r0, #1
 8006cd4:	d103      	bne.n	8006cde <sbrk_aligned+0x26>
 8006cd6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006cda:	4620      	mov	r0, r4
 8006cdc:	bd70      	pop	{r4, r5, r6, pc}
 8006cde:	1cc4      	adds	r4, r0, #3
 8006ce0:	f024 0403 	bic.w	r4, r4, #3
 8006ce4:	42a0      	cmp	r0, r4
 8006ce6:	d0f8      	beq.n	8006cda <sbrk_aligned+0x22>
 8006ce8:	1a21      	subs	r1, r4, r0
 8006cea:	4628      	mov	r0, r5
 8006cec:	f001 fde2 	bl	80088b4 <_sbrk_r>
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d1f2      	bne.n	8006cda <sbrk_aligned+0x22>
 8006cf4:	e7ef      	b.n	8006cd6 <sbrk_aligned+0x1e>
 8006cf6:	bf00      	nop
 8006cf8:	2000097c 	.word	0x2000097c

08006cfc <_malloc_r>:
 8006cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d00:	1ccd      	adds	r5, r1, #3
 8006d02:	f025 0503 	bic.w	r5, r5, #3
 8006d06:	3508      	adds	r5, #8
 8006d08:	2d0c      	cmp	r5, #12
 8006d0a:	bf38      	it	cc
 8006d0c:	250c      	movcc	r5, #12
 8006d0e:	2d00      	cmp	r5, #0
 8006d10:	4606      	mov	r6, r0
 8006d12:	db01      	blt.n	8006d18 <_malloc_r+0x1c>
 8006d14:	42a9      	cmp	r1, r5
 8006d16:	d904      	bls.n	8006d22 <_malloc_r+0x26>
 8006d18:	230c      	movs	r3, #12
 8006d1a:	6033      	str	r3, [r6, #0]
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006df8 <_malloc_r+0xfc>
 8006d26:	f000 f869 	bl	8006dfc <__malloc_lock>
 8006d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8006d2e:	461c      	mov	r4, r3
 8006d30:	bb44      	cbnz	r4, 8006d84 <_malloc_r+0x88>
 8006d32:	4629      	mov	r1, r5
 8006d34:	4630      	mov	r0, r6
 8006d36:	f7ff ffbf 	bl	8006cb8 <sbrk_aligned>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	d158      	bne.n	8006df2 <_malloc_r+0xf6>
 8006d40:	f8d8 4000 	ldr.w	r4, [r8]
 8006d44:	4627      	mov	r7, r4
 8006d46:	2f00      	cmp	r7, #0
 8006d48:	d143      	bne.n	8006dd2 <_malloc_r+0xd6>
 8006d4a:	2c00      	cmp	r4, #0
 8006d4c:	d04b      	beq.n	8006de6 <_malloc_r+0xea>
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	4639      	mov	r1, r7
 8006d52:	4630      	mov	r0, r6
 8006d54:	eb04 0903 	add.w	r9, r4, r3
 8006d58:	f001 fdac 	bl	80088b4 <_sbrk_r>
 8006d5c:	4581      	cmp	r9, r0
 8006d5e:	d142      	bne.n	8006de6 <_malloc_r+0xea>
 8006d60:	6821      	ldr	r1, [r4, #0]
 8006d62:	4630      	mov	r0, r6
 8006d64:	1a6d      	subs	r5, r5, r1
 8006d66:	4629      	mov	r1, r5
 8006d68:	f7ff ffa6 	bl	8006cb8 <sbrk_aligned>
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	d03a      	beq.n	8006de6 <_malloc_r+0xea>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	442b      	add	r3, r5
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	f8d8 3000 	ldr.w	r3, [r8]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	bb62      	cbnz	r2, 8006dd8 <_malloc_r+0xdc>
 8006d7e:	f8c8 7000 	str.w	r7, [r8]
 8006d82:	e00f      	b.n	8006da4 <_malloc_r+0xa8>
 8006d84:	6822      	ldr	r2, [r4, #0]
 8006d86:	1b52      	subs	r2, r2, r5
 8006d88:	d420      	bmi.n	8006dcc <_malloc_r+0xd0>
 8006d8a:	2a0b      	cmp	r2, #11
 8006d8c:	d917      	bls.n	8006dbe <_malloc_r+0xc2>
 8006d8e:	1961      	adds	r1, r4, r5
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	6025      	str	r5, [r4, #0]
 8006d94:	bf18      	it	ne
 8006d96:	6059      	strne	r1, [r3, #4]
 8006d98:	6863      	ldr	r3, [r4, #4]
 8006d9a:	bf08      	it	eq
 8006d9c:	f8c8 1000 	streq.w	r1, [r8]
 8006da0:	5162      	str	r2, [r4, r5]
 8006da2:	604b      	str	r3, [r1, #4]
 8006da4:	4630      	mov	r0, r6
 8006da6:	f000 f82f 	bl	8006e08 <__malloc_unlock>
 8006daa:	f104 000b 	add.w	r0, r4, #11
 8006dae:	1d23      	adds	r3, r4, #4
 8006db0:	f020 0007 	bic.w	r0, r0, #7
 8006db4:	1ac2      	subs	r2, r0, r3
 8006db6:	bf1c      	itt	ne
 8006db8:	1a1b      	subne	r3, r3, r0
 8006dba:	50a3      	strne	r3, [r4, r2]
 8006dbc:	e7af      	b.n	8006d1e <_malloc_r+0x22>
 8006dbe:	6862      	ldr	r2, [r4, #4]
 8006dc0:	42a3      	cmp	r3, r4
 8006dc2:	bf0c      	ite	eq
 8006dc4:	f8c8 2000 	streq.w	r2, [r8]
 8006dc8:	605a      	strne	r2, [r3, #4]
 8006dca:	e7eb      	b.n	8006da4 <_malloc_r+0xa8>
 8006dcc:	4623      	mov	r3, r4
 8006dce:	6864      	ldr	r4, [r4, #4]
 8006dd0:	e7ae      	b.n	8006d30 <_malloc_r+0x34>
 8006dd2:	463c      	mov	r4, r7
 8006dd4:	687f      	ldr	r7, [r7, #4]
 8006dd6:	e7b6      	b.n	8006d46 <_malloc_r+0x4a>
 8006dd8:	461a      	mov	r2, r3
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	42a3      	cmp	r3, r4
 8006dde:	d1fb      	bne.n	8006dd8 <_malloc_r+0xdc>
 8006de0:	2300      	movs	r3, #0
 8006de2:	6053      	str	r3, [r2, #4]
 8006de4:	e7de      	b.n	8006da4 <_malloc_r+0xa8>
 8006de6:	230c      	movs	r3, #12
 8006de8:	4630      	mov	r0, r6
 8006dea:	6033      	str	r3, [r6, #0]
 8006dec:	f000 f80c 	bl	8006e08 <__malloc_unlock>
 8006df0:	e794      	b.n	8006d1c <_malloc_r+0x20>
 8006df2:	6005      	str	r5, [r0, #0]
 8006df4:	e7d6      	b.n	8006da4 <_malloc_r+0xa8>
 8006df6:	bf00      	nop
 8006df8:	20000980 	.word	0x20000980

08006dfc <__malloc_lock>:
 8006dfc:	4801      	ldr	r0, [pc, #4]	@ (8006e04 <__malloc_lock+0x8>)
 8006dfe:	f7ff b8a6 	b.w	8005f4e <__retarget_lock_acquire_recursive>
 8006e02:	bf00      	nop
 8006e04:	20000978 	.word	0x20000978

08006e08 <__malloc_unlock>:
 8006e08:	4801      	ldr	r0, [pc, #4]	@ (8006e10 <__malloc_unlock+0x8>)
 8006e0a:	f7ff b8a1 	b.w	8005f50 <__retarget_lock_release_recursive>
 8006e0e:	bf00      	nop
 8006e10:	20000978 	.word	0x20000978

08006e14 <_Balloc>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	69c6      	ldr	r6, [r0, #28]
 8006e18:	4604      	mov	r4, r0
 8006e1a:	460d      	mov	r5, r1
 8006e1c:	b976      	cbnz	r6, 8006e3c <_Balloc+0x28>
 8006e1e:	2010      	movs	r0, #16
 8006e20:	f7ff ff42 	bl	8006ca8 <malloc>
 8006e24:	4602      	mov	r2, r0
 8006e26:	61e0      	str	r0, [r4, #28]
 8006e28:	b920      	cbnz	r0, 8006e34 <_Balloc+0x20>
 8006e2a:	216b      	movs	r1, #107	@ 0x6b
 8006e2c:	4b17      	ldr	r3, [pc, #92]	@ (8006e8c <_Balloc+0x78>)
 8006e2e:	4818      	ldr	r0, [pc, #96]	@ (8006e90 <_Balloc+0x7c>)
 8006e30:	f001 fd64 	bl	80088fc <__assert_func>
 8006e34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e38:	6006      	str	r6, [r0, #0]
 8006e3a:	60c6      	str	r6, [r0, #12]
 8006e3c:	69e6      	ldr	r6, [r4, #28]
 8006e3e:	68f3      	ldr	r3, [r6, #12]
 8006e40:	b183      	cbz	r3, 8006e64 <_Balloc+0x50>
 8006e42:	69e3      	ldr	r3, [r4, #28]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e4a:	b9b8      	cbnz	r0, 8006e7c <_Balloc+0x68>
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	fa01 f605 	lsl.w	r6, r1, r5
 8006e52:	1d72      	adds	r2, r6, #5
 8006e54:	4620      	mov	r0, r4
 8006e56:	0092      	lsls	r2, r2, #2
 8006e58:	f001 fd6e 	bl	8008938 <_calloc_r>
 8006e5c:	b160      	cbz	r0, 8006e78 <_Balloc+0x64>
 8006e5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e62:	e00e      	b.n	8006e82 <_Balloc+0x6e>
 8006e64:	2221      	movs	r2, #33	@ 0x21
 8006e66:	2104      	movs	r1, #4
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f001 fd65 	bl	8008938 <_calloc_r>
 8006e6e:	69e3      	ldr	r3, [r4, #28]
 8006e70:	60f0      	str	r0, [r6, #12]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e4      	bne.n	8006e42 <_Balloc+0x2e>
 8006e78:	2000      	movs	r0, #0
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	6802      	ldr	r2, [r0, #0]
 8006e7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e82:	2300      	movs	r3, #0
 8006e84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e88:	e7f7      	b.n	8006e7a <_Balloc+0x66>
 8006e8a:	bf00      	nop
 8006e8c:	08009781 	.word	0x08009781
 8006e90:	08009801 	.word	0x08009801

08006e94 <_Bfree>:
 8006e94:	b570      	push	{r4, r5, r6, lr}
 8006e96:	69c6      	ldr	r6, [r0, #28]
 8006e98:	4605      	mov	r5, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	b976      	cbnz	r6, 8006ebc <_Bfree+0x28>
 8006e9e:	2010      	movs	r0, #16
 8006ea0:	f7ff ff02 	bl	8006ca8 <malloc>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	61e8      	str	r0, [r5, #28]
 8006ea8:	b920      	cbnz	r0, 8006eb4 <_Bfree+0x20>
 8006eaa:	218f      	movs	r1, #143	@ 0x8f
 8006eac:	4b08      	ldr	r3, [pc, #32]	@ (8006ed0 <_Bfree+0x3c>)
 8006eae:	4809      	ldr	r0, [pc, #36]	@ (8006ed4 <_Bfree+0x40>)
 8006eb0:	f001 fd24 	bl	80088fc <__assert_func>
 8006eb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006eb8:	6006      	str	r6, [r0, #0]
 8006eba:	60c6      	str	r6, [r0, #12]
 8006ebc:	b13c      	cbz	r4, 8006ece <_Bfree+0x3a>
 8006ebe:	69eb      	ldr	r3, [r5, #28]
 8006ec0:	6862      	ldr	r2, [r4, #4]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ec8:	6021      	str	r1, [r4, #0]
 8006eca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	08009781 	.word	0x08009781
 8006ed4:	08009801 	.word	0x08009801

08006ed8 <__multadd>:
 8006ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006edc:	4607      	mov	r7, r0
 8006ede:	460c      	mov	r4, r1
 8006ee0:	461e      	mov	r6, r3
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	690d      	ldr	r5, [r1, #16]
 8006ee6:	f101 0c14 	add.w	ip, r1, #20
 8006eea:	f8dc 3000 	ldr.w	r3, [ip]
 8006eee:	3001      	adds	r0, #1
 8006ef0:	b299      	uxth	r1, r3
 8006ef2:	fb02 6101 	mla	r1, r2, r1, r6
 8006ef6:	0c1e      	lsrs	r6, r3, #16
 8006ef8:	0c0b      	lsrs	r3, r1, #16
 8006efa:	fb02 3306 	mla	r3, r2, r6, r3
 8006efe:	b289      	uxth	r1, r1
 8006f00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f04:	4285      	cmp	r5, r0
 8006f06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f0a:	f84c 1b04 	str.w	r1, [ip], #4
 8006f0e:	dcec      	bgt.n	8006eea <__multadd+0x12>
 8006f10:	b30e      	cbz	r6, 8006f56 <__multadd+0x7e>
 8006f12:	68a3      	ldr	r3, [r4, #8]
 8006f14:	42ab      	cmp	r3, r5
 8006f16:	dc19      	bgt.n	8006f4c <__multadd+0x74>
 8006f18:	6861      	ldr	r1, [r4, #4]
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	3101      	adds	r1, #1
 8006f1e:	f7ff ff79 	bl	8006e14 <_Balloc>
 8006f22:	4680      	mov	r8, r0
 8006f24:	b928      	cbnz	r0, 8006f32 <__multadd+0x5a>
 8006f26:	4602      	mov	r2, r0
 8006f28:	21ba      	movs	r1, #186	@ 0xba
 8006f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f5c <__multadd+0x84>)
 8006f2c:	480c      	ldr	r0, [pc, #48]	@ (8006f60 <__multadd+0x88>)
 8006f2e:	f001 fce5 	bl	80088fc <__assert_func>
 8006f32:	6922      	ldr	r2, [r4, #16]
 8006f34:	f104 010c 	add.w	r1, r4, #12
 8006f38:	3202      	adds	r2, #2
 8006f3a:	0092      	lsls	r2, r2, #2
 8006f3c:	300c      	adds	r0, #12
 8006f3e:	f001 fcc9 	bl	80088d4 <memcpy>
 8006f42:	4621      	mov	r1, r4
 8006f44:	4638      	mov	r0, r7
 8006f46:	f7ff ffa5 	bl	8006e94 <_Bfree>
 8006f4a:	4644      	mov	r4, r8
 8006f4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f50:	3501      	adds	r5, #1
 8006f52:	615e      	str	r6, [r3, #20]
 8006f54:	6125      	str	r5, [r4, #16]
 8006f56:	4620      	mov	r0, r4
 8006f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f5c:	080097f0 	.word	0x080097f0
 8006f60:	08009801 	.word	0x08009801

08006f64 <__s2b>:
 8006f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f68:	4615      	mov	r5, r2
 8006f6a:	2209      	movs	r2, #9
 8006f6c:	461f      	mov	r7, r3
 8006f6e:	3308      	adds	r3, #8
 8006f70:	460c      	mov	r4, r1
 8006f72:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f76:	4606      	mov	r6, r0
 8006f78:	2201      	movs	r2, #1
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	db09      	blt.n	8006f94 <__s2b+0x30>
 8006f80:	4630      	mov	r0, r6
 8006f82:	f7ff ff47 	bl	8006e14 <_Balloc>
 8006f86:	b940      	cbnz	r0, 8006f9a <__s2b+0x36>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	21d3      	movs	r1, #211	@ 0xd3
 8006f8c:	4b18      	ldr	r3, [pc, #96]	@ (8006ff0 <__s2b+0x8c>)
 8006f8e:	4819      	ldr	r0, [pc, #100]	@ (8006ff4 <__s2b+0x90>)
 8006f90:	f001 fcb4 	bl	80088fc <__assert_func>
 8006f94:	0052      	lsls	r2, r2, #1
 8006f96:	3101      	adds	r1, #1
 8006f98:	e7f0      	b.n	8006f7c <__s2b+0x18>
 8006f9a:	9b08      	ldr	r3, [sp, #32]
 8006f9c:	2d09      	cmp	r5, #9
 8006f9e:	6143      	str	r3, [r0, #20]
 8006fa0:	f04f 0301 	mov.w	r3, #1
 8006fa4:	6103      	str	r3, [r0, #16]
 8006fa6:	dd16      	ble.n	8006fd6 <__s2b+0x72>
 8006fa8:	f104 0909 	add.w	r9, r4, #9
 8006fac:	46c8      	mov	r8, r9
 8006fae:	442c      	add	r4, r5
 8006fb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006fb4:	4601      	mov	r1, r0
 8006fb6:	220a      	movs	r2, #10
 8006fb8:	4630      	mov	r0, r6
 8006fba:	3b30      	subs	r3, #48	@ 0x30
 8006fbc:	f7ff ff8c 	bl	8006ed8 <__multadd>
 8006fc0:	45a0      	cmp	r8, r4
 8006fc2:	d1f5      	bne.n	8006fb0 <__s2b+0x4c>
 8006fc4:	f1a5 0408 	sub.w	r4, r5, #8
 8006fc8:	444c      	add	r4, r9
 8006fca:	1b2d      	subs	r5, r5, r4
 8006fcc:	1963      	adds	r3, r4, r5
 8006fce:	42bb      	cmp	r3, r7
 8006fd0:	db04      	blt.n	8006fdc <__s2b+0x78>
 8006fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd6:	2509      	movs	r5, #9
 8006fd8:	340a      	adds	r4, #10
 8006fda:	e7f6      	b.n	8006fca <__s2b+0x66>
 8006fdc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006fe0:	4601      	mov	r1, r0
 8006fe2:	220a      	movs	r2, #10
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	3b30      	subs	r3, #48	@ 0x30
 8006fe8:	f7ff ff76 	bl	8006ed8 <__multadd>
 8006fec:	e7ee      	b.n	8006fcc <__s2b+0x68>
 8006fee:	bf00      	nop
 8006ff0:	080097f0 	.word	0x080097f0
 8006ff4:	08009801 	.word	0x08009801

08006ff8 <__hi0bits>:
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006ffe:	bf3a      	itte	cc
 8007000:	0403      	lslcc	r3, r0, #16
 8007002:	2010      	movcc	r0, #16
 8007004:	2000      	movcs	r0, #0
 8007006:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800700a:	bf3c      	itt	cc
 800700c:	021b      	lslcc	r3, r3, #8
 800700e:	3008      	addcc	r0, #8
 8007010:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007014:	bf3c      	itt	cc
 8007016:	011b      	lslcc	r3, r3, #4
 8007018:	3004      	addcc	r0, #4
 800701a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800701e:	bf3c      	itt	cc
 8007020:	009b      	lslcc	r3, r3, #2
 8007022:	3002      	addcc	r0, #2
 8007024:	2b00      	cmp	r3, #0
 8007026:	db05      	blt.n	8007034 <__hi0bits+0x3c>
 8007028:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800702c:	f100 0001 	add.w	r0, r0, #1
 8007030:	bf08      	it	eq
 8007032:	2020      	moveq	r0, #32
 8007034:	4770      	bx	lr

08007036 <__lo0bits>:
 8007036:	6803      	ldr	r3, [r0, #0]
 8007038:	4602      	mov	r2, r0
 800703a:	f013 0007 	ands.w	r0, r3, #7
 800703e:	d00b      	beq.n	8007058 <__lo0bits+0x22>
 8007040:	07d9      	lsls	r1, r3, #31
 8007042:	d421      	bmi.n	8007088 <__lo0bits+0x52>
 8007044:	0798      	lsls	r0, r3, #30
 8007046:	bf49      	itett	mi
 8007048:	085b      	lsrmi	r3, r3, #1
 800704a:	089b      	lsrpl	r3, r3, #2
 800704c:	2001      	movmi	r0, #1
 800704e:	6013      	strmi	r3, [r2, #0]
 8007050:	bf5c      	itt	pl
 8007052:	2002      	movpl	r0, #2
 8007054:	6013      	strpl	r3, [r2, #0]
 8007056:	4770      	bx	lr
 8007058:	b299      	uxth	r1, r3
 800705a:	b909      	cbnz	r1, 8007060 <__lo0bits+0x2a>
 800705c:	2010      	movs	r0, #16
 800705e:	0c1b      	lsrs	r3, r3, #16
 8007060:	b2d9      	uxtb	r1, r3
 8007062:	b909      	cbnz	r1, 8007068 <__lo0bits+0x32>
 8007064:	3008      	adds	r0, #8
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	0719      	lsls	r1, r3, #28
 800706a:	bf04      	itt	eq
 800706c:	091b      	lsreq	r3, r3, #4
 800706e:	3004      	addeq	r0, #4
 8007070:	0799      	lsls	r1, r3, #30
 8007072:	bf04      	itt	eq
 8007074:	089b      	lsreq	r3, r3, #2
 8007076:	3002      	addeq	r0, #2
 8007078:	07d9      	lsls	r1, r3, #31
 800707a:	d403      	bmi.n	8007084 <__lo0bits+0x4e>
 800707c:	085b      	lsrs	r3, r3, #1
 800707e:	f100 0001 	add.w	r0, r0, #1
 8007082:	d003      	beq.n	800708c <__lo0bits+0x56>
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	4770      	bx	lr
 8007088:	2000      	movs	r0, #0
 800708a:	4770      	bx	lr
 800708c:	2020      	movs	r0, #32
 800708e:	4770      	bx	lr

08007090 <__i2b>:
 8007090:	b510      	push	{r4, lr}
 8007092:	460c      	mov	r4, r1
 8007094:	2101      	movs	r1, #1
 8007096:	f7ff febd 	bl	8006e14 <_Balloc>
 800709a:	4602      	mov	r2, r0
 800709c:	b928      	cbnz	r0, 80070aa <__i2b+0x1a>
 800709e:	f240 1145 	movw	r1, #325	@ 0x145
 80070a2:	4b04      	ldr	r3, [pc, #16]	@ (80070b4 <__i2b+0x24>)
 80070a4:	4804      	ldr	r0, [pc, #16]	@ (80070b8 <__i2b+0x28>)
 80070a6:	f001 fc29 	bl	80088fc <__assert_func>
 80070aa:	2301      	movs	r3, #1
 80070ac:	6144      	str	r4, [r0, #20]
 80070ae:	6103      	str	r3, [r0, #16]
 80070b0:	bd10      	pop	{r4, pc}
 80070b2:	bf00      	nop
 80070b4:	080097f0 	.word	0x080097f0
 80070b8:	08009801 	.word	0x08009801

080070bc <__multiply>:
 80070bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c0:	4614      	mov	r4, r2
 80070c2:	690a      	ldr	r2, [r1, #16]
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	460f      	mov	r7, r1
 80070c8:	429a      	cmp	r2, r3
 80070ca:	bfa2      	ittt	ge
 80070cc:	4623      	movge	r3, r4
 80070ce:	460c      	movge	r4, r1
 80070d0:	461f      	movge	r7, r3
 80070d2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80070d6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80070da:	68a3      	ldr	r3, [r4, #8]
 80070dc:	6861      	ldr	r1, [r4, #4]
 80070de:	eb0a 0609 	add.w	r6, sl, r9
 80070e2:	42b3      	cmp	r3, r6
 80070e4:	b085      	sub	sp, #20
 80070e6:	bfb8      	it	lt
 80070e8:	3101      	addlt	r1, #1
 80070ea:	f7ff fe93 	bl	8006e14 <_Balloc>
 80070ee:	b930      	cbnz	r0, 80070fe <__multiply+0x42>
 80070f0:	4602      	mov	r2, r0
 80070f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80070f6:	4b43      	ldr	r3, [pc, #268]	@ (8007204 <__multiply+0x148>)
 80070f8:	4843      	ldr	r0, [pc, #268]	@ (8007208 <__multiply+0x14c>)
 80070fa:	f001 fbff 	bl	80088fc <__assert_func>
 80070fe:	f100 0514 	add.w	r5, r0, #20
 8007102:	462b      	mov	r3, r5
 8007104:	2200      	movs	r2, #0
 8007106:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800710a:	4543      	cmp	r3, r8
 800710c:	d321      	bcc.n	8007152 <__multiply+0x96>
 800710e:	f107 0114 	add.w	r1, r7, #20
 8007112:	f104 0214 	add.w	r2, r4, #20
 8007116:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800711a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800711e:	9302      	str	r3, [sp, #8]
 8007120:	1b13      	subs	r3, r2, r4
 8007122:	3b15      	subs	r3, #21
 8007124:	f023 0303 	bic.w	r3, r3, #3
 8007128:	3304      	adds	r3, #4
 800712a:	f104 0715 	add.w	r7, r4, #21
 800712e:	42ba      	cmp	r2, r7
 8007130:	bf38      	it	cc
 8007132:	2304      	movcc	r3, #4
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	9b02      	ldr	r3, [sp, #8]
 8007138:	9103      	str	r1, [sp, #12]
 800713a:	428b      	cmp	r3, r1
 800713c:	d80c      	bhi.n	8007158 <__multiply+0x9c>
 800713e:	2e00      	cmp	r6, #0
 8007140:	dd03      	ble.n	800714a <__multiply+0x8e>
 8007142:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007146:	2b00      	cmp	r3, #0
 8007148:	d05a      	beq.n	8007200 <__multiply+0x144>
 800714a:	6106      	str	r6, [r0, #16]
 800714c:	b005      	add	sp, #20
 800714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007152:	f843 2b04 	str.w	r2, [r3], #4
 8007156:	e7d8      	b.n	800710a <__multiply+0x4e>
 8007158:	f8b1 a000 	ldrh.w	sl, [r1]
 800715c:	f1ba 0f00 	cmp.w	sl, #0
 8007160:	d023      	beq.n	80071aa <__multiply+0xee>
 8007162:	46a9      	mov	r9, r5
 8007164:	f04f 0c00 	mov.w	ip, #0
 8007168:	f104 0e14 	add.w	lr, r4, #20
 800716c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007170:	f8d9 3000 	ldr.w	r3, [r9]
 8007174:	fa1f fb87 	uxth.w	fp, r7
 8007178:	b29b      	uxth	r3, r3
 800717a:	fb0a 330b 	mla	r3, sl, fp, r3
 800717e:	4463      	add	r3, ip
 8007180:	f8d9 c000 	ldr.w	ip, [r9]
 8007184:	0c3f      	lsrs	r7, r7, #16
 8007186:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800718a:	fb0a c707 	mla	r7, sl, r7, ip
 800718e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007192:	b29b      	uxth	r3, r3
 8007194:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007198:	4572      	cmp	r2, lr
 800719a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800719e:	f849 3b04 	str.w	r3, [r9], #4
 80071a2:	d8e3      	bhi.n	800716c <__multiply+0xb0>
 80071a4:	9b01      	ldr	r3, [sp, #4]
 80071a6:	f845 c003 	str.w	ip, [r5, r3]
 80071aa:	9b03      	ldr	r3, [sp, #12]
 80071ac:	3104      	adds	r1, #4
 80071ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80071b2:	f1b9 0f00 	cmp.w	r9, #0
 80071b6:	d021      	beq.n	80071fc <__multiply+0x140>
 80071b8:	46ae      	mov	lr, r5
 80071ba:	f04f 0a00 	mov.w	sl, #0
 80071be:	682b      	ldr	r3, [r5, #0]
 80071c0:	f104 0c14 	add.w	ip, r4, #20
 80071c4:	f8bc b000 	ldrh.w	fp, [ip]
 80071c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	fb09 770b 	mla	r7, r9, fp, r7
 80071d2:	4457      	add	r7, sl
 80071d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071d8:	f84e 3b04 	str.w	r3, [lr], #4
 80071dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071e4:	f8be 3000 	ldrh.w	r3, [lr]
 80071e8:	4562      	cmp	r2, ip
 80071ea:	fb09 330a 	mla	r3, r9, sl, r3
 80071ee:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80071f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071f6:	d8e5      	bhi.n	80071c4 <__multiply+0x108>
 80071f8:	9f01      	ldr	r7, [sp, #4]
 80071fa:	51eb      	str	r3, [r5, r7]
 80071fc:	3504      	adds	r5, #4
 80071fe:	e79a      	b.n	8007136 <__multiply+0x7a>
 8007200:	3e01      	subs	r6, #1
 8007202:	e79c      	b.n	800713e <__multiply+0x82>
 8007204:	080097f0 	.word	0x080097f0
 8007208:	08009801 	.word	0x08009801

0800720c <__pow5mult>:
 800720c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007210:	4615      	mov	r5, r2
 8007212:	f012 0203 	ands.w	r2, r2, #3
 8007216:	4607      	mov	r7, r0
 8007218:	460e      	mov	r6, r1
 800721a:	d007      	beq.n	800722c <__pow5mult+0x20>
 800721c:	4c25      	ldr	r4, [pc, #148]	@ (80072b4 <__pow5mult+0xa8>)
 800721e:	3a01      	subs	r2, #1
 8007220:	2300      	movs	r3, #0
 8007222:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007226:	f7ff fe57 	bl	8006ed8 <__multadd>
 800722a:	4606      	mov	r6, r0
 800722c:	10ad      	asrs	r5, r5, #2
 800722e:	d03d      	beq.n	80072ac <__pow5mult+0xa0>
 8007230:	69fc      	ldr	r4, [r7, #28]
 8007232:	b97c      	cbnz	r4, 8007254 <__pow5mult+0x48>
 8007234:	2010      	movs	r0, #16
 8007236:	f7ff fd37 	bl	8006ca8 <malloc>
 800723a:	4602      	mov	r2, r0
 800723c:	61f8      	str	r0, [r7, #28]
 800723e:	b928      	cbnz	r0, 800724c <__pow5mult+0x40>
 8007240:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007244:	4b1c      	ldr	r3, [pc, #112]	@ (80072b8 <__pow5mult+0xac>)
 8007246:	481d      	ldr	r0, [pc, #116]	@ (80072bc <__pow5mult+0xb0>)
 8007248:	f001 fb58 	bl	80088fc <__assert_func>
 800724c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007250:	6004      	str	r4, [r0, #0]
 8007252:	60c4      	str	r4, [r0, #12]
 8007254:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007258:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800725c:	b94c      	cbnz	r4, 8007272 <__pow5mult+0x66>
 800725e:	f240 2171 	movw	r1, #625	@ 0x271
 8007262:	4638      	mov	r0, r7
 8007264:	f7ff ff14 	bl	8007090 <__i2b>
 8007268:	2300      	movs	r3, #0
 800726a:	4604      	mov	r4, r0
 800726c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007270:	6003      	str	r3, [r0, #0]
 8007272:	f04f 0900 	mov.w	r9, #0
 8007276:	07eb      	lsls	r3, r5, #31
 8007278:	d50a      	bpl.n	8007290 <__pow5mult+0x84>
 800727a:	4631      	mov	r1, r6
 800727c:	4622      	mov	r2, r4
 800727e:	4638      	mov	r0, r7
 8007280:	f7ff ff1c 	bl	80070bc <__multiply>
 8007284:	4680      	mov	r8, r0
 8007286:	4631      	mov	r1, r6
 8007288:	4638      	mov	r0, r7
 800728a:	f7ff fe03 	bl	8006e94 <_Bfree>
 800728e:	4646      	mov	r6, r8
 8007290:	106d      	asrs	r5, r5, #1
 8007292:	d00b      	beq.n	80072ac <__pow5mult+0xa0>
 8007294:	6820      	ldr	r0, [r4, #0]
 8007296:	b938      	cbnz	r0, 80072a8 <__pow5mult+0x9c>
 8007298:	4622      	mov	r2, r4
 800729a:	4621      	mov	r1, r4
 800729c:	4638      	mov	r0, r7
 800729e:	f7ff ff0d 	bl	80070bc <__multiply>
 80072a2:	6020      	str	r0, [r4, #0]
 80072a4:	f8c0 9000 	str.w	r9, [r0]
 80072a8:	4604      	mov	r4, r0
 80072aa:	e7e4      	b.n	8007276 <__pow5mult+0x6a>
 80072ac:	4630      	mov	r0, r6
 80072ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072b2:	bf00      	nop
 80072b4:	0800985c 	.word	0x0800985c
 80072b8:	08009781 	.word	0x08009781
 80072bc:	08009801 	.word	0x08009801

080072c0 <__lshift>:
 80072c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c4:	460c      	mov	r4, r1
 80072c6:	4607      	mov	r7, r0
 80072c8:	4691      	mov	r9, r2
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	6849      	ldr	r1, [r1, #4]
 80072ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072d2:	68a3      	ldr	r3, [r4, #8]
 80072d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072d8:	f108 0601 	add.w	r6, r8, #1
 80072dc:	42b3      	cmp	r3, r6
 80072de:	db0b      	blt.n	80072f8 <__lshift+0x38>
 80072e0:	4638      	mov	r0, r7
 80072e2:	f7ff fd97 	bl	8006e14 <_Balloc>
 80072e6:	4605      	mov	r5, r0
 80072e8:	b948      	cbnz	r0, 80072fe <__lshift+0x3e>
 80072ea:	4602      	mov	r2, r0
 80072ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80072f0:	4b27      	ldr	r3, [pc, #156]	@ (8007390 <__lshift+0xd0>)
 80072f2:	4828      	ldr	r0, [pc, #160]	@ (8007394 <__lshift+0xd4>)
 80072f4:	f001 fb02 	bl	80088fc <__assert_func>
 80072f8:	3101      	adds	r1, #1
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	e7ee      	b.n	80072dc <__lshift+0x1c>
 80072fe:	2300      	movs	r3, #0
 8007300:	f100 0114 	add.w	r1, r0, #20
 8007304:	f100 0210 	add.w	r2, r0, #16
 8007308:	4618      	mov	r0, r3
 800730a:	4553      	cmp	r3, sl
 800730c:	db33      	blt.n	8007376 <__lshift+0xb6>
 800730e:	6920      	ldr	r0, [r4, #16]
 8007310:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007314:	f104 0314 	add.w	r3, r4, #20
 8007318:	f019 091f 	ands.w	r9, r9, #31
 800731c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007320:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007324:	d02b      	beq.n	800737e <__lshift+0xbe>
 8007326:	468a      	mov	sl, r1
 8007328:	2200      	movs	r2, #0
 800732a:	f1c9 0e20 	rsb	lr, r9, #32
 800732e:	6818      	ldr	r0, [r3, #0]
 8007330:	fa00 f009 	lsl.w	r0, r0, r9
 8007334:	4310      	orrs	r0, r2
 8007336:	f84a 0b04 	str.w	r0, [sl], #4
 800733a:	f853 2b04 	ldr.w	r2, [r3], #4
 800733e:	459c      	cmp	ip, r3
 8007340:	fa22 f20e 	lsr.w	r2, r2, lr
 8007344:	d8f3      	bhi.n	800732e <__lshift+0x6e>
 8007346:	ebac 0304 	sub.w	r3, ip, r4
 800734a:	3b15      	subs	r3, #21
 800734c:	f023 0303 	bic.w	r3, r3, #3
 8007350:	3304      	adds	r3, #4
 8007352:	f104 0015 	add.w	r0, r4, #21
 8007356:	4584      	cmp	ip, r0
 8007358:	bf38      	it	cc
 800735a:	2304      	movcc	r3, #4
 800735c:	50ca      	str	r2, [r1, r3]
 800735e:	b10a      	cbz	r2, 8007364 <__lshift+0xa4>
 8007360:	f108 0602 	add.w	r6, r8, #2
 8007364:	3e01      	subs	r6, #1
 8007366:	4638      	mov	r0, r7
 8007368:	4621      	mov	r1, r4
 800736a:	612e      	str	r6, [r5, #16]
 800736c:	f7ff fd92 	bl	8006e94 <_Bfree>
 8007370:	4628      	mov	r0, r5
 8007372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007376:	f842 0f04 	str.w	r0, [r2, #4]!
 800737a:	3301      	adds	r3, #1
 800737c:	e7c5      	b.n	800730a <__lshift+0x4a>
 800737e:	3904      	subs	r1, #4
 8007380:	f853 2b04 	ldr.w	r2, [r3], #4
 8007384:	459c      	cmp	ip, r3
 8007386:	f841 2f04 	str.w	r2, [r1, #4]!
 800738a:	d8f9      	bhi.n	8007380 <__lshift+0xc0>
 800738c:	e7ea      	b.n	8007364 <__lshift+0xa4>
 800738e:	bf00      	nop
 8007390:	080097f0 	.word	0x080097f0
 8007394:	08009801 	.word	0x08009801

08007398 <__mcmp>:
 8007398:	4603      	mov	r3, r0
 800739a:	690a      	ldr	r2, [r1, #16]
 800739c:	6900      	ldr	r0, [r0, #16]
 800739e:	b530      	push	{r4, r5, lr}
 80073a0:	1a80      	subs	r0, r0, r2
 80073a2:	d10e      	bne.n	80073c2 <__mcmp+0x2a>
 80073a4:	3314      	adds	r3, #20
 80073a6:	3114      	adds	r1, #20
 80073a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80073ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80073b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073b8:	4295      	cmp	r5, r2
 80073ba:	d003      	beq.n	80073c4 <__mcmp+0x2c>
 80073bc:	d205      	bcs.n	80073ca <__mcmp+0x32>
 80073be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073c2:	bd30      	pop	{r4, r5, pc}
 80073c4:	42a3      	cmp	r3, r4
 80073c6:	d3f3      	bcc.n	80073b0 <__mcmp+0x18>
 80073c8:	e7fb      	b.n	80073c2 <__mcmp+0x2a>
 80073ca:	2001      	movs	r0, #1
 80073cc:	e7f9      	b.n	80073c2 <__mcmp+0x2a>
	...

080073d0 <__mdiff>:
 80073d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	4689      	mov	r9, r1
 80073d6:	4606      	mov	r6, r0
 80073d8:	4611      	mov	r1, r2
 80073da:	4648      	mov	r0, r9
 80073dc:	4614      	mov	r4, r2
 80073de:	f7ff ffdb 	bl	8007398 <__mcmp>
 80073e2:	1e05      	subs	r5, r0, #0
 80073e4:	d112      	bne.n	800740c <__mdiff+0x3c>
 80073e6:	4629      	mov	r1, r5
 80073e8:	4630      	mov	r0, r6
 80073ea:	f7ff fd13 	bl	8006e14 <_Balloc>
 80073ee:	4602      	mov	r2, r0
 80073f0:	b928      	cbnz	r0, 80073fe <__mdiff+0x2e>
 80073f2:	f240 2137 	movw	r1, #567	@ 0x237
 80073f6:	4b3e      	ldr	r3, [pc, #248]	@ (80074f0 <__mdiff+0x120>)
 80073f8:	483e      	ldr	r0, [pc, #248]	@ (80074f4 <__mdiff+0x124>)
 80073fa:	f001 fa7f 	bl	80088fc <__assert_func>
 80073fe:	2301      	movs	r3, #1
 8007400:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007404:	4610      	mov	r0, r2
 8007406:	b003      	add	sp, #12
 8007408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740c:	bfbc      	itt	lt
 800740e:	464b      	movlt	r3, r9
 8007410:	46a1      	movlt	r9, r4
 8007412:	4630      	mov	r0, r6
 8007414:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007418:	bfba      	itte	lt
 800741a:	461c      	movlt	r4, r3
 800741c:	2501      	movlt	r5, #1
 800741e:	2500      	movge	r5, #0
 8007420:	f7ff fcf8 	bl	8006e14 <_Balloc>
 8007424:	4602      	mov	r2, r0
 8007426:	b918      	cbnz	r0, 8007430 <__mdiff+0x60>
 8007428:	f240 2145 	movw	r1, #581	@ 0x245
 800742c:	4b30      	ldr	r3, [pc, #192]	@ (80074f0 <__mdiff+0x120>)
 800742e:	e7e3      	b.n	80073f8 <__mdiff+0x28>
 8007430:	f100 0b14 	add.w	fp, r0, #20
 8007434:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007438:	f109 0310 	add.w	r3, r9, #16
 800743c:	60c5      	str	r5, [r0, #12]
 800743e:	f04f 0c00 	mov.w	ip, #0
 8007442:	f109 0514 	add.w	r5, r9, #20
 8007446:	46d9      	mov	r9, fp
 8007448:	6926      	ldr	r6, [r4, #16]
 800744a:	f104 0e14 	add.w	lr, r4, #20
 800744e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007452:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	9b01      	ldr	r3, [sp, #4]
 800745a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800745e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007462:	b281      	uxth	r1, r0
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	fa1f f38a 	uxth.w	r3, sl
 800746a:	1a5b      	subs	r3, r3, r1
 800746c:	0c00      	lsrs	r0, r0, #16
 800746e:	4463      	add	r3, ip
 8007470:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007474:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007478:	b29b      	uxth	r3, r3
 800747a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800747e:	4576      	cmp	r6, lr
 8007480:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007484:	f849 3b04 	str.w	r3, [r9], #4
 8007488:	d8e6      	bhi.n	8007458 <__mdiff+0x88>
 800748a:	1b33      	subs	r3, r6, r4
 800748c:	3b15      	subs	r3, #21
 800748e:	f023 0303 	bic.w	r3, r3, #3
 8007492:	3415      	adds	r4, #21
 8007494:	3304      	adds	r3, #4
 8007496:	42a6      	cmp	r6, r4
 8007498:	bf38      	it	cc
 800749a:	2304      	movcc	r3, #4
 800749c:	441d      	add	r5, r3
 800749e:	445b      	add	r3, fp
 80074a0:	461e      	mov	r6, r3
 80074a2:	462c      	mov	r4, r5
 80074a4:	4544      	cmp	r4, r8
 80074a6:	d30e      	bcc.n	80074c6 <__mdiff+0xf6>
 80074a8:	f108 0103 	add.w	r1, r8, #3
 80074ac:	1b49      	subs	r1, r1, r5
 80074ae:	f021 0103 	bic.w	r1, r1, #3
 80074b2:	3d03      	subs	r5, #3
 80074b4:	45a8      	cmp	r8, r5
 80074b6:	bf38      	it	cc
 80074b8:	2100      	movcc	r1, #0
 80074ba:	440b      	add	r3, r1
 80074bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074c0:	b199      	cbz	r1, 80074ea <__mdiff+0x11a>
 80074c2:	6117      	str	r7, [r2, #16]
 80074c4:	e79e      	b.n	8007404 <__mdiff+0x34>
 80074c6:	46e6      	mov	lr, ip
 80074c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80074cc:	fa1f fc81 	uxth.w	ip, r1
 80074d0:	44f4      	add	ip, lr
 80074d2:	0c08      	lsrs	r0, r1, #16
 80074d4:	4471      	add	r1, lr
 80074d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80074da:	b289      	uxth	r1, r1
 80074dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80074e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074e4:	f846 1b04 	str.w	r1, [r6], #4
 80074e8:	e7dc      	b.n	80074a4 <__mdiff+0xd4>
 80074ea:	3f01      	subs	r7, #1
 80074ec:	e7e6      	b.n	80074bc <__mdiff+0xec>
 80074ee:	bf00      	nop
 80074f0:	080097f0 	.word	0x080097f0
 80074f4:	08009801 	.word	0x08009801

080074f8 <__ulp>:
 80074f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007534 <__ulp+0x3c>)
 80074fa:	400b      	ands	r3, r1
 80074fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007500:	2b00      	cmp	r3, #0
 8007502:	dc08      	bgt.n	8007516 <__ulp+0x1e>
 8007504:	425b      	negs	r3, r3
 8007506:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800750a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800750e:	da04      	bge.n	800751a <__ulp+0x22>
 8007510:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007514:	4113      	asrs	r3, r2
 8007516:	2200      	movs	r2, #0
 8007518:	e008      	b.n	800752c <__ulp+0x34>
 800751a:	f1a2 0314 	sub.w	r3, r2, #20
 800751e:	2b1e      	cmp	r3, #30
 8007520:	bfd6      	itet	le
 8007522:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007526:	2201      	movgt	r2, #1
 8007528:	40da      	lsrle	r2, r3
 800752a:	2300      	movs	r3, #0
 800752c:	4619      	mov	r1, r3
 800752e:	4610      	mov	r0, r2
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	7ff00000 	.word	0x7ff00000

08007538 <__b2d>:
 8007538:	6902      	ldr	r2, [r0, #16]
 800753a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753c:	f100 0614 	add.w	r6, r0, #20
 8007540:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007544:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007548:	4f1e      	ldr	r7, [pc, #120]	@ (80075c4 <__b2d+0x8c>)
 800754a:	4620      	mov	r0, r4
 800754c:	f7ff fd54 	bl	8006ff8 <__hi0bits>
 8007550:	4603      	mov	r3, r0
 8007552:	f1c0 0020 	rsb	r0, r0, #32
 8007556:	2b0a      	cmp	r3, #10
 8007558:	f1a2 0504 	sub.w	r5, r2, #4
 800755c:	6008      	str	r0, [r1, #0]
 800755e:	dc12      	bgt.n	8007586 <__b2d+0x4e>
 8007560:	42ae      	cmp	r6, r5
 8007562:	bf2c      	ite	cs
 8007564:	2200      	movcs	r2, #0
 8007566:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800756a:	f1c3 0c0b 	rsb	ip, r3, #11
 800756e:	3315      	adds	r3, #21
 8007570:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007574:	fa04 f303 	lsl.w	r3, r4, r3
 8007578:	fa22 f20c 	lsr.w	r2, r2, ip
 800757c:	ea4e 0107 	orr.w	r1, lr, r7
 8007580:	431a      	orrs	r2, r3
 8007582:	4610      	mov	r0, r2
 8007584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007586:	42ae      	cmp	r6, r5
 8007588:	bf36      	itet	cc
 800758a:	f1a2 0508 	subcc.w	r5, r2, #8
 800758e:	2200      	movcs	r2, #0
 8007590:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007594:	3b0b      	subs	r3, #11
 8007596:	d012      	beq.n	80075be <__b2d+0x86>
 8007598:	f1c3 0720 	rsb	r7, r3, #32
 800759c:	fa22 f107 	lsr.w	r1, r2, r7
 80075a0:	409c      	lsls	r4, r3
 80075a2:	430c      	orrs	r4, r1
 80075a4:	42b5      	cmp	r5, r6
 80075a6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80075aa:	bf94      	ite	ls
 80075ac:	2400      	movls	r4, #0
 80075ae:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80075b2:	409a      	lsls	r2, r3
 80075b4:	40fc      	lsrs	r4, r7
 80075b6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80075ba:	4322      	orrs	r2, r4
 80075bc:	e7e1      	b.n	8007582 <__b2d+0x4a>
 80075be:	ea44 0107 	orr.w	r1, r4, r7
 80075c2:	e7de      	b.n	8007582 <__b2d+0x4a>
 80075c4:	3ff00000 	.word	0x3ff00000

080075c8 <__d2b>:
 80075c8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80075cc:	2101      	movs	r1, #1
 80075ce:	4690      	mov	r8, r2
 80075d0:	4699      	mov	r9, r3
 80075d2:	9e08      	ldr	r6, [sp, #32]
 80075d4:	f7ff fc1e 	bl	8006e14 <_Balloc>
 80075d8:	4604      	mov	r4, r0
 80075da:	b930      	cbnz	r0, 80075ea <__d2b+0x22>
 80075dc:	4602      	mov	r2, r0
 80075de:	f240 310f 	movw	r1, #783	@ 0x30f
 80075e2:	4b23      	ldr	r3, [pc, #140]	@ (8007670 <__d2b+0xa8>)
 80075e4:	4823      	ldr	r0, [pc, #140]	@ (8007674 <__d2b+0xac>)
 80075e6:	f001 f989 	bl	80088fc <__assert_func>
 80075ea:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075f2:	b10d      	cbz	r5, 80075f8 <__d2b+0x30>
 80075f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075f8:	9301      	str	r3, [sp, #4]
 80075fa:	f1b8 0300 	subs.w	r3, r8, #0
 80075fe:	d024      	beq.n	800764a <__d2b+0x82>
 8007600:	4668      	mov	r0, sp
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	f7ff fd17 	bl	8007036 <__lo0bits>
 8007608:	e9dd 1200 	ldrd	r1, r2, [sp]
 800760c:	b1d8      	cbz	r0, 8007646 <__d2b+0x7e>
 800760e:	f1c0 0320 	rsb	r3, r0, #32
 8007612:	fa02 f303 	lsl.w	r3, r2, r3
 8007616:	430b      	orrs	r3, r1
 8007618:	40c2      	lsrs	r2, r0
 800761a:	6163      	str	r3, [r4, #20]
 800761c:	9201      	str	r2, [sp, #4]
 800761e:	9b01      	ldr	r3, [sp, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	bf0c      	ite	eq
 8007624:	2201      	moveq	r2, #1
 8007626:	2202      	movne	r2, #2
 8007628:	61a3      	str	r3, [r4, #24]
 800762a:	6122      	str	r2, [r4, #16]
 800762c:	b1ad      	cbz	r5, 800765a <__d2b+0x92>
 800762e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007632:	4405      	add	r5, r0
 8007634:	6035      	str	r5, [r6, #0]
 8007636:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800763a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800763c:	6018      	str	r0, [r3, #0]
 800763e:	4620      	mov	r0, r4
 8007640:	b002      	add	sp, #8
 8007642:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007646:	6161      	str	r1, [r4, #20]
 8007648:	e7e9      	b.n	800761e <__d2b+0x56>
 800764a:	a801      	add	r0, sp, #4
 800764c:	f7ff fcf3 	bl	8007036 <__lo0bits>
 8007650:	9b01      	ldr	r3, [sp, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	6163      	str	r3, [r4, #20]
 8007656:	3020      	adds	r0, #32
 8007658:	e7e7      	b.n	800762a <__d2b+0x62>
 800765a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800765e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007662:	6030      	str	r0, [r6, #0]
 8007664:	6918      	ldr	r0, [r3, #16]
 8007666:	f7ff fcc7 	bl	8006ff8 <__hi0bits>
 800766a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800766e:	e7e4      	b.n	800763a <__d2b+0x72>
 8007670:	080097f0 	.word	0x080097f0
 8007674:	08009801 	.word	0x08009801

08007678 <__ratio>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	b085      	sub	sp, #20
 800767e:	e9cd 1000 	strd	r1, r0, [sp]
 8007682:	a902      	add	r1, sp, #8
 8007684:	f7ff ff58 	bl	8007538 <__b2d>
 8007688:	468b      	mov	fp, r1
 800768a:	4606      	mov	r6, r0
 800768c:	460f      	mov	r7, r1
 800768e:	9800      	ldr	r0, [sp, #0]
 8007690:	a903      	add	r1, sp, #12
 8007692:	f7ff ff51 	bl	8007538 <__b2d>
 8007696:	460d      	mov	r5, r1
 8007698:	9b01      	ldr	r3, [sp, #4]
 800769a:	4689      	mov	r9, r1
 800769c:	6919      	ldr	r1, [r3, #16]
 800769e:	9b00      	ldr	r3, [sp, #0]
 80076a0:	4604      	mov	r4, r0
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	4630      	mov	r0, r6
 80076a6:	1ac9      	subs	r1, r1, r3
 80076a8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80076ac:	1a9b      	subs	r3, r3, r2
 80076ae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	bfcd      	iteet	gt
 80076b6:	463a      	movgt	r2, r7
 80076b8:	462a      	movle	r2, r5
 80076ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80076be:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80076c2:	bfd8      	it	le
 80076c4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80076c8:	464b      	mov	r3, r9
 80076ca:	4622      	mov	r2, r4
 80076cc:	4659      	mov	r1, fp
 80076ce:	f7f9 f82d 	bl	800072c <__aeabi_ddiv>
 80076d2:	b005      	add	sp, #20
 80076d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076d8 <__copybits>:
 80076d8:	3901      	subs	r1, #1
 80076da:	b570      	push	{r4, r5, r6, lr}
 80076dc:	1149      	asrs	r1, r1, #5
 80076de:	6914      	ldr	r4, [r2, #16]
 80076e0:	3101      	adds	r1, #1
 80076e2:	f102 0314 	add.w	r3, r2, #20
 80076e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80076ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80076ee:	1f05      	subs	r5, r0, #4
 80076f0:	42a3      	cmp	r3, r4
 80076f2:	d30c      	bcc.n	800770e <__copybits+0x36>
 80076f4:	1aa3      	subs	r3, r4, r2
 80076f6:	3b11      	subs	r3, #17
 80076f8:	f023 0303 	bic.w	r3, r3, #3
 80076fc:	3211      	adds	r2, #17
 80076fe:	42a2      	cmp	r2, r4
 8007700:	bf88      	it	hi
 8007702:	2300      	movhi	r3, #0
 8007704:	4418      	add	r0, r3
 8007706:	2300      	movs	r3, #0
 8007708:	4288      	cmp	r0, r1
 800770a:	d305      	bcc.n	8007718 <__copybits+0x40>
 800770c:	bd70      	pop	{r4, r5, r6, pc}
 800770e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007712:	f845 6f04 	str.w	r6, [r5, #4]!
 8007716:	e7eb      	b.n	80076f0 <__copybits+0x18>
 8007718:	f840 3b04 	str.w	r3, [r0], #4
 800771c:	e7f4      	b.n	8007708 <__copybits+0x30>

0800771e <__any_on>:
 800771e:	f100 0214 	add.w	r2, r0, #20
 8007722:	6900      	ldr	r0, [r0, #16]
 8007724:	114b      	asrs	r3, r1, #5
 8007726:	4298      	cmp	r0, r3
 8007728:	b510      	push	{r4, lr}
 800772a:	db11      	blt.n	8007750 <__any_on+0x32>
 800772c:	dd0a      	ble.n	8007744 <__any_on+0x26>
 800772e:	f011 011f 	ands.w	r1, r1, #31
 8007732:	d007      	beq.n	8007744 <__any_on+0x26>
 8007734:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007738:	fa24 f001 	lsr.w	r0, r4, r1
 800773c:	fa00 f101 	lsl.w	r1, r0, r1
 8007740:	428c      	cmp	r4, r1
 8007742:	d10b      	bne.n	800775c <__any_on+0x3e>
 8007744:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007748:	4293      	cmp	r3, r2
 800774a:	d803      	bhi.n	8007754 <__any_on+0x36>
 800774c:	2000      	movs	r0, #0
 800774e:	bd10      	pop	{r4, pc}
 8007750:	4603      	mov	r3, r0
 8007752:	e7f7      	b.n	8007744 <__any_on+0x26>
 8007754:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007758:	2900      	cmp	r1, #0
 800775a:	d0f5      	beq.n	8007748 <__any_on+0x2a>
 800775c:	2001      	movs	r0, #1
 800775e:	e7f6      	b.n	800774e <__any_on+0x30>

08007760 <sulp>:
 8007760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007764:	460f      	mov	r7, r1
 8007766:	4690      	mov	r8, r2
 8007768:	f7ff fec6 	bl	80074f8 <__ulp>
 800776c:	4604      	mov	r4, r0
 800776e:	460d      	mov	r5, r1
 8007770:	f1b8 0f00 	cmp.w	r8, #0
 8007774:	d011      	beq.n	800779a <sulp+0x3a>
 8007776:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800777a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800777e:	2b00      	cmp	r3, #0
 8007780:	dd0b      	ble.n	800779a <sulp+0x3a>
 8007782:	2400      	movs	r4, #0
 8007784:	051b      	lsls	r3, r3, #20
 8007786:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800778a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800778e:	4622      	mov	r2, r4
 8007790:	462b      	mov	r3, r5
 8007792:	f7f8 fea1 	bl	80004d8 <__aeabi_dmul>
 8007796:	4604      	mov	r4, r0
 8007798:	460d      	mov	r5, r1
 800779a:	4620      	mov	r0, r4
 800779c:	4629      	mov	r1, r5
 800779e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a2:	0000      	movs	r0, r0
 80077a4:	0000      	movs	r0, r0
	...

080077a8 <_strtod_l>:
 80077a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	b09f      	sub	sp, #124	@ 0x7c
 80077ae:	9217      	str	r2, [sp, #92]	@ 0x5c
 80077b0:	2200      	movs	r2, #0
 80077b2:	460c      	mov	r4, r1
 80077b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80077b6:	f04f 0a00 	mov.w	sl, #0
 80077ba:	f04f 0b00 	mov.w	fp, #0
 80077be:	460a      	mov	r2, r1
 80077c0:	9005      	str	r0, [sp, #20]
 80077c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80077c4:	7811      	ldrb	r1, [r2, #0]
 80077c6:	292b      	cmp	r1, #43	@ 0x2b
 80077c8:	d048      	beq.n	800785c <_strtod_l+0xb4>
 80077ca:	d836      	bhi.n	800783a <_strtod_l+0x92>
 80077cc:	290d      	cmp	r1, #13
 80077ce:	d830      	bhi.n	8007832 <_strtod_l+0x8a>
 80077d0:	2908      	cmp	r1, #8
 80077d2:	d830      	bhi.n	8007836 <_strtod_l+0x8e>
 80077d4:	2900      	cmp	r1, #0
 80077d6:	d039      	beq.n	800784c <_strtod_l+0xa4>
 80077d8:	2200      	movs	r2, #0
 80077da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80077dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80077de:	782a      	ldrb	r2, [r5, #0]
 80077e0:	2a30      	cmp	r2, #48	@ 0x30
 80077e2:	f040 80b1 	bne.w	8007948 <_strtod_l+0x1a0>
 80077e6:	786a      	ldrb	r2, [r5, #1]
 80077e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80077ec:	2a58      	cmp	r2, #88	@ 0x58
 80077ee:	d16c      	bne.n	80078ca <_strtod_l+0x122>
 80077f0:	9302      	str	r3, [sp, #8]
 80077f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077f4:	4a8e      	ldr	r2, [pc, #568]	@ (8007a30 <_strtod_l+0x288>)
 80077f6:	9301      	str	r3, [sp, #4]
 80077f8:	ab1a      	add	r3, sp, #104	@ 0x68
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	9805      	ldr	r0, [sp, #20]
 80077fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007800:	a919      	add	r1, sp, #100	@ 0x64
 8007802:	f001 f915 	bl	8008a30 <__gethex>
 8007806:	f010 060f 	ands.w	r6, r0, #15
 800780a:	4604      	mov	r4, r0
 800780c:	d005      	beq.n	800781a <_strtod_l+0x72>
 800780e:	2e06      	cmp	r6, #6
 8007810:	d126      	bne.n	8007860 <_strtod_l+0xb8>
 8007812:	2300      	movs	r3, #0
 8007814:	3501      	adds	r5, #1
 8007816:	9519      	str	r5, [sp, #100]	@ 0x64
 8007818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800781a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800781c:	2b00      	cmp	r3, #0
 800781e:	f040 8584 	bne.w	800832a <_strtod_l+0xb82>
 8007822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007824:	b1bb      	cbz	r3, 8007856 <_strtod_l+0xae>
 8007826:	4650      	mov	r0, sl
 8007828:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800782c:	b01f      	add	sp, #124	@ 0x7c
 800782e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007832:	2920      	cmp	r1, #32
 8007834:	d1d0      	bne.n	80077d8 <_strtod_l+0x30>
 8007836:	3201      	adds	r2, #1
 8007838:	e7c3      	b.n	80077c2 <_strtod_l+0x1a>
 800783a:	292d      	cmp	r1, #45	@ 0x2d
 800783c:	d1cc      	bne.n	80077d8 <_strtod_l+0x30>
 800783e:	2101      	movs	r1, #1
 8007840:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007842:	1c51      	adds	r1, r2, #1
 8007844:	9119      	str	r1, [sp, #100]	@ 0x64
 8007846:	7852      	ldrb	r2, [r2, #1]
 8007848:	2a00      	cmp	r2, #0
 800784a:	d1c7      	bne.n	80077dc <_strtod_l+0x34>
 800784c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800784e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007850:	2b00      	cmp	r3, #0
 8007852:	f040 8568 	bne.w	8008326 <_strtod_l+0xb7e>
 8007856:	4650      	mov	r0, sl
 8007858:	4659      	mov	r1, fp
 800785a:	e7e7      	b.n	800782c <_strtod_l+0x84>
 800785c:	2100      	movs	r1, #0
 800785e:	e7ef      	b.n	8007840 <_strtod_l+0x98>
 8007860:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007862:	b13a      	cbz	r2, 8007874 <_strtod_l+0xcc>
 8007864:	2135      	movs	r1, #53	@ 0x35
 8007866:	a81c      	add	r0, sp, #112	@ 0x70
 8007868:	f7ff ff36 	bl	80076d8 <__copybits>
 800786c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800786e:	9805      	ldr	r0, [sp, #20]
 8007870:	f7ff fb10 	bl	8006e94 <_Bfree>
 8007874:	3e01      	subs	r6, #1
 8007876:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007878:	2e04      	cmp	r6, #4
 800787a:	d806      	bhi.n	800788a <_strtod_l+0xe2>
 800787c:	e8df f006 	tbb	[pc, r6]
 8007880:	201d0314 	.word	0x201d0314
 8007884:	14          	.byte	0x14
 8007885:	00          	.byte	0x00
 8007886:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800788a:	05e1      	lsls	r1, r4, #23
 800788c:	bf48      	it	mi
 800788e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007892:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007896:	0d1b      	lsrs	r3, r3, #20
 8007898:	051b      	lsls	r3, r3, #20
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1bd      	bne.n	800781a <_strtod_l+0x72>
 800789e:	f7fe fb2b 	bl	8005ef8 <__errno>
 80078a2:	2322      	movs	r3, #34	@ 0x22
 80078a4:	6003      	str	r3, [r0, #0]
 80078a6:	e7b8      	b.n	800781a <_strtod_l+0x72>
 80078a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80078ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80078b0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80078b4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80078b8:	e7e7      	b.n	800788a <_strtod_l+0xe2>
 80078ba:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007a34 <_strtod_l+0x28c>
 80078be:	e7e4      	b.n	800788a <_strtod_l+0xe2>
 80078c0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80078c4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80078c8:	e7df      	b.n	800788a <_strtod_l+0xe2>
 80078ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80078d0:	785b      	ldrb	r3, [r3, #1]
 80078d2:	2b30      	cmp	r3, #48	@ 0x30
 80078d4:	d0f9      	beq.n	80078ca <_strtod_l+0x122>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d09f      	beq.n	800781a <_strtod_l+0x72>
 80078da:	2301      	movs	r3, #1
 80078dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80078de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078e0:	220a      	movs	r2, #10
 80078e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80078e4:	2300      	movs	r3, #0
 80078e6:	461f      	mov	r7, r3
 80078e8:	9308      	str	r3, [sp, #32]
 80078ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80078ec:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80078ee:	7805      	ldrb	r5, [r0, #0]
 80078f0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80078f4:	b2d9      	uxtb	r1, r3
 80078f6:	2909      	cmp	r1, #9
 80078f8:	d928      	bls.n	800794c <_strtod_l+0x1a4>
 80078fa:	2201      	movs	r2, #1
 80078fc:	494e      	ldr	r1, [pc, #312]	@ (8007a38 <_strtod_l+0x290>)
 80078fe:	f000 ffc7 	bl	8008890 <strncmp>
 8007902:	2800      	cmp	r0, #0
 8007904:	d032      	beq.n	800796c <_strtod_l+0x1c4>
 8007906:	2000      	movs	r0, #0
 8007908:	462a      	mov	r2, r5
 800790a:	4681      	mov	r9, r0
 800790c:	463d      	mov	r5, r7
 800790e:	4603      	mov	r3, r0
 8007910:	2a65      	cmp	r2, #101	@ 0x65
 8007912:	d001      	beq.n	8007918 <_strtod_l+0x170>
 8007914:	2a45      	cmp	r2, #69	@ 0x45
 8007916:	d114      	bne.n	8007942 <_strtod_l+0x19a>
 8007918:	b91d      	cbnz	r5, 8007922 <_strtod_l+0x17a>
 800791a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800791c:	4302      	orrs	r2, r0
 800791e:	d095      	beq.n	800784c <_strtod_l+0xa4>
 8007920:	2500      	movs	r5, #0
 8007922:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007924:	1c62      	adds	r2, r4, #1
 8007926:	9219      	str	r2, [sp, #100]	@ 0x64
 8007928:	7862      	ldrb	r2, [r4, #1]
 800792a:	2a2b      	cmp	r2, #43	@ 0x2b
 800792c:	d077      	beq.n	8007a1e <_strtod_l+0x276>
 800792e:	2a2d      	cmp	r2, #45	@ 0x2d
 8007930:	d07b      	beq.n	8007a2a <_strtod_l+0x282>
 8007932:	f04f 0c00 	mov.w	ip, #0
 8007936:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800793a:	2909      	cmp	r1, #9
 800793c:	f240 8082 	bls.w	8007a44 <_strtod_l+0x29c>
 8007940:	9419      	str	r4, [sp, #100]	@ 0x64
 8007942:	f04f 0800 	mov.w	r8, #0
 8007946:	e0a2      	b.n	8007a8e <_strtod_l+0x2e6>
 8007948:	2300      	movs	r3, #0
 800794a:	e7c7      	b.n	80078dc <_strtod_l+0x134>
 800794c:	2f08      	cmp	r7, #8
 800794e:	bfd5      	itete	le
 8007950:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007952:	9908      	ldrgt	r1, [sp, #32]
 8007954:	fb02 3301 	mlale	r3, r2, r1, r3
 8007958:	fb02 3301 	mlagt	r3, r2, r1, r3
 800795c:	f100 0001 	add.w	r0, r0, #1
 8007960:	bfd4      	ite	le
 8007962:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007964:	9308      	strgt	r3, [sp, #32]
 8007966:	3701      	adds	r7, #1
 8007968:	9019      	str	r0, [sp, #100]	@ 0x64
 800796a:	e7bf      	b.n	80078ec <_strtod_l+0x144>
 800796c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	9219      	str	r2, [sp, #100]	@ 0x64
 8007972:	785a      	ldrb	r2, [r3, #1]
 8007974:	b37f      	cbz	r7, 80079d6 <_strtod_l+0x22e>
 8007976:	4681      	mov	r9, r0
 8007978:	463d      	mov	r5, r7
 800797a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800797e:	2b09      	cmp	r3, #9
 8007980:	d912      	bls.n	80079a8 <_strtod_l+0x200>
 8007982:	2301      	movs	r3, #1
 8007984:	e7c4      	b.n	8007910 <_strtod_l+0x168>
 8007986:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007988:	3001      	adds	r0, #1
 800798a:	1c5a      	adds	r2, r3, #1
 800798c:	9219      	str	r2, [sp, #100]	@ 0x64
 800798e:	785a      	ldrb	r2, [r3, #1]
 8007990:	2a30      	cmp	r2, #48	@ 0x30
 8007992:	d0f8      	beq.n	8007986 <_strtod_l+0x1de>
 8007994:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007998:	2b08      	cmp	r3, #8
 800799a:	f200 84cb 	bhi.w	8008334 <_strtod_l+0xb8c>
 800799e:	4681      	mov	r9, r0
 80079a0:	2000      	movs	r0, #0
 80079a2:	4605      	mov	r5, r0
 80079a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80079a8:	3a30      	subs	r2, #48	@ 0x30
 80079aa:	f100 0301 	add.w	r3, r0, #1
 80079ae:	d02a      	beq.n	8007a06 <_strtod_l+0x25e>
 80079b0:	4499      	add	r9, r3
 80079b2:	210a      	movs	r1, #10
 80079b4:	462b      	mov	r3, r5
 80079b6:	eb00 0c05 	add.w	ip, r0, r5
 80079ba:	4563      	cmp	r3, ip
 80079bc:	d10d      	bne.n	80079da <_strtod_l+0x232>
 80079be:	1c69      	adds	r1, r5, #1
 80079c0:	4401      	add	r1, r0
 80079c2:	4428      	add	r0, r5
 80079c4:	2808      	cmp	r0, #8
 80079c6:	dc16      	bgt.n	80079f6 <_strtod_l+0x24e>
 80079c8:	230a      	movs	r3, #10
 80079ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80079cc:	fb03 2300 	mla	r3, r3, r0, r2
 80079d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80079d2:	2300      	movs	r3, #0
 80079d4:	e018      	b.n	8007a08 <_strtod_l+0x260>
 80079d6:	4638      	mov	r0, r7
 80079d8:	e7da      	b.n	8007990 <_strtod_l+0x1e8>
 80079da:	2b08      	cmp	r3, #8
 80079dc:	f103 0301 	add.w	r3, r3, #1
 80079e0:	dc03      	bgt.n	80079ea <_strtod_l+0x242>
 80079e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80079e4:	434e      	muls	r6, r1
 80079e6:	960a      	str	r6, [sp, #40]	@ 0x28
 80079e8:	e7e7      	b.n	80079ba <_strtod_l+0x212>
 80079ea:	2b10      	cmp	r3, #16
 80079ec:	bfde      	ittt	le
 80079ee:	9e08      	ldrle	r6, [sp, #32]
 80079f0:	434e      	mulle	r6, r1
 80079f2:	9608      	strle	r6, [sp, #32]
 80079f4:	e7e1      	b.n	80079ba <_strtod_l+0x212>
 80079f6:	280f      	cmp	r0, #15
 80079f8:	dceb      	bgt.n	80079d2 <_strtod_l+0x22a>
 80079fa:	230a      	movs	r3, #10
 80079fc:	9808      	ldr	r0, [sp, #32]
 80079fe:	fb03 2300 	mla	r3, r3, r0, r2
 8007a02:	9308      	str	r3, [sp, #32]
 8007a04:	e7e5      	b.n	80079d2 <_strtod_l+0x22a>
 8007a06:	4629      	mov	r1, r5
 8007a08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a0a:	460d      	mov	r5, r1
 8007a0c:	1c50      	adds	r0, r2, #1
 8007a0e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007a10:	7852      	ldrb	r2, [r2, #1]
 8007a12:	4618      	mov	r0, r3
 8007a14:	e7b1      	b.n	800797a <_strtod_l+0x1d2>
 8007a16:	f04f 0900 	mov.w	r9, #0
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e77d      	b.n	800791a <_strtod_l+0x172>
 8007a1e:	f04f 0c00 	mov.w	ip, #0
 8007a22:	1ca2      	adds	r2, r4, #2
 8007a24:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a26:	78a2      	ldrb	r2, [r4, #2]
 8007a28:	e785      	b.n	8007936 <_strtod_l+0x18e>
 8007a2a:	f04f 0c01 	mov.w	ip, #1
 8007a2e:	e7f8      	b.n	8007a22 <_strtod_l+0x27a>
 8007a30:	08009970 	.word	0x08009970
 8007a34:	7ff00000 	.word	0x7ff00000
 8007a38:	08009958 	.word	0x08009958
 8007a3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a3e:	1c51      	adds	r1, r2, #1
 8007a40:	9119      	str	r1, [sp, #100]	@ 0x64
 8007a42:	7852      	ldrb	r2, [r2, #1]
 8007a44:	2a30      	cmp	r2, #48	@ 0x30
 8007a46:	d0f9      	beq.n	8007a3c <_strtod_l+0x294>
 8007a48:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007a4c:	2908      	cmp	r1, #8
 8007a4e:	f63f af78 	bhi.w	8007942 <_strtod_l+0x19a>
 8007a52:	f04f 080a 	mov.w	r8, #10
 8007a56:	3a30      	subs	r2, #48	@ 0x30
 8007a58:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007a5e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007a60:	1c56      	adds	r6, r2, #1
 8007a62:	9619      	str	r6, [sp, #100]	@ 0x64
 8007a64:	7852      	ldrb	r2, [r2, #1]
 8007a66:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007a6a:	f1be 0f09 	cmp.w	lr, #9
 8007a6e:	d939      	bls.n	8007ae4 <_strtod_l+0x33c>
 8007a70:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007a72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007a76:	1a76      	subs	r6, r6, r1
 8007a78:	2e08      	cmp	r6, #8
 8007a7a:	dc03      	bgt.n	8007a84 <_strtod_l+0x2dc>
 8007a7c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007a7e:	4588      	cmp	r8, r1
 8007a80:	bfa8      	it	ge
 8007a82:	4688      	movge	r8, r1
 8007a84:	f1bc 0f00 	cmp.w	ip, #0
 8007a88:	d001      	beq.n	8007a8e <_strtod_l+0x2e6>
 8007a8a:	f1c8 0800 	rsb	r8, r8, #0
 8007a8e:	2d00      	cmp	r5, #0
 8007a90:	d14e      	bne.n	8007b30 <_strtod_l+0x388>
 8007a92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a94:	4308      	orrs	r0, r1
 8007a96:	f47f aec0 	bne.w	800781a <_strtod_l+0x72>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f47f aed6 	bne.w	800784c <_strtod_l+0xa4>
 8007aa0:	2a69      	cmp	r2, #105	@ 0x69
 8007aa2:	d028      	beq.n	8007af6 <_strtod_l+0x34e>
 8007aa4:	dc25      	bgt.n	8007af2 <_strtod_l+0x34a>
 8007aa6:	2a49      	cmp	r2, #73	@ 0x49
 8007aa8:	d025      	beq.n	8007af6 <_strtod_l+0x34e>
 8007aaa:	2a4e      	cmp	r2, #78	@ 0x4e
 8007aac:	f47f aece 	bne.w	800784c <_strtod_l+0xa4>
 8007ab0:	499a      	ldr	r1, [pc, #616]	@ (8007d1c <_strtod_l+0x574>)
 8007ab2:	a819      	add	r0, sp, #100	@ 0x64
 8007ab4:	f001 f9de 	bl	8008e74 <__match>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	f43f aec7 	beq.w	800784c <_strtod_l+0xa4>
 8007abe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b28      	cmp	r3, #40	@ 0x28
 8007ac4:	d12e      	bne.n	8007b24 <_strtod_l+0x37c>
 8007ac6:	4996      	ldr	r1, [pc, #600]	@ (8007d20 <_strtod_l+0x578>)
 8007ac8:	aa1c      	add	r2, sp, #112	@ 0x70
 8007aca:	a819      	add	r0, sp, #100	@ 0x64
 8007acc:	f001 f9e6 	bl	8008e9c <__hexnan>
 8007ad0:	2805      	cmp	r0, #5
 8007ad2:	d127      	bne.n	8007b24 <_strtod_l+0x37c>
 8007ad4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007ad6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007ada:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007ade:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007ae2:	e69a      	b.n	800781a <_strtod_l+0x72>
 8007ae4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007ae6:	fb08 2101 	mla	r1, r8, r1, r2
 8007aea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007aee:	920e      	str	r2, [sp, #56]	@ 0x38
 8007af0:	e7b5      	b.n	8007a5e <_strtod_l+0x2b6>
 8007af2:	2a6e      	cmp	r2, #110	@ 0x6e
 8007af4:	e7da      	b.n	8007aac <_strtod_l+0x304>
 8007af6:	498b      	ldr	r1, [pc, #556]	@ (8007d24 <_strtod_l+0x57c>)
 8007af8:	a819      	add	r0, sp, #100	@ 0x64
 8007afa:	f001 f9bb 	bl	8008e74 <__match>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f43f aea4 	beq.w	800784c <_strtod_l+0xa4>
 8007b04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b06:	4988      	ldr	r1, [pc, #544]	@ (8007d28 <_strtod_l+0x580>)
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	a819      	add	r0, sp, #100	@ 0x64
 8007b0c:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b0e:	f001 f9b1 	bl	8008e74 <__match>
 8007b12:	b910      	cbnz	r0, 8007b1a <_strtod_l+0x372>
 8007b14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b16:	3301      	adds	r3, #1
 8007b18:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b1a:	f04f 0a00 	mov.w	sl, #0
 8007b1e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8007d2c <_strtod_l+0x584>
 8007b22:	e67a      	b.n	800781a <_strtod_l+0x72>
 8007b24:	4882      	ldr	r0, [pc, #520]	@ (8007d30 <_strtod_l+0x588>)
 8007b26:	f000 fee3 	bl	80088f0 <nan>
 8007b2a:	4682      	mov	sl, r0
 8007b2c:	468b      	mov	fp, r1
 8007b2e:	e674      	b.n	800781a <_strtod_l+0x72>
 8007b30:	eba8 0309 	sub.w	r3, r8, r9
 8007b34:	2f00      	cmp	r7, #0
 8007b36:	bf08      	it	eq
 8007b38:	462f      	moveq	r7, r5
 8007b3a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b3c:	2d10      	cmp	r5, #16
 8007b3e:	462c      	mov	r4, r5
 8007b40:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b42:	bfa8      	it	ge
 8007b44:	2410      	movge	r4, #16
 8007b46:	f7f8 fc4d 	bl	80003e4 <__aeabi_ui2d>
 8007b4a:	2d09      	cmp	r5, #9
 8007b4c:	4682      	mov	sl, r0
 8007b4e:	468b      	mov	fp, r1
 8007b50:	dc11      	bgt.n	8007b76 <_strtod_l+0x3ce>
 8007b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f43f ae60 	beq.w	800781a <_strtod_l+0x72>
 8007b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b5c:	dd76      	ble.n	8007c4c <_strtod_l+0x4a4>
 8007b5e:	2b16      	cmp	r3, #22
 8007b60:	dc5d      	bgt.n	8007c1e <_strtod_l+0x476>
 8007b62:	4974      	ldr	r1, [pc, #464]	@ (8007d34 <_strtod_l+0x58c>)
 8007b64:	4652      	mov	r2, sl
 8007b66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b6a:	465b      	mov	r3, fp
 8007b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b70:	f7f8 fcb2 	bl	80004d8 <__aeabi_dmul>
 8007b74:	e7d9      	b.n	8007b2a <_strtod_l+0x382>
 8007b76:	4b6f      	ldr	r3, [pc, #444]	@ (8007d34 <_strtod_l+0x58c>)
 8007b78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007b80:	f7f8 fcaa 	bl	80004d8 <__aeabi_dmul>
 8007b84:	4682      	mov	sl, r0
 8007b86:	9808      	ldr	r0, [sp, #32]
 8007b88:	468b      	mov	fp, r1
 8007b8a:	f7f8 fc2b 	bl	80003e4 <__aeabi_ui2d>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	460b      	mov	r3, r1
 8007b92:	4650      	mov	r0, sl
 8007b94:	4659      	mov	r1, fp
 8007b96:	f7f8 fae9 	bl	800016c <__adddf3>
 8007b9a:	2d0f      	cmp	r5, #15
 8007b9c:	4682      	mov	sl, r0
 8007b9e:	468b      	mov	fp, r1
 8007ba0:	ddd7      	ble.n	8007b52 <_strtod_l+0x3aa>
 8007ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba4:	1b2c      	subs	r4, r5, r4
 8007ba6:	441c      	add	r4, r3
 8007ba8:	2c00      	cmp	r4, #0
 8007baa:	f340 8096 	ble.w	8007cda <_strtod_l+0x532>
 8007bae:	f014 030f 	ands.w	r3, r4, #15
 8007bb2:	d00a      	beq.n	8007bca <_strtod_l+0x422>
 8007bb4:	495f      	ldr	r1, [pc, #380]	@ (8007d34 <_strtod_l+0x58c>)
 8007bb6:	4652      	mov	r2, sl
 8007bb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007bbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bc0:	465b      	mov	r3, fp
 8007bc2:	f7f8 fc89 	bl	80004d8 <__aeabi_dmul>
 8007bc6:	4682      	mov	sl, r0
 8007bc8:	468b      	mov	fp, r1
 8007bca:	f034 040f 	bics.w	r4, r4, #15
 8007bce:	d073      	beq.n	8007cb8 <_strtod_l+0x510>
 8007bd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007bd4:	dd48      	ble.n	8007c68 <_strtod_l+0x4c0>
 8007bd6:	2400      	movs	r4, #0
 8007bd8:	46a0      	mov	r8, r4
 8007bda:	46a1      	mov	r9, r4
 8007bdc:	940a      	str	r4, [sp, #40]	@ 0x28
 8007bde:	2322      	movs	r3, #34	@ 0x22
 8007be0:	f04f 0a00 	mov.w	sl, #0
 8007be4:	9a05      	ldr	r2, [sp, #20]
 8007be6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8007d2c <_strtod_l+0x584>
 8007bea:	6013      	str	r3, [r2, #0]
 8007bec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f43f ae13 	beq.w	800781a <_strtod_l+0x72>
 8007bf4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bf6:	9805      	ldr	r0, [sp, #20]
 8007bf8:	f7ff f94c 	bl	8006e94 <_Bfree>
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	9805      	ldr	r0, [sp, #20]
 8007c00:	f7ff f948 	bl	8006e94 <_Bfree>
 8007c04:	4641      	mov	r1, r8
 8007c06:	9805      	ldr	r0, [sp, #20]
 8007c08:	f7ff f944 	bl	8006e94 <_Bfree>
 8007c0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c0e:	9805      	ldr	r0, [sp, #20]
 8007c10:	f7ff f940 	bl	8006e94 <_Bfree>
 8007c14:	4621      	mov	r1, r4
 8007c16:	9805      	ldr	r0, [sp, #20]
 8007c18:	f7ff f93c 	bl	8006e94 <_Bfree>
 8007c1c:	e5fd      	b.n	800781a <_strtod_l+0x72>
 8007c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007c24:	4293      	cmp	r3, r2
 8007c26:	dbbc      	blt.n	8007ba2 <_strtod_l+0x3fa>
 8007c28:	4c42      	ldr	r4, [pc, #264]	@ (8007d34 <_strtod_l+0x58c>)
 8007c2a:	f1c5 050f 	rsb	r5, r5, #15
 8007c2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007c32:	4652      	mov	r2, sl
 8007c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c38:	465b      	mov	r3, fp
 8007c3a:	f7f8 fc4d 	bl	80004d8 <__aeabi_dmul>
 8007c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c40:	1b5d      	subs	r5, r3, r5
 8007c42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007c46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c4a:	e791      	b.n	8007b70 <_strtod_l+0x3c8>
 8007c4c:	3316      	adds	r3, #22
 8007c4e:	dba8      	blt.n	8007ba2 <_strtod_l+0x3fa>
 8007c50:	4b38      	ldr	r3, [pc, #224]	@ (8007d34 <_strtod_l+0x58c>)
 8007c52:	eba9 0808 	sub.w	r8, r9, r8
 8007c56:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007c5a:	4650      	mov	r0, sl
 8007c5c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007c60:	4659      	mov	r1, fp
 8007c62:	f7f8 fd63 	bl	800072c <__aeabi_ddiv>
 8007c66:	e760      	b.n	8007b2a <_strtod_l+0x382>
 8007c68:	4b33      	ldr	r3, [pc, #204]	@ (8007d38 <_strtod_l+0x590>)
 8007c6a:	4650      	mov	r0, sl
 8007c6c:	9308      	str	r3, [sp, #32]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4659      	mov	r1, fp
 8007c72:	461e      	mov	r6, r3
 8007c74:	1124      	asrs	r4, r4, #4
 8007c76:	2c01      	cmp	r4, #1
 8007c78:	dc21      	bgt.n	8007cbe <_strtod_l+0x516>
 8007c7a:	b10b      	cbz	r3, 8007c80 <_strtod_l+0x4d8>
 8007c7c:	4682      	mov	sl, r0
 8007c7e:	468b      	mov	fp, r1
 8007c80:	492d      	ldr	r1, [pc, #180]	@ (8007d38 <_strtod_l+0x590>)
 8007c82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007c86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007c8a:	4652      	mov	r2, sl
 8007c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c90:	465b      	mov	r3, fp
 8007c92:	f7f8 fc21 	bl	80004d8 <__aeabi_dmul>
 8007c96:	4b25      	ldr	r3, [pc, #148]	@ (8007d2c <_strtod_l+0x584>)
 8007c98:	460a      	mov	r2, r1
 8007c9a:	400b      	ands	r3, r1
 8007c9c:	4927      	ldr	r1, [pc, #156]	@ (8007d3c <_strtod_l+0x594>)
 8007c9e:	4682      	mov	sl, r0
 8007ca0:	428b      	cmp	r3, r1
 8007ca2:	d898      	bhi.n	8007bd6 <_strtod_l+0x42e>
 8007ca4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	bf86      	itte	hi
 8007cac:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007cb0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007d40 <_strtod_l+0x598>
 8007cb4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007cb8:	2300      	movs	r3, #0
 8007cba:	9308      	str	r3, [sp, #32]
 8007cbc:	e07a      	b.n	8007db4 <_strtod_l+0x60c>
 8007cbe:	07e2      	lsls	r2, r4, #31
 8007cc0:	d505      	bpl.n	8007cce <_strtod_l+0x526>
 8007cc2:	9b08      	ldr	r3, [sp, #32]
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fc06 	bl	80004d8 <__aeabi_dmul>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	9a08      	ldr	r2, [sp, #32]
 8007cd0:	3601      	adds	r6, #1
 8007cd2:	3208      	adds	r2, #8
 8007cd4:	1064      	asrs	r4, r4, #1
 8007cd6:	9208      	str	r2, [sp, #32]
 8007cd8:	e7cd      	b.n	8007c76 <_strtod_l+0x4ce>
 8007cda:	d0ed      	beq.n	8007cb8 <_strtod_l+0x510>
 8007cdc:	4264      	negs	r4, r4
 8007cde:	f014 020f 	ands.w	r2, r4, #15
 8007ce2:	d00a      	beq.n	8007cfa <_strtod_l+0x552>
 8007ce4:	4b13      	ldr	r3, [pc, #76]	@ (8007d34 <_strtod_l+0x58c>)
 8007ce6:	4650      	mov	r0, sl
 8007ce8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cec:	4659      	mov	r1, fp
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	f7f8 fd1b 	bl	800072c <__aeabi_ddiv>
 8007cf6:	4682      	mov	sl, r0
 8007cf8:	468b      	mov	fp, r1
 8007cfa:	1124      	asrs	r4, r4, #4
 8007cfc:	d0dc      	beq.n	8007cb8 <_strtod_l+0x510>
 8007cfe:	2c1f      	cmp	r4, #31
 8007d00:	dd20      	ble.n	8007d44 <_strtod_l+0x59c>
 8007d02:	2400      	movs	r4, #0
 8007d04:	46a0      	mov	r8, r4
 8007d06:	46a1      	mov	r9, r4
 8007d08:	940a      	str	r4, [sp, #40]	@ 0x28
 8007d0a:	2322      	movs	r3, #34	@ 0x22
 8007d0c:	9a05      	ldr	r2, [sp, #20]
 8007d0e:	f04f 0a00 	mov.w	sl, #0
 8007d12:	f04f 0b00 	mov.w	fp, #0
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	e768      	b.n	8007bec <_strtod_l+0x444>
 8007d1a:	bf00      	nop
 8007d1c:	08009748 	.word	0x08009748
 8007d20:	0800995c 	.word	0x0800995c
 8007d24:	08009740 	.word	0x08009740
 8007d28:	08009777 	.word	0x08009777
 8007d2c:	7ff00000 	.word	0x7ff00000
 8007d30:	08009a04 	.word	0x08009a04
 8007d34:	08009890 	.word	0x08009890
 8007d38:	08009868 	.word	0x08009868
 8007d3c:	7ca00000 	.word	0x7ca00000
 8007d40:	7fefffff 	.word	0x7fefffff
 8007d44:	f014 0310 	ands.w	r3, r4, #16
 8007d48:	bf18      	it	ne
 8007d4a:	236a      	movne	r3, #106	@ 0x6a
 8007d4c:	4650      	mov	r0, sl
 8007d4e:	9308      	str	r3, [sp, #32]
 8007d50:	4659      	mov	r1, fp
 8007d52:	2300      	movs	r3, #0
 8007d54:	4ea9      	ldr	r6, [pc, #676]	@ (8007ffc <_strtod_l+0x854>)
 8007d56:	07e2      	lsls	r2, r4, #31
 8007d58:	d504      	bpl.n	8007d64 <_strtod_l+0x5bc>
 8007d5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d5e:	f7f8 fbbb 	bl	80004d8 <__aeabi_dmul>
 8007d62:	2301      	movs	r3, #1
 8007d64:	1064      	asrs	r4, r4, #1
 8007d66:	f106 0608 	add.w	r6, r6, #8
 8007d6a:	d1f4      	bne.n	8007d56 <_strtod_l+0x5ae>
 8007d6c:	b10b      	cbz	r3, 8007d72 <_strtod_l+0x5ca>
 8007d6e:	4682      	mov	sl, r0
 8007d70:	468b      	mov	fp, r1
 8007d72:	9b08      	ldr	r3, [sp, #32]
 8007d74:	b1b3      	cbz	r3, 8007da4 <_strtod_l+0x5fc>
 8007d76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007d7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	4659      	mov	r1, fp
 8007d82:	dd0f      	ble.n	8007da4 <_strtod_l+0x5fc>
 8007d84:	2b1f      	cmp	r3, #31
 8007d86:	dd57      	ble.n	8007e38 <_strtod_l+0x690>
 8007d88:	2b34      	cmp	r3, #52	@ 0x34
 8007d8a:	bfd8      	it	le
 8007d8c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007d90:	f04f 0a00 	mov.w	sl, #0
 8007d94:	bfcf      	iteee	gt
 8007d96:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007d9a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007d9e:	4093      	lslle	r3, r2
 8007da0:	ea03 0b01 	andle.w	fp, r3, r1
 8007da4:	2200      	movs	r2, #0
 8007da6:	2300      	movs	r3, #0
 8007da8:	4650      	mov	r0, sl
 8007daa:	4659      	mov	r1, fp
 8007dac:	f7f8 fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	d1a6      	bne.n	8007d02 <_strtod_l+0x55a>
 8007db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007db6:	463a      	mov	r2, r7
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	9805      	ldr	r0, [sp, #20]
 8007dc0:	f7ff f8d0 	bl	8006f64 <__s2b>
 8007dc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	f43f af05 	beq.w	8007bd6 <_strtod_l+0x42e>
 8007dcc:	2400      	movs	r4, #0
 8007dce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dd0:	eba9 0308 	sub.w	r3, r9, r8
 8007dd4:	2a00      	cmp	r2, #0
 8007dd6:	bfa8      	it	ge
 8007dd8:	2300      	movge	r3, #0
 8007dda:	46a0      	mov	r8, r4
 8007ddc:	9312      	str	r3, [sp, #72]	@ 0x48
 8007dde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007de2:	9316      	str	r3, [sp, #88]	@ 0x58
 8007de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007de6:	9805      	ldr	r0, [sp, #20]
 8007de8:	6859      	ldr	r1, [r3, #4]
 8007dea:	f7ff f813 	bl	8006e14 <_Balloc>
 8007dee:	4681      	mov	r9, r0
 8007df0:	2800      	cmp	r0, #0
 8007df2:	f43f aef4 	beq.w	8007bde <_strtod_l+0x436>
 8007df6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007df8:	300c      	adds	r0, #12
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	f103 010c 	add.w	r1, r3, #12
 8007e00:	3202      	adds	r2, #2
 8007e02:	0092      	lsls	r2, r2, #2
 8007e04:	f000 fd66 	bl	80088d4 <memcpy>
 8007e08:	ab1c      	add	r3, sp, #112	@ 0x70
 8007e0a:	9301      	str	r3, [sp, #4]
 8007e0c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	4652      	mov	r2, sl
 8007e12:	465b      	mov	r3, fp
 8007e14:	9805      	ldr	r0, [sp, #20]
 8007e16:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007e1a:	f7ff fbd5 	bl	80075c8 <__d2b>
 8007e1e:	901a      	str	r0, [sp, #104]	@ 0x68
 8007e20:	2800      	cmp	r0, #0
 8007e22:	f43f aedc 	beq.w	8007bde <_strtod_l+0x436>
 8007e26:	2101      	movs	r1, #1
 8007e28:	9805      	ldr	r0, [sp, #20]
 8007e2a:	f7ff f931 	bl	8007090 <__i2b>
 8007e2e:	4680      	mov	r8, r0
 8007e30:	b948      	cbnz	r0, 8007e46 <_strtod_l+0x69e>
 8007e32:	f04f 0800 	mov.w	r8, #0
 8007e36:	e6d2      	b.n	8007bde <_strtod_l+0x436>
 8007e38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e40:	ea03 0a0a 	and.w	sl, r3, sl
 8007e44:	e7ae      	b.n	8007da4 <_strtod_l+0x5fc>
 8007e46:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007e48:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007e4a:	2d00      	cmp	r5, #0
 8007e4c:	bfab      	itete	ge
 8007e4e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007e50:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007e52:	18ef      	addge	r7, r5, r3
 8007e54:	1b5e      	sublt	r6, r3, r5
 8007e56:	9b08      	ldr	r3, [sp, #32]
 8007e58:	bfa8      	it	ge
 8007e5a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007e5c:	eba5 0503 	sub.w	r5, r5, r3
 8007e60:	4415      	add	r5, r2
 8007e62:	4b67      	ldr	r3, [pc, #412]	@ (8008000 <_strtod_l+0x858>)
 8007e64:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8007e68:	bfb8      	it	lt
 8007e6a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007e6c:	429d      	cmp	r5, r3
 8007e6e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007e72:	da50      	bge.n	8007f16 <_strtod_l+0x76e>
 8007e74:	1b5b      	subs	r3, r3, r5
 8007e76:	2b1f      	cmp	r3, #31
 8007e78:	f04f 0101 	mov.w	r1, #1
 8007e7c:	eba2 0203 	sub.w	r2, r2, r3
 8007e80:	dc3d      	bgt.n	8007efe <_strtod_l+0x756>
 8007e82:	fa01 f303 	lsl.w	r3, r1, r3
 8007e86:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e88:	2300      	movs	r3, #0
 8007e8a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e8c:	18bd      	adds	r5, r7, r2
 8007e8e:	9b08      	ldr	r3, [sp, #32]
 8007e90:	42af      	cmp	r7, r5
 8007e92:	4416      	add	r6, r2
 8007e94:	441e      	add	r6, r3
 8007e96:	463b      	mov	r3, r7
 8007e98:	bfa8      	it	ge
 8007e9a:	462b      	movge	r3, r5
 8007e9c:	42b3      	cmp	r3, r6
 8007e9e:	bfa8      	it	ge
 8007ea0:	4633      	movge	r3, r6
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bfc2      	ittt	gt
 8007ea6:	1aed      	subgt	r5, r5, r3
 8007ea8:	1af6      	subgt	r6, r6, r3
 8007eaa:	1aff      	subgt	r7, r7, r3
 8007eac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	dd16      	ble.n	8007ee0 <_strtod_l+0x738>
 8007eb2:	4641      	mov	r1, r8
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	9805      	ldr	r0, [sp, #20]
 8007eb8:	f7ff f9a8 	bl	800720c <__pow5mult>
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d0b7      	beq.n	8007e32 <_strtod_l+0x68a>
 8007ec2:	4601      	mov	r1, r0
 8007ec4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007ec6:	9805      	ldr	r0, [sp, #20]
 8007ec8:	f7ff f8f8 	bl	80070bc <__multiply>
 8007ecc:	900e      	str	r0, [sp, #56]	@ 0x38
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	f43f ae85 	beq.w	8007bde <_strtod_l+0x436>
 8007ed4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ed6:	9805      	ldr	r0, [sp, #20]
 8007ed8:	f7fe ffdc 	bl	8006e94 <_Bfree>
 8007edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ede:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ee0:	2d00      	cmp	r5, #0
 8007ee2:	dc1d      	bgt.n	8007f20 <_strtod_l+0x778>
 8007ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dd23      	ble.n	8007f32 <_strtod_l+0x78a>
 8007eea:	4649      	mov	r1, r9
 8007eec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007eee:	9805      	ldr	r0, [sp, #20]
 8007ef0:	f7ff f98c 	bl	800720c <__pow5mult>
 8007ef4:	4681      	mov	r9, r0
 8007ef6:	b9e0      	cbnz	r0, 8007f32 <_strtod_l+0x78a>
 8007ef8:	f04f 0900 	mov.w	r9, #0
 8007efc:	e66f      	b.n	8007bde <_strtod_l+0x436>
 8007efe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007f02:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007f06:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007f0a:	35e2      	adds	r5, #226	@ 0xe2
 8007f0c:	fa01 f305 	lsl.w	r3, r1, r5
 8007f10:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f12:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007f14:	e7ba      	b.n	8007e8c <_strtod_l+0x6e4>
 8007f16:	2300      	movs	r3, #0
 8007f18:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f1e:	e7b5      	b.n	8007e8c <_strtod_l+0x6e4>
 8007f20:	462a      	mov	r2, r5
 8007f22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f24:	9805      	ldr	r0, [sp, #20]
 8007f26:	f7ff f9cb 	bl	80072c0 <__lshift>
 8007f2a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d1d9      	bne.n	8007ee4 <_strtod_l+0x73c>
 8007f30:	e655      	b.n	8007bde <_strtod_l+0x436>
 8007f32:	2e00      	cmp	r6, #0
 8007f34:	dd07      	ble.n	8007f46 <_strtod_l+0x79e>
 8007f36:	4649      	mov	r1, r9
 8007f38:	4632      	mov	r2, r6
 8007f3a:	9805      	ldr	r0, [sp, #20]
 8007f3c:	f7ff f9c0 	bl	80072c0 <__lshift>
 8007f40:	4681      	mov	r9, r0
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d0d8      	beq.n	8007ef8 <_strtod_l+0x750>
 8007f46:	2f00      	cmp	r7, #0
 8007f48:	dd08      	ble.n	8007f5c <_strtod_l+0x7b4>
 8007f4a:	4641      	mov	r1, r8
 8007f4c:	463a      	mov	r2, r7
 8007f4e:	9805      	ldr	r0, [sp, #20]
 8007f50:	f7ff f9b6 	bl	80072c0 <__lshift>
 8007f54:	4680      	mov	r8, r0
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f43f ae41 	beq.w	8007bde <_strtod_l+0x436>
 8007f5c:	464a      	mov	r2, r9
 8007f5e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f60:	9805      	ldr	r0, [sp, #20]
 8007f62:	f7ff fa35 	bl	80073d0 <__mdiff>
 8007f66:	4604      	mov	r4, r0
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	f43f ae38 	beq.w	8007bde <_strtod_l+0x436>
 8007f6e:	68c3      	ldr	r3, [r0, #12]
 8007f70:	4641      	mov	r1, r8
 8007f72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f74:	2300      	movs	r3, #0
 8007f76:	60c3      	str	r3, [r0, #12]
 8007f78:	f7ff fa0e 	bl	8007398 <__mcmp>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	da45      	bge.n	800800c <_strtod_l+0x864>
 8007f80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f82:	ea53 030a 	orrs.w	r3, r3, sl
 8007f86:	d16b      	bne.n	8008060 <_strtod_l+0x8b8>
 8007f88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d167      	bne.n	8008060 <_strtod_l+0x8b8>
 8007f90:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007f94:	0d1b      	lsrs	r3, r3, #20
 8007f96:	051b      	lsls	r3, r3, #20
 8007f98:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007f9c:	d960      	bls.n	8008060 <_strtod_l+0x8b8>
 8007f9e:	6963      	ldr	r3, [r4, #20]
 8007fa0:	b913      	cbnz	r3, 8007fa8 <_strtod_l+0x800>
 8007fa2:	6923      	ldr	r3, [r4, #16]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	dd5b      	ble.n	8008060 <_strtod_l+0x8b8>
 8007fa8:	4621      	mov	r1, r4
 8007faa:	2201      	movs	r2, #1
 8007fac:	9805      	ldr	r0, [sp, #20]
 8007fae:	f7ff f987 	bl	80072c0 <__lshift>
 8007fb2:	4641      	mov	r1, r8
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	f7ff f9ef 	bl	8007398 <__mcmp>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	dd50      	ble.n	8008060 <_strtod_l+0x8b8>
 8007fbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fc2:	9a08      	ldr	r2, [sp, #32]
 8007fc4:	0d1b      	lsrs	r3, r3, #20
 8007fc6:	051b      	lsls	r3, r3, #20
 8007fc8:	2a00      	cmp	r2, #0
 8007fca:	d06a      	beq.n	80080a2 <_strtod_l+0x8fa>
 8007fcc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007fd0:	d867      	bhi.n	80080a2 <_strtod_l+0x8fa>
 8007fd2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007fd6:	f67f ae98 	bls.w	8007d0a <_strtod_l+0x562>
 8007fda:	4650      	mov	r0, sl
 8007fdc:	4659      	mov	r1, fp
 8007fde:	4b09      	ldr	r3, [pc, #36]	@ (8008004 <_strtod_l+0x85c>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f7f8 fa79 	bl	80004d8 <__aeabi_dmul>
 8007fe6:	4b08      	ldr	r3, [pc, #32]	@ (8008008 <_strtod_l+0x860>)
 8007fe8:	4682      	mov	sl, r0
 8007fea:	400b      	ands	r3, r1
 8007fec:	468b      	mov	fp, r1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f47f ae00 	bne.w	8007bf4 <_strtod_l+0x44c>
 8007ff4:	2322      	movs	r3, #34	@ 0x22
 8007ff6:	9a05      	ldr	r2, [sp, #20]
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	e5fb      	b.n	8007bf4 <_strtod_l+0x44c>
 8007ffc:	08009988 	.word	0x08009988
 8008000:	fffffc02 	.word	0xfffffc02
 8008004:	39500000 	.word	0x39500000
 8008008:	7ff00000 	.word	0x7ff00000
 800800c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008010:	d165      	bne.n	80080de <_strtod_l+0x936>
 8008012:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008014:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008018:	b35a      	cbz	r2, 8008072 <_strtod_l+0x8ca>
 800801a:	4a99      	ldr	r2, [pc, #612]	@ (8008280 <_strtod_l+0xad8>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d12b      	bne.n	8008078 <_strtod_l+0x8d0>
 8008020:	9b08      	ldr	r3, [sp, #32]
 8008022:	4651      	mov	r1, sl
 8008024:	b303      	cbz	r3, 8008068 <_strtod_l+0x8c0>
 8008026:	465a      	mov	r2, fp
 8008028:	4b96      	ldr	r3, [pc, #600]	@ (8008284 <_strtod_l+0xadc>)
 800802a:	4013      	ands	r3, r2
 800802c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008030:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008034:	d81b      	bhi.n	800806e <_strtod_l+0x8c6>
 8008036:	0d1b      	lsrs	r3, r3, #20
 8008038:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800803c:	fa02 f303 	lsl.w	r3, r2, r3
 8008040:	4299      	cmp	r1, r3
 8008042:	d119      	bne.n	8008078 <_strtod_l+0x8d0>
 8008044:	4b90      	ldr	r3, [pc, #576]	@ (8008288 <_strtod_l+0xae0>)
 8008046:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008048:	429a      	cmp	r2, r3
 800804a:	d102      	bne.n	8008052 <_strtod_l+0x8aa>
 800804c:	3101      	adds	r1, #1
 800804e:	f43f adc6 	beq.w	8007bde <_strtod_l+0x436>
 8008052:	f04f 0a00 	mov.w	sl, #0
 8008056:	4b8b      	ldr	r3, [pc, #556]	@ (8008284 <_strtod_l+0xadc>)
 8008058:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800805a:	401a      	ands	r2, r3
 800805c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008060:	9b08      	ldr	r3, [sp, #32]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1b9      	bne.n	8007fda <_strtod_l+0x832>
 8008066:	e5c5      	b.n	8007bf4 <_strtod_l+0x44c>
 8008068:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800806c:	e7e8      	b.n	8008040 <_strtod_l+0x898>
 800806e:	4613      	mov	r3, r2
 8008070:	e7e6      	b.n	8008040 <_strtod_l+0x898>
 8008072:	ea53 030a 	orrs.w	r3, r3, sl
 8008076:	d0a2      	beq.n	8007fbe <_strtod_l+0x816>
 8008078:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800807a:	b1db      	cbz	r3, 80080b4 <_strtod_l+0x90c>
 800807c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800807e:	4213      	tst	r3, r2
 8008080:	d0ee      	beq.n	8008060 <_strtod_l+0x8b8>
 8008082:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008084:	4650      	mov	r0, sl
 8008086:	4659      	mov	r1, fp
 8008088:	9a08      	ldr	r2, [sp, #32]
 800808a:	b1bb      	cbz	r3, 80080bc <_strtod_l+0x914>
 800808c:	f7ff fb68 	bl	8007760 <sulp>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008098:	f7f8 f868 	bl	800016c <__adddf3>
 800809c:	4682      	mov	sl, r0
 800809e:	468b      	mov	fp, r1
 80080a0:	e7de      	b.n	8008060 <_strtod_l+0x8b8>
 80080a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80080a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80080aa:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80080ae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80080b2:	e7d5      	b.n	8008060 <_strtod_l+0x8b8>
 80080b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80080b6:	ea13 0f0a 	tst.w	r3, sl
 80080ba:	e7e1      	b.n	8008080 <_strtod_l+0x8d8>
 80080bc:	f7ff fb50 	bl	8007760 <sulp>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080c8:	f7f8 f84e 	bl	8000168 <__aeabi_dsub>
 80080cc:	2200      	movs	r2, #0
 80080ce:	2300      	movs	r3, #0
 80080d0:	4682      	mov	sl, r0
 80080d2:	468b      	mov	fp, r1
 80080d4:	f7f8 fc68 	bl	80009a8 <__aeabi_dcmpeq>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d0c1      	beq.n	8008060 <_strtod_l+0x8b8>
 80080dc:	e615      	b.n	8007d0a <_strtod_l+0x562>
 80080de:	4641      	mov	r1, r8
 80080e0:	4620      	mov	r0, r4
 80080e2:	f7ff fac9 	bl	8007678 <__ratio>
 80080e6:	2200      	movs	r2, #0
 80080e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80080ec:	4606      	mov	r6, r0
 80080ee:	460f      	mov	r7, r1
 80080f0:	f7f8 fc6e 	bl	80009d0 <__aeabi_dcmple>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d06d      	beq.n	80081d4 <_strtod_l+0xa2c>
 80080f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d178      	bne.n	80081f0 <_strtod_l+0xa48>
 80080fe:	f1ba 0f00 	cmp.w	sl, #0
 8008102:	d156      	bne.n	80081b2 <_strtod_l+0xa0a>
 8008104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008106:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800810a:	2b00      	cmp	r3, #0
 800810c:	d158      	bne.n	80081c0 <_strtod_l+0xa18>
 800810e:	2200      	movs	r2, #0
 8008110:	4630      	mov	r0, r6
 8008112:	4639      	mov	r1, r7
 8008114:	4b5d      	ldr	r3, [pc, #372]	@ (800828c <_strtod_l+0xae4>)
 8008116:	f7f8 fc51 	bl	80009bc <__aeabi_dcmplt>
 800811a:	2800      	cmp	r0, #0
 800811c:	d157      	bne.n	80081ce <_strtod_l+0xa26>
 800811e:	4630      	mov	r0, r6
 8008120:	4639      	mov	r1, r7
 8008122:	2200      	movs	r2, #0
 8008124:	4b5a      	ldr	r3, [pc, #360]	@ (8008290 <_strtod_l+0xae8>)
 8008126:	f7f8 f9d7 	bl	80004d8 <__aeabi_dmul>
 800812a:	4606      	mov	r6, r0
 800812c:	460f      	mov	r7, r1
 800812e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008132:	9606      	str	r6, [sp, #24]
 8008134:	9307      	str	r3, [sp, #28]
 8008136:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800813a:	4d52      	ldr	r5, [pc, #328]	@ (8008284 <_strtod_l+0xadc>)
 800813c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008140:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008142:	401d      	ands	r5, r3
 8008144:	4b53      	ldr	r3, [pc, #332]	@ (8008294 <_strtod_l+0xaec>)
 8008146:	429d      	cmp	r5, r3
 8008148:	f040 80aa 	bne.w	80082a0 <_strtod_l+0xaf8>
 800814c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800814e:	4650      	mov	r0, sl
 8008150:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008154:	4659      	mov	r1, fp
 8008156:	f7ff f9cf 	bl	80074f8 <__ulp>
 800815a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800815e:	f7f8 f9bb 	bl	80004d8 <__aeabi_dmul>
 8008162:	4652      	mov	r2, sl
 8008164:	465b      	mov	r3, fp
 8008166:	f7f8 f801 	bl	800016c <__adddf3>
 800816a:	460b      	mov	r3, r1
 800816c:	4945      	ldr	r1, [pc, #276]	@ (8008284 <_strtod_l+0xadc>)
 800816e:	4a4a      	ldr	r2, [pc, #296]	@ (8008298 <_strtod_l+0xaf0>)
 8008170:	4019      	ands	r1, r3
 8008172:	4291      	cmp	r1, r2
 8008174:	4682      	mov	sl, r0
 8008176:	d942      	bls.n	80081fe <_strtod_l+0xa56>
 8008178:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800817a:	4b43      	ldr	r3, [pc, #268]	@ (8008288 <_strtod_l+0xae0>)
 800817c:	429a      	cmp	r2, r3
 800817e:	d103      	bne.n	8008188 <_strtod_l+0x9e0>
 8008180:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008182:	3301      	adds	r3, #1
 8008184:	f43f ad2b 	beq.w	8007bde <_strtod_l+0x436>
 8008188:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800818c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008288 <_strtod_l+0xae0>
 8008190:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008192:	9805      	ldr	r0, [sp, #20]
 8008194:	f7fe fe7e 	bl	8006e94 <_Bfree>
 8008198:	4649      	mov	r1, r9
 800819a:	9805      	ldr	r0, [sp, #20]
 800819c:	f7fe fe7a 	bl	8006e94 <_Bfree>
 80081a0:	4641      	mov	r1, r8
 80081a2:	9805      	ldr	r0, [sp, #20]
 80081a4:	f7fe fe76 	bl	8006e94 <_Bfree>
 80081a8:	4621      	mov	r1, r4
 80081aa:	9805      	ldr	r0, [sp, #20]
 80081ac:	f7fe fe72 	bl	8006e94 <_Bfree>
 80081b0:	e618      	b.n	8007de4 <_strtod_l+0x63c>
 80081b2:	f1ba 0f01 	cmp.w	sl, #1
 80081b6:	d103      	bne.n	80081c0 <_strtod_l+0xa18>
 80081b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f43f ada5 	beq.w	8007d0a <_strtod_l+0x562>
 80081c0:	2200      	movs	r2, #0
 80081c2:	4b36      	ldr	r3, [pc, #216]	@ (800829c <_strtod_l+0xaf4>)
 80081c4:	2600      	movs	r6, #0
 80081c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081ca:	4f30      	ldr	r7, [pc, #192]	@ (800828c <_strtod_l+0xae4>)
 80081cc:	e7b3      	b.n	8008136 <_strtod_l+0x98e>
 80081ce:	2600      	movs	r6, #0
 80081d0:	4f2f      	ldr	r7, [pc, #188]	@ (8008290 <_strtod_l+0xae8>)
 80081d2:	e7ac      	b.n	800812e <_strtod_l+0x986>
 80081d4:	4630      	mov	r0, r6
 80081d6:	4639      	mov	r1, r7
 80081d8:	4b2d      	ldr	r3, [pc, #180]	@ (8008290 <_strtod_l+0xae8>)
 80081da:	2200      	movs	r2, #0
 80081dc:	f7f8 f97c 	bl	80004d8 <__aeabi_dmul>
 80081e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081e2:	4606      	mov	r6, r0
 80081e4:	460f      	mov	r7, r1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0a1      	beq.n	800812e <_strtod_l+0x986>
 80081ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80081ee:	e7a2      	b.n	8008136 <_strtod_l+0x98e>
 80081f0:	2200      	movs	r2, #0
 80081f2:	4b26      	ldr	r3, [pc, #152]	@ (800828c <_strtod_l+0xae4>)
 80081f4:	4616      	mov	r6, r2
 80081f6:	461f      	mov	r7, r3
 80081f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081fc:	e79b      	b.n	8008136 <_strtod_l+0x98e>
 80081fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008202:	9b08      	ldr	r3, [sp, #32]
 8008204:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1c1      	bne.n	8008190 <_strtod_l+0x9e8>
 800820c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008210:	0d1b      	lsrs	r3, r3, #20
 8008212:	051b      	lsls	r3, r3, #20
 8008214:	429d      	cmp	r5, r3
 8008216:	d1bb      	bne.n	8008190 <_strtod_l+0x9e8>
 8008218:	4630      	mov	r0, r6
 800821a:	4639      	mov	r1, r7
 800821c:	f7f8 fca4 	bl	8000b68 <__aeabi_d2lz>
 8008220:	f7f8 f92c 	bl	800047c <__aeabi_l2d>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4630      	mov	r0, r6
 800822a:	4639      	mov	r1, r7
 800822c:	f7f7 ff9c 	bl	8000168 <__aeabi_dsub>
 8008230:	460b      	mov	r3, r1
 8008232:	4602      	mov	r2, r0
 8008234:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008238:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800823c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800823e:	ea46 060a 	orr.w	r6, r6, sl
 8008242:	431e      	orrs	r6, r3
 8008244:	d069      	beq.n	800831a <_strtod_l+0xb72>
 8008246:	a30a      	add	r3, pc, #40	@ (adr r3, 8008270 <_strtod_l+0xac8>)
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f7f8 fbb6 	bl	80009bc <__aeabi_dcmplt>
 8008250:	2800      	cmp	r0, #0
 8008252:	f47f accf 	bne.w	8007bf4 <_strtod_l+0x44c>
 8008256:	a308      	add	r3, pc, #32	@ (adr r3, 8008278 <_strtod_l+0xad0>)
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008260:	f7f8 fbca 	bl	80009f8 <__aeabi_dcmpgt>
 8008264:	2800      	cmp	r0, #0
 8008266:	d093      	beq.n	8008190 <_strtod_l+0x9e8>
 8008268:	e4c4      	b.n	8007bf4 <_strtod_l+0x44c>
 800826a:	bf00      	nop
 800826c:	f3af 8000 	nop.w
 8008270:	94a03595 	.word	0x94a03595
 8008274:	3fdfffff 	.word	0x3fdfffff
 8008278:	35afe535 	.word	0x35afe535
 800827c:	3fe00000 	.word	0x3fe00000
 8008280:	000fffff 	.word	0x000fffff
 8008284:	7ff00000 	.word	0x7ff00000
 8008288:	7fefffff 	.word	0x7fefffff
 800828c:	3ff00000 	.word	0x3ff00000
 8008290:	3fe00000 	.word	0x3fe00000
 8008294:	7fe00000 	.word	0x7fe00000
 8008298:	7c9fffff 	.word	0x7c9fffff
 800829c:	bff00000 	.word	0xbff00000
 80082a0:	9b08      	ldr	r3, [sp, #32]
 80082a2:	b323      	cbz	r3, 80082ee <_strtod_l+0xb46>
 80082a4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80082a8:	d821      	bhi.n	80082ee <_strtod_l+0xb46>
 80082aa:	a327      	add	r3, pc, #156	@ (adr r3, 8008348 <_strtod_l+0xba0>)
 80082ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b0:	4630      	mov	r0, r6
 80082b2:	4639      	mov	r1, r7
 80082b4:	f7f8 fb8c 	bl	80009d0 <__aeabi_dcmple>
 80082b8:	b1a0      	cbz	r0, 80082e4 <_strtod_l+0xb3c>
 80082ba:	4639      	mov	r1, r7
 80082bc:	4630      	mov	r0, r6
 80082be:	f7f8 fbe3 	bl	8000a88 <__aeabi_d2uiz>
 80082c2:	2801      	cmp	r0, #1
 80082c4:	bf38      	it	cc
 80082c6:	2001      	movcc	r0, #1
 80082c8:	f7f8 f88c 	bl	80003e4 <__aeabi_ui2d>
 80082cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082ce:	4606      	mov	r6, r0
 80082d0:	460f      	mov	r7, r1
 80082d2:	b9fb      	cbnz	r3, 8008314 <_strtod_l+0xb6c>
 80082d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082d8:	9014      	str	r0, [sp, #80]	@ 0x50
 80082da:	9315      	str	r3, [sp, #84]	@ 0x54
 80082dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80082e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80082e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80082e6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80082ea:	1b5b      	subs	r3, r3, r5
 80082ec:	9311      	str	r3, [sp, #68]	@ 0x44
 80082ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082f2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80082f6:	f7ff f8ff 	bl	80074f8 <__ulp>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	4650      	mov	r0, sl
 8008300:	4659      	mov	r1, fp
 8008302:	f7f8 f8e9 	bl	80004d8 <__aeabi_dmul>
 8008306:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800830a:	f7f7 ff2f 	bl	800016c <__adddf3>
 800830e:	4682      	mov	sl, r0
 8008310:	468b      	mov	fp, r1
 8008312:	e776      	b.n	8008202 <_strtod_l+0xa5a>
 8008314:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008318:	e7e0      	b.n	80082dc <_strtod_l+0xb34>
 800831a:	a30d      	add	r3, pc, #52	@ (adr r3, 8008350 <_strtod_l+0xba8>)
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	f7f8 fb4c 	bl	80009bc <__aeabi_dcmplt>
 8008324:	e79e      	b.n	8008264 <_strtod_l+0xabc>
 8008326:	2300      	movs	r3, #0
 8008328:	930b      	str	r3, [sp, #44]	@ 0x2c
 800832a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800832c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	f7ff ba77 	b.w	8007822 <_strtod_l+0x7a>
 8008334:	2a65      	cmp	r2, #101	@ 0x65
 8008336:	f43f ab6e 	beq.w	8007a16 <_strtod_l+0x26e>
 800833a:	2a45      	cmp	r2, #69	@ 0x45
 800833c:	f43f ab6b 	beq.w	8007a16 <_strtod_l+0x26e>
 8008340:	2301      	movs	r3, #1
 8008342:	f7ff bba6 	b.w	8007a92 <_strtod_l+0x2ea>
 8008346:	bf00      	nop
 8008348:	ffc00000 	.word	0xffc00000
 800834c:	41dfffff 	.word	0x41dfffff
 8008350:	94a03595 	.word	0x94a03595
 8008354:	3fcfffff 	.word	0x3fcfffff

08008358 <_strtod_r>:
 8008358:	4b01      	ldr	r3, [pc, #4]	@ (8008360 <_strtod_r+0x8>)
 800835a:	f7ff ba25 	b.w	80077a8 <_strtod_l>
 800835e:	bf00      	nop
 8008360:	20000068 	.word	0x20000068

08008364 <_strtol_l.constprop.0>:
 8008364:	2b24      	cmp	r3, #36	@ 0x24
 8008366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800836a:	4686      	mov	lr, r0
 800836c:	4690      	mov	r8, r2
 800836e:	d801      	bhi.n	8008374 <_strtol_l.constprop.0+0x10>
 8008370:	2b01      	cmp	r3, #1
 8008372:	d106      	bne.n	8008382 <_strtol_l.constprop.0+0x1e>
 8008374:	f7fd fdc0 	bl	8005ef8 <__errno>
 8008378:	2316      	movs	r3, #22
 800837a:	6003      	str	r3, [r0, #0]
 800837c:	2000      	movs	r0, #0
 800837e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008382:	460d      	mov	r5, r1
 8008384:	4833      	ldr	r0, [pc, #204]	@ (8008454 <_strtol_l.constprop.0+0xf0>)
 8008386:	462a      	mov	r2, r5
 8008388:	f815 4b01 	ldrb.w	r4, [r5], #1
 800838c:	5d06      	ldrb	r6, [r0, r4]
 800838e:	f016 0608 	ands.w	r6, r6, #8
 8008392:	d1f8      	bne.n	8008386 <_strtol_l.constprop.0+0x22>
 8008394:	2c2d      	cmp	r4, #45	@ 0x2d
 8008396:	d12d      	bne.n	80083f4 <_strtol_l.constprop.0+0x90>
 8008398:	2601      	movs	r6, #1
 800839a:	782c      	ldrb	r4, [r5, #0]
 800839c:	1c95      	adds	r5, r2, #2
 800839e:	f033 0210 	bics.w	r2, r3, #16
 80083a2:	d109      	bne.n	80083b8 <_strtol_l.constprop.0+0x54>
 80083a4:	2c30      	cmp	r4, #48	@ 0x30
 80083a6:	d12a      	bne.n	80083fe <_strtol_l.constprop.0+0x9a>
 80083a8:	782a      	ldrb	r2, [r5, #0]
 80083aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80083ae:	2a58      	cmp	r2, #88	@ 0x58
 80083b0:	d125      	bne.n	80083fe <_strtol_l.constprop.0+0x9a>
 80083b2:	2310      	movs	r3, #16
 80083b4:	786c      	ldrb	r4, [r5, #1]
 80083b6:	3502      	adds	r5, #2
 80083b8:	2200      	movs	r2, #0
 80083ba:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80083be:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80083c2:	fbbc f9f3 	udiv	r9, ip, r3
 80083c6:	4610      	mov	r0, r2
 80083c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80083cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80083d0:	2f09      	cmp	r7, #9
 80083d2:	d81b      	bhi.n	800840c <_strtol_l.constprop.0+0xa8>
 80083d4:	463c      	mov	r4, r7
 80083d6:	42a3      	cmp	r3, r4
 80083d8:	dd27      	ble.n	800842a <_strtol_l.constprop.0+0xc6>
 80083da:	1c57      	adds	r7, r2, #1
 80083dc:	d007      	beq.n	80083ee <_strtol_l.constprop.0+0x8a>
 80083de:	4581      	cmp	r9, r0
 80083e0:	d320      	bcc.n	8008424 <_strtol_l.constprop.0+0xc0>
 80083e2:	d101      	bne.n	80083e8 <_strtol_l.constprop.0+0x84>
 80083e4:	45a2      	cmp	sl, r4
 80083e6:	db1d      	blt.n	8008424 <_strtol_l.constprop.0+0xc0>
 80083e8:	2201      	movs	r2, #1
 80083ea:	fb00 4003 	mla	r0, r0, r3, r4
 80083ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083f2:	e7eb      	b.n	80083cc <_strtol_l.constprop.0+0x68>
 80083f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80083f6:	bf04      	itt	eq
 80083f8:	782c      	ldrbeq	r4, [r5, #0]
 80083fa:	1c95      	addeq	r5, r2, #2
 80083fc:	e7cf      	b.n	800839e <_strtol_l.constprop.0+0x3a>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1da      	bne.n	80083b8 <_strtol_l.constprop.0+0x54>
 8008402:	2c30      	cmp	r4, #48	@ 0x30
 8008404:	bf0c      	ite	eq
 8008406:	2308      	moveq	r3, #8
 8008408:	230a      	movne	r3, #10
 800840a:	e7d5      	b.n	80083b8 <_strtol_l.constprop.0+0x54>
 800840c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008410:	2f19      	cmp	r7, #25
 8008412:	d801      	bhi.n	8008418 <_strtol_l.constprop.0+0xb4>
 8008414:	3c37      	subs	r4, #55	@ 0x37
 8008416:	e7de      	b.n	80083d6 <_strtol_l.constprop.0+0x72>
 8008418:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800841c:	2f19      	cmp	r7, #25
 800841e:	d804      	bhi.n	800842a <_strtol_l.constprop.0+0xc6>
 8008420:	3c57      	subs	r4, #87	@ 0x57
 8008422:	e7d8      	b.n	80083d6 <_strtol_l.constprop.0+0x72>
 8008424:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008428:	e7e1      	b.n	80083ee <_strtol_l.constprop.0+0x8a>
 800842a:	1c53      	adds	r3, r2, #1
 800842c:	d108      	bne.n	8008440 <_strtol_l.constprop.0+0xdc>
 800842e:	2322      	movs	r3, #34	@ 0x22
 8008430:	4660      	mov	r0, ip
 8008432:	f8ce 3000 	str.w	r3, [lr]
 8008436:	f1b8 0f00 	cmp.w	r8, #0
 800843a:	d0a0      	beq.n	800837e <_strtol_l.constprop.0+0x1a>
 800843c:	1e69      	subs	r1, r5, #1
 800843e:	e006      	b.n	800844e <_strtol_l.constprop.0+0xea>
 8008440:	b106      	cbz	r6, 8008444 <_strtol_l.constprop.0+0xe0>
 8008442:	4240      	negs	r0, r0
 8008444:	f1b8 0f00 	cmp.w	r8, #0
 8008448:	d099      	beq.n	800837e <_strtol_l.constprop.0+0x1a>
 800844a:	2a00      	cmp	r2, #0
 800844c:	d1f6      	bne.n	800843c <_strtol_l.constprop.0+0xd8>
 800844e:	f8c8 1000 	str.w	r1, [r8]
 8008452:	e794      	b.n	800837e <_strtol_l.constprop.0+0x1a>
 8008454:	0800963b 	.word	0x0800963b

08008458 <_strtol_r>:
 8008458:	f7ff bf84 	b.w	8008364 <_strtol_l.constprop.0>

0800845c <__ssputs_r>:
 800845c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008460:	461f      	mov	r7, r3
 8008462:	688e      	ldr	r6, [r1, #8]
 8008464:	4682      	mov	sl, r0
 8008466:	42be      	cmp	r6, r7
 8008468:	460c      	mov	r4, r1
 800846a:	4690      	mov	r8, r2
 800846c:	680b      	ldr	r3, [r1, #0]
 800846e:	d82d      	bhi.n	80084cc <__ssputs_r+0x70>
 8008470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008474:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008478:	d026      	beq.n	80084c8 <__ssputs_r+0x6c>
 800847a:	6965      	ldr	r5, [r4, #20]
 800847c:	6909      	ldr	r1, [r1, #16]
 800847e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008482:	eba3 0901 	sub.w	r9, r3, r1
 8008486:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800848a:	1c7b      	adds	r3, r7, #1
 800848c:	444b      	add	r3, r9
 800848e:	106d      	asrs	r5, r5, #1
 8008490:	429d      	cmp	r5, r3
 8008492:	bf38      	it	cc
 8008494:	461d      	movcc	r5, r3
 8008496:	0553      	lsls	r3, r2, #21
 8008498:	d527      	bpl.n	80084ea <__ssputs_r+0x8e>
 800849a:	4629      	mov	r1, r5
 800849c:	f7fe fc2e 	bl	8006cfc <_malloc_r>
 80084a0:	4606      	mov	r6, r0
 80084a2:	b360      	cbz	r0, 80084fe <__ssputs_r+0xa2>
 80084a4:	464a      	mov	r2, r9
 80084a6:	6921      	ldr	r1, [r4, #16]
 80084a8:	f000 fa14 	bl	80088d4 <memcpy>
 80084ac:	89a3      	ldrh	r3, [r4, #12]
 80084ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084b6:	81a3      	strh	r3, [r4, #12]
 80084b8:	6126      	str	r6, [r4, #16]
 80084ba:	444e      	add	r6, r9
 80084bc:	6026      	str	r6, [r4, #0]
 80084be:	463e      	mov	r6, r7
 80084c0:	6165      	str	r5, [r4, #20]
 80084c2:	eba5 0509 	sub.w	r5, r5, r9
 80084c6:	60a5      	str	r5, [r4, #8]
 80084c8:	42be      	cmp	r6, r7
 80084ca:	d900      	bls.n	80084ce <__ssputs_r+0x72>
 80084cc:	463e      	mov	r6, r7
 80084ce:	4632      	mov	r2, r6
 80084d0:	4641      	mov	r1, r8
 80084d2:	6820      	ldr	r0, [r4, #0]
 80084d4:	f000 f9c2 	bl	800885c <memmove>
 80084d8:	2000      	movs	r0, #0
 80084da:	68a3      	ldr	r3, [r4, #8]
 80084dc:	1b9b      	subs	r3, r3, r6
 80084de:	60a3      	str	r3, [r4, #8]
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	4433      	add	r3, r6
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ea:	462a      	mov	r2, r5
 80084ec:	f000 fd83 	bl	8008ff6 <_realloc_r>
 80084f0:	4606      	mov	r6, r0
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d1e0      	bne.n	80084b8 <__ssputs_r+0x5c>
 80084f6:	4650      	mov	r0, sl
 80084f8:	6921      	ldr	r1, [r4, #16]
 80084fa:	f7fe fb8d 	bl	8006c18 <_free_r>
 80084fe:	230c      	movs	r3, #12
 8008500:	f8ca 3000 	str.w	r3, [sl]
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800850a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800850e:	81a3      	strh	r3, [r4, #12]
 8008510:	e7e9      	b.n	80084e6 <__ssputs_r+0x8a>
	...

08008514 <_svfiprintf_r>:
 8008514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008518:	4698      	mov	r8, r3
 800851a:	898b      	ldrh	r3, [r1, #12]
 800851c:	4607      	mov	r7, r0
 800851e:	061b      	lsls	r3, r3, #24
 8008520:	460d      	mov	r5, r1
 8008522:	4614      	mov	r4, r2
 8008524:	b09d      	sub	sp, #116	@ 0x74
 8008526:	d510      	bpl.n	800854a <_svfiprintf_r+0x36>
 8008528:	690b      	ldr	r3, [r1, #16]
 800852a:	b973      	cbnz	r3, 800854a <_svfiprintf_r+0x36>
 800852c:	2140      	movs	r1, #64	@ 0x40
 800852e:	f7fe fbe5 	bl	8006cfc <_malloc_r>
 8008532:	6028      	str	r0, [r5, #0]
 8008534:	6128      	str	r0, [r5, #16]
 8008536:	b930      	cbnz	r0, 8008546 <_svfiprintf_r+0x32>
 8008538:	230c      	movs	r3, #12
 800853a:	603b      	str	r3, [r7, #0]
 800853c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008540:	b01d      	add	sp, #116	@ 0x74
 8008542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008546:	2340      	movs	r3, #64	@ 0x40
 8008548:	616b      	str	r3, [r5, #20]
 800854a:	2300      	movs	r3, #0
 800854c:	9309      	str	r3, [sp, #36]	@ 0x24
 800854e:	2320      	movs	r3, #32
 8008550:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008554:	2330      	movs	r3, #48	@ 0x30
 8008556:	f04f 0901 	mov.w	r9, #1
 800855a:	f8cd 800c 	str.w	r8, [sp, #12]
 800855e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80086f8 <_svfiprintf_r+0x1e4>
 8008562:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008566:	4623      	mov	r3, r4
 8008568:	469a      	mov	sl, r3
 800856a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800856e:	b10a      	cbz	r2, 8008574 <_svfiprintf_r+0x60>
 8008570:	2a25      	cmp	r2, #37	@ 0x25
 8008572:	d1f9      	bne.n	8008568 <_svfiprintf_r+0x54>
 8008574:	ebba 0b04 	subs.w	fp, sl, r4
 8008578:	d00b      	beq.n	8008592 <_svfiprintf_r+0x7e>
 800857a:	465b      	mov	r3, fp
 800857c:	4622      	mov	r2, r4
 800857e:	4629      	mov	r1, r5
 8008580:	4638      	mov	r0, r7
 8008582:	f7ff ff6b 	bl	800845c <__ssputs_r>
 8008586:	3001      	adds	r0, #1
 8008588:	f000 80a7 	beq.w	80086da <_svfiprintf_r+0x1c6>
 800858c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800858e:	445a      	add	r2, fp
 8008590:	9209      	str	r2, [sp, #36]	@ 0x24
 8008592:	f89a 3000 	ldrb.w	r3, [sl]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f000 809f 	beq.w	80086da <_svfiprintf_r+0x1c6>
 800859c:	2300      	movs	r3, #0
 800859e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085a6:	f10a 0a01 	add.w	sl, sl, #1
 80085aa:	9304      	str	r3, [sp, #16]
 80085ac:	9307      	str	r3, [sp, #28]
 80085ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80085b4:	4654      	mov	r4, sl
 80085b6:	2205      	movs	r2, #5
 80085b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085bc:	484e      	ldr	r0, [pc, #312]	@ (80086f8 <_svfiprintf_r+0x1e4>)
 80085be:	f7fd fcc8 	bl	8005f52 <memchr>
 80085c2:	9a04      	ldr	r2, [sp, #16]
 80085c4:	b9d8      	cbnz	r0, 80085fe <_svfiprintf_r+0xea>
 80085c6:	06d0      	lsls	r0, r2, #27
 80085c8:	bf44      	itt	mi
 80085ca:	2320      	movmi	r3, #32
 80085cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085d0:	0711      	lsls	r1, r2, #28
 80085d2:	bf44      	itt	mi
 80085d4:	232b      	movmi	r3, #43	@ 0x2b
 80085d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085da:	f89a 3000 	ldrb.w	r3, [sl]
 80085de:	2b2a      	cmp	r3, #42	@ 0x2a
 80085e0:	d015      	beq.n	800860e <_svfiprintf_r+0xfa>
 80085e2:	4654      	mov	r4, sl
 80085e4:	2000      	movs	r0, #0
 80085e6:	f04f 0c0a 	mov.w	ip, #10
 80085ea:	9a07      	ldr	r2, [sp, #28]
 80085ec:	4621      	mov	r1, r4
 80085ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085f2:	3b30      	subs	r3, #48	@ 0x30
 80085f4:	2b09      	cmp	r3, #9
 80085f6:	d94b      	bls.n	8008690 <_svfiprintf_r+0x17c>
 80085f8:	b1b0      	cbz	r0, 8008628 <_svfiprintf_r+0x114>
 80085fa:	9207      	str	r2, [sp, #28]
 80085fc:	e014      	b.n	8008628 <_svfiprintf_r+0x114>
 80085fe:	eba0 0308 	sub.w	r3, r0, r8
 8008602:	fa09 f303 	lsl.w	r3, r9, r3
 8008606:	4313      	orrs	r3, r2
 8008608:	46a2      	mov	sl, r4
 800860a:	9304      	str	r3, [sp, #16]
 800860c:	e7d2      	b.n	80085b4 <_svfiprintf_r+0xa0>
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	1d19      	adds	r1, r3, #4
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	9103      	str	r1, [sp, #12]
 8008616:	2b00      	cmp	r3, #0
 8008618:	bfbb      	ittet	lt
 800861a:	425b      	neglt	r3, r3
 800861c:	f042 0202 	orrlt.w	r2, r2, #2
 8008620:	9307      	strge	r3, [sp, #28]
 8008622:	9307      	strlt	r3, [sp, #28]
 8008624:	bfb8      	it	lt
 8008626:	9204      	strlt	r2, [sp, #16]
 8008628:	7823      	ldrb	r3, [r4, #0]
 800862a:	2b2e      	cmp	r3, #46	@ 0x2e
 800862c:	d10a      	bne.n	8008644 <_svfiprintf_r+0x130>
 800862e:	7863      	ldrb	r3, [r4, #1]
 8008630:	2b2a      	cmp	r3, #42	@ 0x2a
 8008632:	d132      	bne.n	800869a <_svfiprintf_r+0x186>
 8008634:	9b03      	ldr	r3, [sp, #12]
 8008636:	3402      	adds	r4, #2
 8008638:	1d1a      	adds	r2, r3, #4
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	9203      	str	r2, [sp, #12]
 800863e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008642:	9305      	str	r3, [sp, #20]
 8008644:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80086fc <_svfiprintf_r+0x1e8>
 8008648:	2203      	movs	r2, #3
 800864a:	4650      	mov	r0, sl
 800864c:	7821      	ldrb	r1, [r4, #0]
 800864e:	f7fd fc80 	bl	8005f52 <memchr>
 8008652:	b138      	cbz	r0, 8008664 <_svfiprintf_r+0x150>
 8008654:	2240      	movs	r2, #64	@ 0x40
 8008656:	9b04      	ldr	r3, [sp, #16]
 8008658:	eba0 000a 	sub.w	r0, r0, sl
 800865c:	4082      	lsls	r2, r0
 800865e:	4313      	orrs	r3, r2
 8008660:	3401      	adds	r4, #1
 8008662:	9304      	str	r3, [sp, #16]
 8008664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008668:	2206      	movs	r2, #6
 800866a:	4825      	ldr	r0, [pc, #148]	@ (8008700 <_svfiprintf_r+0x1ec>)
 800866c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008670:	f7fd fc6f 	bl	8005f52 <memchr>
 8008674:	2800      	cmp	r0, #0
 8008676:	d036      	beq.n	80086e6 <_svfiprintf_r+0x1d2>
 8008678:	4b22      	ldr	r3, [pc, #136]	@ (8008704 <_svfiprintf_r+0x1f0>)
 800867a:	bb1b      	cbnz	r3, 80086c4 <_svfiprintf_r+0x1b0>
 800867c:	9b03      	ldr	r3, [sp, #12]
 800867e:	3307      	adds	r3, #7
 8008680:	f023 0307 	bic.w	r3, r3, #7
 8008684:	3308      	adds	r3, #8
 8008686:	9303      	str	r3, [sp, #12]
 8008688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800868a:	4433      	add	r3, r6
 800868c:	9309      	str	r3, [sp, #36]	@ 0x24
 800868e:	e76a      	b.n	8008566 <_svfiprintf_r+0x52>
 8008690:	460c      	mov	r4, r1
 8008692:	2001      	movs	r0, #1
 8008694:	fb0c 3202 	mla	r2, ip, r2, r3
 8008698:	e7a8      	b.n	80085ec <_svfiprintf_r+0xd8>
 800869a:	2300      	movs	r3, #0
 800869c:	f04f 0c0a 	mov.w	ip, #10
 80086a0:	4619      	mov	r1, r3
 80086a2:	3401      	adds	r4, #1
 80086a4:	9305      	str	r3, [sp, #20]
 80086a6:	4620      	mov	r0, r4
 80086a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086ac:	3a30      	subs	r2, #48	@ 0x30
 80086ae:	2a09      	cmp	r2, #9
 80086b0:	d903      	bls.n	80086ba <_svfiprintf_r+0x1a6>
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0c6      	beq.n	8008644 <_svfiprintf_r+0x130>
 80086b6:	9105      	str	r1, [sp, #20]
 80086b8:	e7c4      	b.n	8008644 <_svfiprintf_r+0x130>
 80086ba:	4604      	mov	r4, r0
 80086bc:	2301      	movs	r3, #1
 80086be:	fb0c 2101 	mla	r1, ip, r1, r2
 80086c2:	e7f0      	b.n	80086a6 <_svfiprintf_r+0x192>
 80086c4:	ab03      	add	r3, sp, #12
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	462a      	mov	r2, r5
 80086ca:	4638      	mov	r0, r7
 80086cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008708 <_svfiprintf_r+0x1f4>)
 80086ce:	a904      	add	r1, sp, #16
 80086d0:	f7fc fccc 	bl	800506c <_printf_float>
 80086d4:	1c42      	adds	r2, r0, #1
 80086d6:	4606      	mov	r6, r0
 80086d8:	d1d6      	bne.n	8008688 <_svfiprintf_r+0x174>
 80086da:	89ab      	ldrh	r3, [r5, #12]
 80086dc:	065b      	lsls	r3, r3, #25
 80086de:	f53f af2d 	bmi.w	800853c <_svfiprintf_r+0x28>
 80086e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086e4:	e72c      	b.n	8008540 <_svfiprintf_r+0x2c>
 80086e6:	ab03      	add	r3, sp, #12
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	462a      	mov	r2, r5
 80086ec:	4638      	mov	r0, r7
 80086ee:	4b06      	ldr	r3, [pc, #24]	@ (8008708 <_svfiprintf_r+0x1f4>)
 80086f0:	a904      	add	r1, sp, #16
 80086f2:	f7fc ff59 	bl	80055a8 <_printf_i>
 80086f6:	e7ed      	b.n	80086d4 <_svfiprintf_r+0x1c0>
 80086f8:	080099b0 	.word	0x080099b0
 80086fc:	080099b6 	.word	0x080099b6
 8008700:	080099ba 	.word	0x080099ba
 8008704:	0800506d 	.word	0x0800506d
 8008708:	0800845d 	.word	0x0800845d

0800870c <__sflush_r>:
 800870c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008712:	0716      	lsls	r6, r2, #28
 8008714:	4605      	mov	r5, r0
 8008716:	460c      	mov	r4, r1
 8008718:	d454      	bmi.n	80087c4 <__sflush_r+0xb8>
 800871a:	684b      	ldr	r3, [r1, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	dc02      	bgt.n	8008726 <__sflush_r+0x1a>
 8008720:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008722:	2b00      	cmp	r3, #0
 8008724:	dd48      	ble.n	80087b8 <__sflush_r+0xac>
 8008726:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008728:	2e00      	cmp	r6, #0
 800872a:	d045      	beq.n	80087b8 <__sflush_r+0xac>
 800872c:	2300      	movs	r3, #0
 800872e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008732:	682f      	ldr	r7, [r5, #0]
 8008734:	6a21      	ldr	r1, [r4, #32]
 8008736:	602b      	str	r3, [r5, #0]
 8008738:	d030      	beq.n	800879c <__sflush_r+0x90>
 800873a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800873c:	89a3      	ldrh	r3, [r4, #12]
 800873e:	0759      	lsls	r1, r3, #29
 8008740:	d505      	bpl.n	800874e <__sflush_r+0x42>
 8008742:	6863      	ldr	r3, [r4, #4]
 8008744:	1ad2      	subs	r2, r2, r3
 8008746:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008748:	b10b      	cbz	r3, 800874e <__sflush_r+0x42>
 800874a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800874c:	1ad2      	subs	r2, r2, r3
 800874e:	2300      	movs	r3, #0
 8008750:	4628      	mov	r0, r5
 8008752:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008754:	6a21      	ldr	r1, [r4, #32]
 8008756:	47b0      	blx	r6
 8008758:	1c43      	adds	r3, r0, #1
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	d106      	bne.n	800876c <__sflush_r+0x60>
 800875e:	6829      	ldr	r1, [r5, #0]
 8008760:	291d      	cmp	r1, #29
 8008762:	d82b      	bhi.n	80087bc <__sflush_r+0xb0>
 8008764:	4a28      	ldr	r2, [pc, #160]	@ (8008808 <__sflush_r+0xfc>)
 8008766:	410a      	asrs	r2, r1
 8008768:	07d6      	lsls	r6, r2, #31
 800876a:	d427      	bmi.n	80087bc <__sflush_r+0xb0>
 800876c:	2200      	movs	r2, #0
 800876e:	6062      	str	r2, [r4, #4]
 8008770:	6922      	ldr	r2, [r4, #16]
 8008772:	04d9      	lsls	r1, r3, #19
 8008774:	6022      	str	r2, [r4, #0]
 8008776:	d504      	bpl.n	8008782 <__sflush_r+0x76>
 8008778:	1c42      	adds	r2, r0, #1
 800877a:	d101      	bne.n	8008780 <__sflush_r+0x74>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	b903      	cbnz	r3, 8008782 <__sflush_r+0x76>
 8008780:	6560      	str	r0, [r4, #84]	@ 0x54
 8008782:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008784:	602f      	str	r7, [r5, #0]
 8008786:	b1b9      	cbz	r1, 80087b8 <__sflush_r+0xac>
 8008788:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800878c:	4299      	cmp	r1, r3
 800878e:	d002      	beq.n	8008796 <__sflush_r+0x8a>
 8008790:	4628      	mov	r0, r5
 8008792:	f7fe fa41 	bl	8006c18 <_free_r>
 8008796:	2300      	movs	r3, #0
 8008798:	6363      	str	r3, [r4, #52]	@ 0x34
 800879a:	e00d      	b.n	80087b8 <__sflush_r+0xac>
 800879c:	2301      	movs	r3, #1
 800879e:	4628      	mov	r0, r5
 80087a0:	47b0      	blx	r6
 80087a2:	4602      	mov	r2, r0
 80087a4:	1c50      	adds	r0, r2, #1
 80087a6:	d1c9      	bne.n	800873c <__sflush_r+0x30>
 80087a8:	682b      	ldr	r3, [r5, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0c6      	beq.n	800873c <__sflush_r+0x30>
 80087ae:	2b1d      	cmp	r3, #29
 80087b0:	d001      	beq.n	80087b6 <__sflush_r+0xaa>
 80087b2:	2b16      	cmp	r3, #22
 80087b4:	d11d      	bne.n	80087f2 <__sflush_r+0xe6>
 80087b6:	602f      	str	r7, [r5, #0]
 80087b8:	2000      	movs	r0, #0
 80087ba:	e021      	b.n	8008800 <__sflush_r+0xf4>
 80087bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087c0:	b21b      	sxth	r3, r3
 80087c2:	e01a      	b.n	80087fa <__sflush_r+0xee>
 80087c4:	690f      	ldr	r7, [r1, #16]
 80087c6:	2f00      	cmp	r7, #0
 80087c8:	d0f6      	beq.n	80087b8 <__sflush_r+0xac>
 80087ca:	0793      	lsls	r3, r2, #30
 80087cc:	bf18      	it	ne
 80087ce:	2300      	movne	r3, #0
 80087d0:	680e      	ldr	r6, [r1, #0]
 80087d2:	bf08      	it	eq
 80087d4:	694b      	ldreq	r3, [r1, #20]
 80087d6:	1bf6      	subs	r6, r6, r7
 80087d8:	600f      	str	r7, [r1, #0]
 80087da:	608b      	str	r3, [r1, #8]
 80087dc:	2e00      	cmp	r6, #0
 80087de:	ddeb      	ble.n	80087b8 <__sflush_r+0xac>
 80087e0:	4633      	mov	r3, r6
 80087e2:	463a      	mov	r2, r7
 80087e4:	4628      	mov	r0, r5
 80087e6:	6a21      	ldr	r1, [r4, #32]
 80087e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80087ec:	47e0      	blx	ip
 80087ee:	2800      	cmp	r0, #0
 80087f0:	dc07      	bgt.n	8008802 <__sflush_r+0xf6>
 80087f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008802:	4407      	add	r7, r0
 8008804:	1a36      	subs	r6, r6, r0
 8008806:	e7e9      	b.n	80087dc <__sflush_r+0xd0>
 8008808:	dfbffffe 	.word	0xdfbffffe

0800880c <_fflush_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	690b      	ldr	r3, [r1, #16]
 8008810:	4605      	mov	r5, r0
 8008812:	460c      	mov	r4, r1
 8008814:	b913      	cbnz	r3, 800881c <_fflush_r+0x10>
 8008816:	2500      	movs	r5, #0
 8008818:	4628      	mov	r0, r5
 800881a:	bd38      	pop	{r3, r4, r5, pc}
 800881c:	b118      	cbz	r0, 8008826 <_fflush_r+0x1a>
 800881e:	6a03      	ldr	r3, [r0, #32]
 8008820:	b90b      	cbnz	r3, 8008826 <_fflush_r+0x1a>
 8008822:	f7fd fa7d 	bl	8005d20 <__sinit>
 8008826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0f3      	beq.n	8008816 <_fflush_r+0xa>
 800882e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008830:	07d0      	lsls	r0, r2, #31
 8008832:	d404      	bmi.n	800883e <_fflush_r+0x32>
 8008834:	0599      	lsls	r1, r3, #22
 8008836:	d402      	bmi.n	800883e <_fflush_r+0x32>
 8008838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800883a:	f7fd fb88 	bl	8005f4e <__retarget_lock_acquire_recursive>
 800883e:	4628      	mov	r0, r5
 8008840:	4621      	mov	r1, r4
 8008842:	f7ff ff63 	bl	800870c <__sflush_r>
 8008846:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008848:	4605      	mov	r5, r0
 800884a:	07da      	lsls	r2, r3, #31
 800884c:	d4e4      	bmi.n	8008818 <_fflush_r+0xc>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	059b      	lsls	r3, r3, #22
 8008852:	d4e1      	bmi.n	8008818 <_fflush_r+0xc>
 8008854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008856:	f7fd fb7b 	bl	8005f50 <__retarget_lock_release_recursive>
 800885a:	e7dd      	b.n	8008818 <_fflush_r+0xc>

0800885c <memmove>:
 800885c:	4288      	cmp	r0, r1
 800885e:	b510      	push	{r4, lr}
 8008860:	eb01 0402 	add.w	r4, r1, r2
 8008864:	d902      	bls.n	800886c <memmove+0x10>
 8008866:	4284      	cmp	r4, r0
 8008868:	4623      	mov	r3, r4
 800886a:	d807      	bhi.n	800887c <memmove+0x20>
 800886c:	1e43      	subs	r3, r0, #1
 800886e:	42a1      	cmp	r1, r4
 8008870:	d008      	beq.n	8008884 <memmove+0x28>
 8008872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800887a:	e7f8      	b.n	800886e <memmove+0x12>
 800887c:	4601      	mov	r1, r0
 800887e:	4402      	add	r2, r0
 8008880:	428a      	cmp	r2, r1
 8008882:	d100      	bne.n	8008886 <memmove+0x2a>
 8008884:	bd10      	pop	{r4, pc}
 8008886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800888a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800888e:	e7f7      	b.n	8008880 <memmove+0x24>

08008890 <strncmp>:
 8008890:	b510      	push	{r4, lr}
 8008892:	b16a      	cbz	r2, 80088b0 <strncmp+0x20>
 8008894:	3901      	subs	r1, #1
 8008896:	1884      	adds	r4, r0, r2
 8008898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800889c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d103      	bne.n	80088ac <strncmp+0x1c>
 80088a4:	42a0      	cmp	r0, r4
 80088a6:	d001      	beq.n	80088ac <strncmp+0x1c>
 80088a8:	2a00      	cmp	r2, #0
 80088aa:	d1f5      	bne.n	8008898 <strncmp+0x8>
 80088ac:	1ad0      	subs	r0, r2, r3
 80088ae:	bd10      	pop	{r4, pc}
 80088b0:	4610      	mov	r0, r2
 80088b2:	e7fc      	b.n	80088ae <strncmp+0x1e>

080088b4 <_sbrk_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	2300      	movs	r3, #0
 80088b8:	4d05      	ldr	r5, [pc, #20]	@ (80088d0 <_sbrk_r+0x1c>)
 80088ba:	4604      	mov	r4, r0
 80088bc:	4608      	mov	r0, r1
 80088be:	602b      	str	r3, [r5, #0]
 80088c0:	f7f9 fae8 	bl	8001e94 <_sbrk>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_sbrk_r+0x1a>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_sbrk_r+0x1a>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	20000974 	.word	0x20000974

080088d4 <memcpy>:
 80088d4:	440a      	add	r2, r1
 80088d6:	4291      	cmp	r1, r2
 80088d8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80088dc:	d100      	bne.n	80088e0 <memcpy+0xc>
 80088de:	4770      	bx	lr
 80088e0:	b510      	push	{r4, lr}
 80088e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e6:	4291      	cmp	r1, r2
 80088e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ec:	d1f9      	bne.n	80088e2 <memcpy+0xe>
 80088ee:	bd10      	pop	{r4, pc}

080088f0 <nan>:
 80088f0:	2000      	movs	r0, #0
 80088f2:	4901      	ldr	r1, [pc, #4]	@ (80088f8 <nan+0x8>)
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	7ff80000 	.word	0x7ff80000

080088fc <__assert_func>:
 80088fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088fe:	4614      	mov	r4, r2
 8008900:	461a      	mov	r2, r3
 8008902:	4b09      	ldr	r3, [pc, #36]	@ (8008928 <__assert_func+0x2c>)
 8008904:	4605      	mov	r5, r0
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68d8      	ldr	r0, [r3, #12]
 800890a:	b954      	cbnz	r4, 8008922 <__assert_func+0x26>
 800890c:	4b07      	ldr	r3, [pc, #28]	@ (800892c <__assert_func+0x30>)
 800890e:	461c      	mov	r4, r3
 8008910:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008914:	9100      	str	r1, [sp, #0]
 8008916:	462b      	mov	r3, r5
 8008918:	4905      	ldr	r1, [pc, #20]	@ (8008930 <__assert_func+0x34>)
 800891a:	f000 fba7 	bl	800906c <fiprintf>
 800891e:	f000 fbb7 	bl	8009090 <abort>
 8008922:	4b04      	ldr	r3, [pc, #16]	@ (8008934 <__assert_func+0x38>)
 8008924:	e7f4      	b.n	8008910 <__assert_func+0x14>
 8008926:	bf00      	nop
 8008928:	20000018 	.word	0x20000018
 800892c:	08009a04 	.word	0x08009a04
 8008930:	080099d6 	.word	0x080099d6
 8008934:	080099c9 	.word	0x080099c9

08008938 <_calloc_r>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	fba1 5402 	umull	r5, r4, r1, r2
 800893e:	b93c      	cbnz	r4, 8008950 <_calloc_r+0x18>
 8008940:	4629      	mov	r1, r5
 8008942:	f7fe f9db 	bl	8006cfc <_malloc_r>
 8008946:	4606      	mov	r6, r0
 8008948:	b928      	cbnz	r0, 8008956 <_calloc_r+0x1e>
 800894a:	2600      	movs	r6, #0
 800894c:	4630      	mov	r0, r6
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	220c      	movs	r2, #12
 8008952:	6002      	str	r2, [r0, #0]
 8008954:	e7f9      	b.n	800894a <_calloc_r+0x12>
 8008956:	462a      	mov	r2, r5
 8008958:	4621      	mov	r1, r4
 800895a:	f7fd fa7a 	bl	8005e52 <memset>
 800895e:	e7f5      	b.n	800894c <_calloc_r+0x14>

08008960 <rshift>:
 8008960:	6903      	ldr	r3, [r0, #16]
 8008962:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008966:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800896a:	f100 0414 	add.w	r4, r0, #20
 800896e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008972:	dd46      	ble.n	8008a02 <rshift+0xa2>
 8008974:	f011 011f 	ands.w	r1, r1, #31
 8008978:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800897c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008980:	d10c      	bne.n	800899c <rshift+0x3c>
 8008982:	4629      	mov	r1, r5
 8008984:	f100 0710 	add.w	r7, r0, #16
 8008988:	42b1      	cmp	r1, r6
 800898a:	d335      	bcc.n	80089f8 <rshift+0x98>
 800898c:	1a9b      	subs	r3, r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	1eea      	subs	r2, r5, #3
 8008992:	4296      	cmp	r6, r2
 8008994:	bf38      	it	cc
 8008996:	2300      	movcc	r3, #0
 8008998:	4423      	add	r3, r4
 800899a:	e015      	b.n	80089c8 <rshift+0x68>
 800899c:	46a1      	mov	r9, r4
 800899e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80089a2:	f1c1 0820 	rsb	r8, r1, #32
 80089a6:	40cf      	lsrs	r7, r1
 80089a8:	f105 0e04 	add.w	lr, r5, #4
 80089ac:	4576      	cmp	r6, lr
 80089ae:	46f4      	mov	ip, lr
 80089b0:	d816      	bhi.n	80089e0 <rshift+0x80>
 80089b2:	1a9a      	subs	r2, r3, r2
 80089b4:	0092      	lsls	r2, r2, #2
 80089b6:	3a04      	subs	r2, #4
 80089b8:	3501      	adds	r5, #1
 80089ba:	42ae      	cmp	r6, r5
 80089bc:	bf38      	it	cc
 80089be:	2200      	movcc	r2, #0
 80089c0:	18a3      	adds	r3, r4, r2
 80089c2:	50a7      	str	r7, [r4, r2]
 80089c4:	b107      	cbz	r7, 80089c8 <rshift+0x68>
 80089c6:	3304      	adds	r3, #4
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	eba3 0204 	sub.w	r2, r3, r4
 80089ce:	bf08      	it	eq
 80089d0:	2300      	moveq	r3, #0
 80089d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80089d6:	6102      	str	r2, [r0, #16]
 80089d8:	bf08      	it	eq
 80089da:	6143      	streq	r3, [r0, #20]
 80089dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089e0:	f8dc c000 	ldr.w	ip, [ip]
 80089e4:	fa0c fc08 	lsl.w	ip, ip, r8
 80089e8:	ea4c 0707 	orr.w	r7, ip, r7
 80089ec:	f849 7b04 	str.w	r7, [r9], #4
 80089f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089f4:	40cf      	lsrs	r7, r1
 80089f6:	e7d9      	b.n	80089ac <rshift+0x4c>
 80089f8:	f851 cb04 	ldr.w	ip, [r1], #4
 80089fc:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a00:	e7c2      	b.n	8008988 <rshift+0x28>
 8008a02:	4623      	mov	r3, r4
 8008a04:	e7e0      	b.n	80089c8 <rshift+0x68>

08008a06 <__hexdig_fun>:
 8008a06:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008a0a:	2b09      	cmp	r3, #9
 8008a0c:	d802      	bhi.n	8008a14 <__hexdig_fun+0xe>
 8008a0e:	3820      	subs	r0, #32
 8008a10:	b2c0      	uxtb	r0, r0
 8008a12:	4770      	bx	lr
 8008a14:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008a18:	2b05      	cmp	r3, #5
 8008a1a:	d801      	bhi.n	8008a20 <__hexdig_fun+0x1a>
 8008a1c:	3847      	subs	r0, #71	@ 0x47
 8008a1e:	e7f7      	b.n	8008a10 <__hexdig_fun+0xa>
 8008a20:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008a24:	2b05      	cmp	r3, #5
 8008a26:	d801      	bhi.n	8008a2c <__hexdig_fun+0x26>
 8008a28:	3827      	subs	r0, #39	@ 0x27
 8008a2a:	e7f1      	b.n	8008a10 <__hexdig_fun+0xa>
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	4770      	bx	lr

08008a30 <__gethex>:
 8008a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a34:	468a      	mov	sl, r1
 8008a36:	4690      	mov	r8, r2
 8008a38:	b085      	sub	sp, #20
 8008a3a:	9302      	str	r3, [sp, #8]
 8008a3c:	680b      	ldr	r3, [r1, #0]
 8008a3e:	9001      	str	r0, [sp, #4]
 8008a40:	1c9c      	adds	r4, r3, #2
 8008a42:	46a1      	mov	r9, r4
 8008a44:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008a48:	2830      	cmp	r0, #48	@ 0x30
 8008a4a:	d0fa      	beq.n	8008a42 <__gethex+0x12>
 8008a4c:	eba9 0303 	sub.w	r3, r9, r3
 8008a50:	f1a3 0b02 	sub.w	fp, r3, #2
 8008a54:	f7ff ffd7 	bl	8008a06 <__hexdig_fun>
 8008a58:	4605      	mov	r5, r0
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d168      	bne.n	8008b30 <__gethex+0x100>
 8008a5e:	2201      	movs	r2, #1
 8008a60:	4648      	mov	r0, r9
 8008a62:	499f      	ldr	r1, [pc, #636]	@ (8008ce0 <__gethex+0x2b0>)
 8008a64:	f7ff ff14 	bl	8008890 <strncmp>
 8008a68:	4607      	mov	r7, r0
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d167      	bne.n	8008b3e <__gethex+0x10e>
 8008a6e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008a72:	4626      	mov	r6, r4
 8008a74:	f7ff ffc7 	bl	8008a06 <__hexdig_fun>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d062      	beq.n	8008b42 <__gethex+0x112>
 8008a7c:	4623      	mov	r3, r4
 8008a7e:	7818      	ldrb	r0, [r3, #0]
 8008a80:	4699      	mov	r9, r3
 8008a82:	2830      	cmp	r0, #48	@ 0x30
 8008a84:	f103 0301 	add.w	r3, r3, #1
 8008a88:	d0f9      	beq.n	8008a7e <__gethex+0x4e>
 8008a8a:	f7ff ffbc 	bl	8008a06 <__hexdig_fun>
 8008a8e:	fab0 f580 	clz	r5, r0
 8008a92:	f04f 0b01 	mov.w	fp, #1
 8008a96:	096d      	lsrs	r5, r5, #5
 8008a98:	464a      	mov	r2, r9
 8008a9a:	4616      	mov	r6, r2
 8008a9c:	7830      	ldrb	r0, [r6, #0]
 8008a9e:	3201      	adds	r2, #1
 8008aa0:	f7ff ffb1 	bl	8008a06 <__hexdig_fun>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d1f8      	bne.n	8008a9a <__gethex+0x6a>
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	4630      	mov	r0, r6
 8008aac:	498c      	ldr	r1, [pc, #560]	@ (8008ce0 <__gethex+0x2b0>)
 8008aae:	f7ff feef 	bl	8008890 <strncmp>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d13f      	bne.n	8008b36 <__gethex+0x106>
 8008ab6:	b944      	cbnz	r4, 8008aca <__gethex+0x9a>
 8008ab8:	1c74      	adds	r4, r6, #1
 8008aba:	4622      	mov	r2, r4
 8008abc:	4616      	mov	r6, r2
 8008abe:	7830      	ldrb	r0, [r6, #0]
 8008ac0:	3201      	adds	r2, #1
 8008ac2:	f7ff ffa0 	bl	8008a06 <__hexdig_fun>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d1f8      	bne.n	8008abc <__gethex+0x8c>
 8008aca:	1ba4      	subs	r4, r4, r6
 8008acc:	00a7      	lsls	r7, r4, #2
 8008ace:	7833      	ldrb	r3, [r6, #0]
 8008ad0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ad4:	2b50      	cmp	r3, #80	@ 0x50
 8008ad6:	d13e      	bne.n	8008b56 <__gethex+0x126>
 8008ad8:	7873      	ldrb	r3, [r6, #1]
 8008ada:	2b2b      	cmp	r3, #43	@ 0x2b
 8008adc:	d033      	beq.n	8008b46 <__gethex+0x116>
 8008ade:	2b2d      	cmp	r3, #45	@ 0x2d
 8008ae0:	d034      	beq.n	8008b4c <__gethex+0x11c>
 8008ae2:	2400      	movs	r4, #0
 8008ae4:	1c71      	adds	r1, r6, #1
 8008ae6:	7808      	ldrb	r0, [r1, #0]
 8008ae8:	f7ff ff8d 	bl	8008a06 <__hexdig_fun>
 8008aec:	1e43      	subs	r3, r0, #1
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	2b18      	cmp	r3, #24
 8008af2:	d830      	bhi.n	8008b56 <__gethex+0x126>
 8008af4:	f1a0 0210 	sub.w	r2, r0, #16
 8008af8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008afc:	f7ff ff83 	bl	8008a06 <__hexdig_fun>
 8008b00:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008b04:	fa5f fc8c 	uxtb.w	ip, ip
 8008b08:	f1bc 0f18 	cmp.w	ip, #24
 8008b0c:	f04f 030a 	mov.w	r3, #10
 8008b10:	d91e      	bls.n	8008b50 <__gethex+0x120>
 8008b12:	b104      	cbz	r4, 8008b16 <__gethex+0xe6>
 8008b14:	4252      	negs	r2, r2
 8008b16:	4417      	add	r7, r2
 8008b18:	f8ca 1000 	str.w	r1, [sl]
 8008b1c:	b1ed      	cbz	r5, 8008b5a <__gethex+0x12a>
 8008b1e:	f1bb 0f00 	cmp.w	fp, #0
 8008b22:	bf0c      	ite	eq
 8008b24:	2506      	moveq	r5, #6
 8008b26:	2500      	movne	r5, #0
 8008b28:	4628      	mov	r0, r5
 8008b2a:	b005      	add	sp, #20
 8008b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b30:	2500      	movs	r5, #0
 8008b32:	462c      	mov	r4, r5
 8008b34:	e7b0      	b.n	8008a98 <__gethex+0x68>
 8008b36:	2c00      	cmp	r4, #0
 8008b38:	d1c7      	bne.n	8008aca <__gethex+0x9a>
 8008b3a:	4627      	mov	r7, r4
 8008b3c:	e7c7      	b.n	8008ace <__gethex+0x9e>
 8008b3e:	464e      	mov	r6, r9
 8008b40:	462f      	mov	r7, r5
 8008b42:	2501      	movs	r5, #1
 8008b44:	e7c3      	b.n	8008ace <__gethex+0x9e>
 8008b46:	2400      	movs	r4, #0
 8008b48:	1cb1      	adds	r1, r6, #2
 8008b4a:	e7cc      	b.n	8008ae6 <__gethex+0xb6>
 8008b4c:	2401      	movs	r4, #1
 8008b4e:	e7fb      	b.n	8008b48 <__gethex+0x118>
 8008b50:	fb03 0002 	mla	r0, r3, r2, r0
 8008b54:	e7ce      	b.n	8008af4 <__gethex+0xc4>
 8008b56:	4631      	mov	r1, r6
 8008b58:	e7de      	b.n	8008b18 <__gethex+0xe8>
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	eba6 0309 	sub.w	r3, r6, r9
 8008b60:	3b01      	subs	r3, #1
 8008b62:	2b07      	cmp	r3, #7
 8008b64:	dc0a      	bgt.n	8008b7c <__gethex+0x14c>
 8008b66:	9801      	ldr	r0, [sp, #4]
 8008b68:	f7fe f954 	bl	8006e14 <_Balloc>
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	b940      	cbnz	r0, 8008b82 <__gethex+0x152>
 8008b70:	4602      	mov	r2, r0
 8008b72:	21e4      	movs	r1, #228	@ 0xe4
 8008b74:	4b5b      	ldr	r3, [pc, #364]	@ (8008ce4 <__gethex+0x2b4>)
 8008b76:	485c      	ldr	r0, [pc, #368]	@ (8008ce8 <__gethex+0x2b8>)
 8008b78:	f7ff fec0 	bl	80088fc <__assert_func>
 8008b7c:	3101      	adds	r1, #1
 8008b7e:	105b      	asrs	r3, r3, #1
 8008b80:	e7ef      	b.n	8008b62 <__gethex+0x132>
 8008b82:	2300      	movs	r3, #0
 8008b84:	f100 0a14 	add.w	sl, r0, #20
 8008b88:	4655      	mov	r5, sl
 8008b8a:	469b      	mov	fp, r3
 8008b8c:	45b1      	cmp	r9, r6
 8008b8e:	d337      	bcc.n	8008c00 <__gethex+0x1d0>
 8008b90:	f845 bb04 	str.w	fp, [r5], #4
 8008b94:	eba5 050a 	sub.w	r5, r5, sl
 8008b98:	10ad      	asrs	r5, r5, #2
 8008b9a:	6125      	str	r5, [r4, #16]
 8008b9c:	4658      	mov	r0, fp
 8008b9e:	f7fe fa2b 	bl	8006ff8 <__hi0bits>
 8008ba2:	016d      	lsls	r5, r5, #5
 8008ba4:	f8d8 6000 	ldr.w	r6, [r8]
 8008ba8:	1a2d      	subs	r5, r5, r0
 8008baa:	42b5      	cmp	r5, r6
 8008bac:	dd54      	ble.n	8008c58 <__gethex+0x228>
 8008bae:	1bad      	subs	r5, r5, r6
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f7fe fdb3 	bl	800771e <__any_on>
 8008bb8:	4681      	mov	r9, r0
 8008bba:	b178      	cbz	r0, 8008bdc <__gethex+0x1ac>
 8008bbc:	f04f 0901 	mov.w	r9, #1
 8008bc0:	1e6b      	subs	r3, r5, #1
 8008bc2:	1159      	asrs	r1, r3, #5
 8008bc4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008bc8:	f003 021f 	and.w	r2, r3, #31
 8008bcc:	fa09 f202 	lsl.w	r2, r9, r2
 8008bd0:	420a      	tst	r2, r1
 8008bd2:	d003      	beq.n	8008bdc <__gethex+0x1ac>
 8008bd4:	454b      	cmp	r3, r9
 8008bd6:	dc36      	bgt.n	8008c46 <__gethex+0x216>
 8008bd8:	f04f 0902 	mov.w	r9, #2
 8008bdc:	4629      	mov	r1, r5
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7ff febe 	bl	8008960 <rshift>
 8008be4:	442f      	add	r7, r5
 8008be6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bea:	42bb      	cmp	r3, r7
 8008bec:	da42      	bge.n	8008c74 <__gethex+0x244>
 8008bee:	4621      	mov	r1, r4
 8008bf0:	9801      	ldr	r0, [sp, #4]
 8008bf2:	f7fe f94f 	bl	8006e94 <_Bfree>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bfa:	25a3      	movs	r5, #163	@ 0xa3
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	e793      	b.n	8008b28 <__gethex+0xf8>
 8008c00:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008c04:	2a2e      	cmp	r2, #46	@ 0x2e
 8008c06:	d012      	beq.n	8008c2e <__gethex+0x1fe>
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	d104      	bne.n	8008c16 <__gethex+0x1e6>
 8008c0c:	f845 bb04 	str.w	fp, [r5], #4
 8008c10:	f04f 0b00 	mov.w	fp, #0
 8008c14:	465b      	mov	r3, fp
 8008c16:	7830      	ldrb	r0, [r6, #0]
 8008c18:	9303      	str	r3, [sp, #12]
 8008c1a:	f7ff fef4 	bl	8008a06 <__hexdig_fun>
 8008c1e:	9b03      	ldr	r3, [sp, #12]
 8008c20:	f000 000f 	and.w	r0, r0, #15
 8008c24:	4098      	lsls	r0, r3
 8008c26:	ea4b 0b00 	orr.w	fp, fp, r0
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	e7ae      	b.n	8008b8c <__gethex+0x15c>
 8008c2e:	45b1      	cmp	r9, r6
 8008c30:	d8ea      	bhi.n	8008c08 <__gethex+0x1d8>
 8008c32:	2201      	movs	r2, #1
 8008c34:	4630      	mov	r0, r6
 8008c36:	492a      	ldr	r1, [pc, #168]	@ (8008ce0 <__gethex+0x2b0>)
 8008c38:	9303      	str	r3, [sp, #12]
 8008c3a:	f7ff fe29 	bl	8008890 <strncmp>
 8008c3e:	9b03      	ldr	r3, [sp, #12]
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d1e1      	bne.n	8008c08 <__gethex+0x1d8>
 8008c44:	e7a2      	b.n	8008b8c <__gethex+0x15c>
 8008c46:	4620      	mov	r0, r4
 8008c48:	1ea9      	subs	r1, r5, #2
 8008c4a:	f7fe fd68 	bl	800771e <__any_on>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d0c2      	beq.n	8008bd8 <__gethex+0x1a8>
 8008c52:	f04f 0903 	mov.w	r9, #3
 8008c56:	e7c1      	b.n	8008bdc <__gethex+0x1ac>
 8008c58:	da09      	bge.n	8008c6e <__gethex+0x23e>
 8008c5a:	1b75      	subs	r5, r6, r5
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	462a      	mov	r2, r5
 8008c60:	9801      	ldr	r0, [sp, #4]
 8008c62:	f7fe fb2d 	bl	80072c0 <__lshift>
 8008c66:	4604      	mov	r4, r0
 8008c68:	1b7f      	subs	r7, r7, r5
 8008c6a:	f100 0a14 	add.w	sl, r0, #20
 8008c6e:	f04f 0900 	mov.w	r9, #0
 8008c72:	e7b8      	b.n	8008be6 <__gethex+0x1b6>
 8008c74:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008c78:	42bd      	cmp	r5, r7
 8008c7a:	dd6f      	ble.n	8008d5c <__gethex+0x32c>
 8008c7c:	1bed      	subs	r5, r5, r7
 8008c7e:	42ae      	cmp	r6, r5
 8008c80:	dc34      	bgt.n	8008cec <__gethex+0x2bc>
 8008c82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d022      	beq.n	8008cd0 <__gethex+0x2a0>
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d024      	beq.n	8008cd8 <__gethex+0x2a8>
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d115      	bne.n	8008cbe <__gethex+0x28e>
 8008c92:	42ae      	cmp	r6, r5
 8008c94:	d113      	bne.n	8008cbe <__gethex+0x28e>
 8008c96:	2e01      	cmp	r6, #1
 8008c98:	d10b      	bne.n	8008cb2 <__gethex+0x282>
 8008c9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c9e:	9a02      	ldr	r2, [sp, #8]
 8008ca0:	2562      	movs	r5, #98	@ 0x62
 8008ca2:	6013      	str	r3, [r2, #0]
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	6123      	str	r3, [r4, #16]
 8008ca8:	f8ca 3000 	str.w	r3, [sl]
 8008cac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cae:	601c      	str	r4, [r3, #0]
 8008cb0:	e73a      	b.n	8008b28 <__gethex+0xf8>
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	1e71      	subs	r1, r6, #1
 8008cb6:	f7fe fd32 	bl	800771e <__any_on>
 8008cba:	2800      	cmp	r0, #0
 8008cbc:	d1ed      	bne.n	8008c9a <__gethex+0x26a>
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	9801      	ldr	r0, [sp, #4]
 8008cc2:	f7fe f8e7 	bl	8006e94 <_Bfree>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cca:	2550      	movs	r5, #80	@ 0x50
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	e72b      	b.n	8008b28 <__gethex+0xf8>
 8008cd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1f3      	bne.n	8008cbe <__gethex+0x28e>
 8008cd6:	e7e0      	b.n	8008c9a <__gethex+0x26a>
 8008cd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1dd      	bne.n	8008c9a <__gethex+0x26a>
 8008cde:	e7ee      	b.n	8008cbe <__gethex+0x28e>
 8008ce0:	08009958 	.word	0x08009958
 8008ce4:	080097f0 	.word	0x080097f0
 8008ce8:	08009a05 	.word	0x08009a05
 8008cec:	1e6f      	subs	r7, r5, #1
 8008cee:	f1b9 0f00 	cmp.w	r9, #0
 8008cf2:	d130      	bne.n	8008d56 <__gethex+0x326>
 8008cf4:	b127      	cbz	r7, 8008d00 <__gethex+0x2d0>
 8008cf6:	4639      	mov	r1, r7
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f7fe fd10 	bl	800771e <__any_on>
 8008cfe:	4681      	mov	r9, r0
 8008d00:	2301      	movs	r3, #1
 8008d02:	4629      	mov	r1, r5
 8008d04:	1b76      	subs	r6, r6, r5
 8008d06:	2502      	movs	r5, #2
 8008d08:	117a      	asrs	r2, r7, #5
 8008d0a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008d0e:	f007 071f 	and.w	r7, r7, #31
 8008d12:	40bb      	lsls	r3, r7
 8008d14:	4213      	tst	r3, r2
 8008d16:	4620      	mov	r0, r4
 8008d18:	bf18      	it	ne
 8008d1a:	f049 0902 	orrne.w	r9, r9, #2
 8008d1e:	f7ff fe1f 	bl	8008960 <rshift>
 8008d22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008d26:	f1b9 0f00 	cmp.w	r9, #0
 8008d2a:	d047      	beq.n	8008dbc <__gethex+0x38c>
 8008d2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d015      	beq.n	8008d60 <__gethex+0x330>
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d017      	beq.n	8008d68 <__gethex+0x338>
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d109      	bne.n	8008d50 <__gethex+0x320>
 8008d3c:	f019 0f02 	tst.w	r9, #2
 8008d40:	d006      	beq.n	8008d50 <__gethex+0x320>
 8008d42:	f8da 3000 	ldr.w	r3, [sl]
 8008d46:	ea49 0903 	orr.w	r9, r9, r3
 8008d4a:	f019 0f01 	tst.w	r9, #1
 8008d4e:	d10e      	bne.n	8008d6e <__gethex+0x33e>
 8008d50:	f045 0510 	orr.w	r5, r5, #16
 8008d54:	e032      	b.n	8008dbc <__gethex+0x38c>
 8008d56:	f04f 0901 	mov.w	r9, #1
 8008d5a:	e7d1      	b.n	8008d00 <__gethex+0x2d0>
 8008d5c:	2501      	movs	r5, #1
 8008d5e:	e7e2      	b.n	8008d26 <__gethex+0x2f6>
 8008d60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d62:	f1c3 0301 	rsb	r3, r3, #1
 8008d66:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0f0      	beq.n	8008d50 <__gethex+0x320>
 8008d6e:	f04f 0c00 	mov.w	ip, #0
 8008d72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d76:	f104 0314 	add.w	r3, r4, #20
 8008d7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008d7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008d82:	4618      	mov	r0, r3
 8008d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d88:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8008d8c:	d01b      	beq.n	8008dc6 <__gethex+0x396>
 8008d8e:	3201      	adds	r2, #1
 8008d90:	6002      	str	r2, [r0, #0]
 8008d92:	2d02      	cmp	r5, #2
 8008d94:	f104 0314 	add.w	r3, r4, #20
 8008d98:	d13c      	bne.n	8008e14 <__gethex+0x3e4>
 8008d9a:	f8d8 2000 	ldr.w	r2, [r8]
 8008d9e:	3a01      	subs	r2, #1
 8008da0:	42b2      	cmp	r2, r6
 8008da2:	d109      	bne.n	8008db8 <__gethex+0x388>
 8008da4:	2201      	movs	r2, #1
 8008da6:	1171      	asrs	r1, r6, #5
 8008da8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dac:	f006 061f 	and.w	r6, r6, #31
 8008db0:	fa02 f606 	lsl.w	r6, r2, r6
 8008db4:	421e      	tst	r6, r3
 8008db6:	d13a      	bne.n	8008e2e <__gethex+0x3fe>
 8008db8:	f045 0520 	orr.w	r5, r5, #32
 8008dbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dbe:	601c      	str	r4, [r3, #0]
 8008dc0:	9b02      	ldr	r3, [sp, #8]
 8008dc2:	601f      	str	r7, [r3, #0]
 8008dc4:	e6b0      	b.n	8008b28 <__gethex+0xf8>
 8008dc6:	4299      	cmp	r1, r3
 8008dc8:	f843 cc04 	str.w	ip, [r3, #-4]
 8008dcc:	d8d9      	bhi.n	8008d82 <__gethex+0x352>
 8008dce:	68a3      	ldr	r3, [r4, #8]
 8008dd0:	459b      	cmp	fp, r3
 8008dd2:	db17      	blt.n	8008e04 <__gethex+0x3d4>
 8008dd4:	6861      	ldr	r1, [r4, #4]
 8008dd6:	9801      	ldr	r0, [sp, #4]
 8008dd8:	3101      	adds	r1, #1
 8008dda:	f7fe f81b 	bl	8006e14 <_Balloc>
 8008dde:	4681      	mov	r9, r0
 8008de0:	b918      	cbnz	r0, 8008dea <__gethex+0x3ba>
 8008de2:	4602      	mov	r2, r0
 8008de4:	2184      	movs	r1, #132	@ 0x84
 8008de6:	4b19      	ldr	r3, [pc, #100]	@ (8008e4c <__gethex+0x41c>)
 8008de8:	e6c5      	b.n	8008b76 <__gethex+0x146>
 8008dea:	6922      	ldr	r2, [r4, #16]
 8008dec:	f104 010c 	add.w	r1, r4, #12
 8008df0:	3202      	adds	r2, #2
 8008df2:	0092      	lsls	r2, r2, #2
 8008df4:	300c      	adds	r0, #12
 8008df6:	f7ff fd6d 	bl	80088d4 <memcpy>
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	9801      	ldr	r0, [sp, #4]
 8008dfe:	f7fe f849 	bl	8006e94 <_Bfree>
 8008e02:	464c      	mov	r4, r9
 8008e04:	6923      	ldr	r3, [r4, #16]
 8008e06:	1c5a      	adds	r2, r3, #1
 8008e08:	6122      	str	r2, [r4, #16]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e10:	615a      	str	r2, [r3, #20]
 8008e12:	e7be      	b.n	8008d92 <__gethex+0x362>
 8008e14:	6922      	ldr	r2, [r4, #16]
 8008e16:	455a      	cmp	r2, fp
 8008e18:	dd0b      	ble.n	8008e32 <__gethex+0x402>
 8008e1a:	2101      	movs	r1, #1
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f7ff fd9f 	bl	8008960 <rshift>
 8008e22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e26:	3701      	adds	r7, #1
 8008e28:	42bb      	cmp	r3, r7
 8008e2a:	f6ff aee0 	blt.w	8008bee <__gethex+0x1be>
 8008e2e:	2501      	movs	r5, #1
 8008e30:	e7c2      	b.n	8008db8 <__gethex+0x388>
 8008e32:	f016 061f 	ands.w	r6, r6, #31
 8008e36:	d0fa      	beq.n	8008e2e <__gethex+0x3fe>
 8008e38:	4453      	add	r3, sl
 8008e3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008e3e:	f7fe f8db 	bl	8006ff8 <__hi0bits>
 8008e42:	f1c6 0620 	rsb	r6, r6, #32
 8008e46:	42b0      	cmp	r0, r6
 8008e48:	dbe7      	blt.n	8008e1a <__gethex+0x3ea>
 8008e4a:	e7f0      	b.n	8008e2e <__gethex+0x3fe>
 8008e4c:	080097f0 	.word	0x080097f0

08008e50 <L_shift>:
 8008e50:	f1c2 0208 	rsb	r2, r2, #8
 8008e54:	0092      	lsls	r2, r2, #2
 8008e56:	b570      	push	{r4, r5, r6, lr}
 8008e58:	f1c2 0620 	rsb	r6, r2, #32
 8008e5c:	6843      	ldr	r3, [r0, #4]
 8008e5e:	6804      	ldr	r4, [r0, #0]
 8008e60:	fa03 f506 	lsl.w	r5, r3, r6
 8008e64:	432c      	orrs	r4, r5
 8008e66:	40d3      	lsrs	r3, r2
 8008e68:	6004      	str	r4, [r0, #0]
 8008e6a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e6e:	4288      	cmp	r0, r1
 8008e70:	d3f4      	bcc.n	8008e5c <L_shift+0xc>
 8008e72:	bd70      	pop	{r4, r5, r6, pc}

08008e74 <__match>:
 8008e74:	b530      	push	{r4, r5, lr}
 8008e76:	6803      	ldr	r3, [r0, #0]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e7e:	b914      	cbnz	r4, 8008e86 <__match+0x12>
 8008e80:	6003      	str	r3, [r0, #0]
 8008e82:	2001      	movs	r0, #1
 8008e84:	bd30      	pop	{r4, r5, pc}
 8008e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e8a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008e8e:	2d19      	cmp	r5, #25
 8008e90:	bf98      	it	ls
 8008e92:	3220      	addls	r2, #32
 8008e94:	42a2      	cmp	r2, r4
 8008e96:	d0f0      	beq.n	8008e7a <__match+0x6>
 8008e98:	2000      	movs	r0, #0
 8008e9a:	e7f3      	b.n	8008e84 <__match+0x10>

08008e9c <__hexnan>:
 8008e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	2500      	movs	r5, #0
 8008ea2:	680b      	ldr	r3, [r1, #0]
 8008ea4:	4682      	mov	sl, r0
 8008ea6:	115e      	asrs	r6, r3, #5
 8008ea8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008eac:	f013 031f 	ands.w	r3, r3, #31
 8008eb0:	bf18      	it	ne
 8008eb2:	3604      	addne	r6, #4
 8008eb4:	1f37      	subs	r7, r6, #4
 8008eb6:	4690      	mov	r8, r2
 8008eb8:	46b9      	mov	r9, r7
 8008eba:	463c      	mov	r4, r7
 8008ebc:	46ab      	mov	fp, r5
 8008ebe:	b087      	sub	sp, #28
 8008ec0:	6801      	ldr	r1, [r0, #0]
 8008ec2:	9301      	str	r3, [sp, #4]
 8008ec4:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ec8:	9502      	str	r5, [sp, #8]
 8008eca:	784a      	ldrb	r2, [r1, #1]
 8008ecc:	1c4b      	adds	r3, r1, #1
 8008ece:	9303      	str	r3, [sp, #12]
 8008ed0:	b342      	cbz	r2, 8008f24 <__hexnan+0x88>
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	9105      	str	r1, [sp, #20]
 8008ed6:	9204      	str	r2, [sp, #16]
 8008ed8:	f7ff fd95 	bl	8008a06 <__hexdig_fun>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d151      	bne.n	8008f84 <__hexnan+0xe8>
 8008ee0:	9a04      	ldr	r2, [sp, #16]
 8008ee2:	9905      	ldr	r1, [sp, #20]
 8008ee4:	2a20      	cmp	r2, #32
 8008ee6:	d818      	bhi.n	8008f1a <__hexnan+0x7e>
 8008ee8:	9b02      	ldr	r3, [sp, #8]
 8008eea:	459b      	cmp	fp, r3
 8008eec:	dd13      	ble.n	8008f16 <__hexnan+0x7a>
 8008eee:	454c      	cmp	r4, r9
 8008ef0:	d206      	bcs.n	8008f00 <__hexnan+0x64>
 8008ef2:	2d07      	cmp	r5, #7
 8008ef4:	dc04      	bgt.n	8008f00 <__hexnan+0x64>
 8008ef6:	462a      	mov	r2, r5
 8008ef8:	4649      	mov	r1, r9
 8008efa:	4620      	mov	r0, r4
 8008efc:	f7ff ffa8 	bl	8008e50 <L_shift>
 8008f00:	4544      	cmp	r4, r8
 8008f02:	d952      	bls.n	8008faa <__hexnan+0x10e>
 8008f04:	2300      	movs	r3, #0
 8008f06:	f1a4 0904 	sub.w	r9, r4, #4
 8008f0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f0e:	461d      	mov	r5, r3
 8008f10:	464c      	mov	r4, r9
 8008f12:	f8cd b008 	str.w	fp, [sp, #8]
 8008f16:	9903      	ldr	r1, [sp, #12]
 8008f18:	e7d7      	b.n	8008eca <__hexnan+0x2e>
 8008f1a:	2a29      	cmp	r2, #41	@ 0x29
 8008f1c:	d157      	bne.n	8008fce <__hexnan+0x132>
 8008f1e:	3102      	adds	r1, #2
 8008f20:	f8ca 1000 	str.w	r1, [sl]
 8008f24:	f1bb 0f00 	cmp.w	fp, #0
 8008f28:	d051      	beq.n	8008fce <__hexnan+0x132>
 8008f2a:	454c      	cmp	r4, r9
 8008f2c:	d206      	bcs.n	8008f3c <__hexnan+0xa0>
 8008f2e:	2d07      	cmp	r5, #7
 8008f30:	dc04      	bgt.n	8008f3c <__hexnan+0xa0>
 8008f32:	462a      	mov	r2, r5
 8008f34:	4649      	mov	r1, r9
 8008f36:	4620      	mov	r0, r4
 8008f38:	f7ff ff8a 	bl	8008e50 <L_shift>
 8008f3c:	4544      	cmp	r4, r8
 8008f3e:	d936      	bls.n	8008fae <__hexnan+0x112>
 8008f40:	4623      	mov	r3, r4
 8008f42:	f1a8 0204 	sub.w	r2, r8, #4
 8008f46:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f4a:	429f      	cmp	r7, r3
 8008f4c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f50:	d2f9      	bcs.n	8008f46 <__hexnan+0xaa>
 8008f52:	1b3b      	subs	r3, r7, r4
 8008f54:	f023 0303 	bic.w	r3, r3, #3
 8008f58:	3304      	adds	r3, #4
 8008f5a:	3401      	adds	r4, #1
 8008f5c:	3e03      	subs	r6, #3
 8008f5e:	42b4      	cmp	r4, r6
 8008f60:	bf88      	it	hi
 8008f62:	2304      	movhi	r3, #4
 8008f64:	2200      	movs	r2, #0
 8008f66:	4443      	add	r3, r8
 8008f68:	f843 2b04 	str.w	r2, [r3], #4
 8008f6c:	429f      	cmp	r7, r3
 8008f6e:	d2fb      	bcs.n	8008f68 <__hexnan+0xcc>
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	b91b      	cbnz	r3, 8008f7c <__hexnan+0xe0>
 8008f74:	4547      	cmp	r7, r8
 8008f76:	d128      	bne.n	8008fca <__hexnan+0x12e>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	603b      	str	r3, [r7, #0]
 8008f7c:	2005      	movs	r0, #5
 8008f7e:	b007      	add	sp, #28
 8008f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f84:	3501      	adds	r5, #1
 8008f86:	2d08      	cmp	r5, #8
 8008f88:	f10b 0b01 	add.w	fp, fp, #1
 8008f8c:	dd06      	ble.n	8008f9c <__hexnan+0x100>
 8008f8e:	4544      	cmp	r4, r8
 8008f90:	d9c1      	bls.n	8008f16 <__hexnan+0x7a>
 8008f92:	2300      	movs	r3, #0
 8008f94:	2501      	movs	r5, #1
 8008f96:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f9a:	3c04      	subs	r4, #4
 8008f9c:	6822      	ldr	r2, [r4, #0]
 8008f9e:	f000 000f 	and.w	r0, r0, #15
 8008fa2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008fa6:	6020      	str	r0, [r4, #0]
 8008fa8:	e7b5      	b.n	8008f16 <__hexnan+0x7a>
 8008faa:	2508      	movs	r5, #8
 8008fac:	e7b3      	b.n	8008f16 <__hexnan+0x7a>
 8008fae:	9b01      	ldr	r3, [sp, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d0dd      	beq.n	8008f70 <__hexnan+0xd4>
 8008fb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fb8:	f1c3 0320 	rsb	r3, r3, #32
 8008fbc:	40da      	lsrs	r2, r3
 8008fbe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	f846 3c04 	str.w	r3, [r6, #-4]
 8008fc8:	e7d2      	b.n	8008f70 <__hexnan+0xd4>
 8008fca:	3f04      	subs	r7, #4
 8008fcc:	e7d0      	b.n	8008f70 <__hexnan+0xd4>
 8008fce:	2004      	movs	r0, #4
 8008fd0:	e7d5      	b.n	8008f7e <__hexnan+0xe2>

08008fd2 <__ascii_mbtowc>:
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	b901      	cbnz	r1, 8008fd8 <__ascii_mbtowc+0x6>
 8008fd6:	a901      	add	r1, sp, #4
 8008fd8:	b142      	cbz	r2, 8008fec <__ascii_mbtowc+0x1a>
 8008fda:	b14b      	cbz	r3, 8008ff0 <__ascii_mbtowc+0x1e>
 8008fdc:	7813      	ldrb	r3, [r2, #0]
 8008fde:	600b      	str	r3, [r1, #0]
 8008fe0:	7812      	ldrb	r2, [r2, #0]
 8008fe2:	1e10      	subs	r0, r2, #0
 8008fe4:	bf18      	it	ne
 8008fe6:	2001      	movne	r0, #1
 8008fe8:	b002      	add	sp, #8
 8008fea:	4770      	bx	lr
 8008fec:	4610      	mov	r0, r2
 8008fee:	e7fb      	b.n	8008fe8 <__ascii_mbtowc+0x16>
 8008ff0:	f06f 0001 	mvn.w	r0, #1
 8008ff4:	e7f8      	b.n	8008fe8 <__ascii_mbtowc+0x16>

08008ff6 <_realloc_r>:
 8008ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ffa:	4680      	mov	r8, r0
 8008ffc:	4615      	mov	r5, r2
 8008ffe:	460c      	mov	r4, r1
 8009000:	b921      	cbnz	r1, 800900c <_realloc_r+0x16>
 8009002:	4611      	mov	r1, r2
 8009004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009008:	f7fd be78 	b.w	8006cfc <_malloc_r>
 800900c:	b92a      	cbnz	r2, 800901a <_realloc_r+0x24>
 800900e:	f7fd fe03 	bl	8006c18 <_free_r>
 8009012:	2400      	movs	r4, #0
 8009014:	4620      	mov	r0, r4
 8009016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800901a:	f000 f840 	bl	800909e <_malloc_usable_size_r>
 800901e:	4285      	cmp	r5, r0
 8009020:	4606      	mov	r6, r0
 8009022:	d802      	bhi.n	800902a <_realloc_r+0x34>
 8009024:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009028:	d8f4      	bhi.n	8009014 <_realloc_r+0x1e>
 800902a:	4629      	mov	r1, r5
 800902c:	4640      	mov	r0, r8
 800902e:	f7fd fe65 	bl	8006cfc <_malloc_r>
 8009032:	4607      	mov	r7, r0
 8009034:	2800      	cmp	r0, #0
 8009036:	d0ec      	beq.n	8009012 <_realloc_r+0x1c>
 8009038:	42b5      	cmp	r5, r6
 800903a:	462a      	mov	r2, r5
 800903c:	4621      	mov	r1, r4
 800903e:	bf28      	it	cs
 8009040:	4632      	movcs	r2, r6
 8009042:	f7ff fc47 	bl	80088d4 <memcpy>
 8009046:	4621      	mov	r1, r4
 8009048:	4640      	mov	r0, r8
 800904a:	f7fd fde5 	bl	8006c18 <_free_r>
 800904e:	463c      	mov	r4, r7
 8009050:	e7e0      	b.n	8009014 <_realloc_r+0x1e>

08009052 <__ascii_wctomb>:
 8009052:	4603      	mov	r3, r0
 8009054:	4608      	mov	r0, r1
 8009056:	b141      	cbz	r1, 800906a <__ascii_wctomb+0x18>
 8009058:	2aff      	cmp	r2, #255	@ 0xff
 800905a:	d904      	bls.n	8009066 <__ascii_wctomb+0x14>
 800905c:	228a      	movs	r2, #138	@ 0x8a
 800905e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	4770      	bx	lr
 8009066:	2001      	movs	r0, #1
 8009068:	700a      	strb	r2, [r1, #0]
 800906a:	4770      	bx	lr

0800906c <fiprintf>:
 800906c:	b40e      	push	{r1, r2, r3}
 800906e:	b503      	push	{r0, r1, lr}
 8009070:	4601      	mov	r1, r0
 8009072:	ab03      	add	r3, sp, #12
 8009074:	4805      	ldr	r0, [pc, #20]	@ (800908c <fiprintf+0x20>)
 8009076:	f853 2b04 	ldr.w	r2, [r3], #4
 800907a:	6800      	ldr	r0, [r0, #0]
 800907c:	9301      	str	r3, [sp, #4]
 800907e:	f000 f83d 	bl	80090fc <_vfiprintf_r>
 8009082:	b002      	add	sp, #8
 8009084:	f85d eb04 	ldr.w	lr, [sp], #4
 8009088:	b003      	add	sp, #12
 800908a:	4770      	bx	lr
 800908c:	20000018 	.word	0x20000018

08009090 <abort>:
 8009090:	2006      	movs	r0, #6
 8009092:	b508      	push	{r3, lr}
 8009094:	f000 fa06 	bl	80094a4 <raise>
 8009098:	2001      	movs	r0, #1
 800909a:	f7f8 fe86 	bl	8001daa <_exit>

0800909e <_malloc_usable_size_r>:
 800909e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090a2:	1f18      	subs	r0, r3, #4
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	bfbc      	itt	lt
 80090a8:	580b      	ldrlt	r3, [r1, r0]
 80090aa:	18c0      	addlt	r0, r0, r3
 80090ac:	4770      	bx	lr

080090ae <__sfputc_r>:
 80090ae:	6893      	ldr	r3, [r2, #8]
 80090b0:	b410      	push	{r4}
 80090b2:	3b01      	subs	r3, #1
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	6093      	str	r3, [r2, #8]
 80090b8:	da07      	bge.n	80090ca <__sfputc_r+0x1c>
 80090ba:	6994      	ldr	r4, [r2, #24]
 80090bc:	42a3      	cmp	r3, r4
 80090be:	db01      	blt.n	80090c4 <__sfputc_r+0x16>
 80090c0:	290a      	cmp	r1, #10
 80090c2:	d102      	bne.n	80090ca <__sfputc_r+0x1c>
 80090c4:	bc10      	pop	{r4}
 80090c6:	f000 b931 	b.w	800932c <__swbuf_r>
 80090ca:	6813      	ldr	r3, [r2, #0]
 80090cc:	1c58      	adds	r0, r3, #1
 80090ce:	6010      	str	r0, [r2, #0]
 80090d0:	7019      	strb	r1, [r3, #0]
 80090d2:	4608      	mov	r0, r1
 80090d4:	bc10      	pop	{r4}
 80090d6:	4770      	bx	lr

080090d8 <__sfputs_r>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	4606      	mov	r6, r0
 80090dc:	460f      	mov	r7, r1
 80090de:	4614      	mov	r4, r2
 80090e0:	18d5      	adds	r5, r2, r3
 80090e2:	42ac      	cmp	r4, r5
 80090e4:	d101      	bne.n	80090ea <__sfputs_r+0x12>
 80090e6:	2000      	movs	r0, #0
 80090e8:	e007      	b.n	80090fa <__sfputs_r+0x22>
 80090ea:	463a      	mov	r2, r7
 80090ec:	4630      	mov	r0, r6
 80090ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f2:	f7ff ffdc 	bl	80090ae <__sfputc_r>
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	d1f3      	bne.n	80090e2 <__sfputs_r+0xa>
 80090fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090fc <_vfiprintf_r>:
 80090fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009100:	460d      	mov	r5, r1
 8009102:	4614      	mov	r4, r2
 8009104:	4698      	mov	r8, r3
 8009106:	4606      	mov	r6, r0
 8009108:	b09d      	sub	sp, #116	@ 0x74
 800910a:	b118      	cbz	r0, 8009114 <_vfiprintf_r+0x18>
 800910c:	6a03      	ldr	r3, [r0, #32]
 800910e:	b90b      	cbnz	r3, 8009114 <_vfiprintf_r+0x18>
 8009110:	f7fc fe06 	bl	8005d20 <__sinit>
 8009114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009116:	07d9      	lsls	r1, r3, #31
 8009118:	d405      	bmi.n	8009126 <_vfiprintf_r+0x2a>
 800911a:	89ab      	ldrh	r3, [r5, #12]
 800911c:	059a      	lsls	r2, r3, #22
 800911e:	d402      	bmi.n	8009126 <_vfiprintf_r+0x2a>
 8009120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009122:	f7fc ff14 	bl	8005f4e <__retarget_lock_acquire_recursive>
 8009126:	89ab      	ldrh	r3, [r5, #12]
 8009128:	071b      	lsls	r3, r3, #28
 800912a:	d501      	bpl.n	8009130 <_vfiprintf_r+0x34>
 800912c:	692b      	ldr	r3, [r5, #16]
 800912e:	b99b      	cbnz	r3, 8009158 <_vfiprintf_r+0x5c>
 8009130:	4629      	mov	r1, r5
 8009132:	4630      	mov	r0, r6
 8009134:	f000 f938 	bl	80093a8 <__swsetup_r>
 8009138:	b170      	cbz	r0, 8009158 <_vfiprintf_r+0x5c>
 800913a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800913c:	07dc      	lsls	r4, r3, #31
 800913e:	d504      	bpl.n	800914a <_vfiprintf_r+0x4e>
 8009140:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009144:	b01d      	add	sp, #116	@ 0x74
 8009146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914a:	89ab      	ldrh	r3, [r5, #12]
 800914c:	0598      	lsls	r0, r3, #22
 800914e:	d4f7      	bmi.n	8009140 <_vfiprintf_r+0x44>
 8009150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009152:	f7fc fefd 	bl	8005f50 <__retarget_lock_release_recursive>
 8009156:	e7f3      	b.n	8009140 <_vfiprintf_r+0x44>
 8009158:	2300      	movs	r3, #0
 800915a:	9309      	str	r3, [sp, #36]	@ 0x24
 800915c:	2320      	movs	r3, #32
 800915e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009162:	2330      	movs	r3, #48	@ 0x30
 8009164:	f04f 0901 	mov.w	r9, #1
 8009168:	f8cd 800c 	str.w	r8, [sp, #12]
 800916c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009318 <_vfiprintf_r+0x21c>
 8009170:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009174:	4623      	mov	r3, r4
 8009176:	469a      	mov	sl, r3
 8009178:	f813 2b01 	ldrb.w	r2, [r3], #1
 800917c:	b10a      	cbz	r2, 8009182 <_vfiprintf_r+0x86>
 800917e:	2a25      	cmp	r2, #37	@ 0x25
 8009180:	d1f9      	bne.n	8009176 <_vfiprintf_r+0x7a>
 8009182:	ebba 0b04 	subs.w	fp, sl, r4
 8009186:	d00b      	beq.n	80091a0 <_vfiprintf_r+0xa4>
 8009188:	465b      	mov	r3, fp
 800918a:	4622      	mov	r2, r4
 800918c:	4629      	mov	r1, r5
 800918e:	4630      	mov	r0, r6
 8009190:	f7ff ffa2 	bl	80090d8 <__sfputs_r>
 8009194:	3001      	adds	r0, #1
 8009196:	f000 80a7 	beq.w	80092e8 <_vfiprintf_r+0x1ec>
 800919a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800919c:	445a      	add	r2, fp
 800919e:	9209      	str	r2, [sp, #36]	@ 0x24
 80091a0:	f89a 3000 	ldrb.w	r3, [sl]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 809f 	beq.w	80092e8 <_vfiprintf_r+0x1ec>
 80091aa:	2300      	movs	r3, #0
 80091ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091b4:	f10a 0a01 	add.w	sl, sl, #1
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	9307      	str	r3, [sp, #28]
 80091bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80091c2:	4654      	mov	r4, sl
 80091c4:	2205      	movs	r2, #5
 80091c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ca:	4853      	ldr	r0, [pc, #332]	@ (8009318 <_vfiprintf_r+0x21c>)
 80091cc:	f7fc fec1 	bl	8005f52 <memchr>
 80091d0:	9a04      	ldr	r2, [sp, #16]
 80091d2:	b9d8      	cbnz	r0, 800920c <_vfiprintf_r+0x110>
 80091d4:	06d1      	lsls	r1, r2, #27
 80091d6:	bf44      	itt	mi
 80091d8:	2320      	movmi	r3, #32
 80091da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091de:	0713      	lsls	r3, r2, #28
 80091e0:	bf44      	itt	mi
 80091e2:	232b      	movmi	r3, #43	@ 0x2b
 80091e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091e8:	f89a 3000 	ldrb.w	r3, [sl]
 80091ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80091ee:	d015      	beq.n	800921c <_vfiprintf_r+0x120>
 80091f0:	4654      	mov	r4, sl
 80091f2:	2000      	movs	r0, #0
 80091f4:	f04f 0c0a 	mov.w	ip, #10
 80091f8:	9a07      	ldr	r2, [sp, #28]
 80091fa:	4621      	mov	r1, r4
 80091fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009200:	3b30      	subs	r3, #48	@ 0x30
 8009202:	2b09      	cmp	r3, #9
 8009204:	d94b      	bls.n	800929e <_vfiprintf_r+0x1a2>
 8009206:	b1b0      	cbz	r0, 8009236 <_vfiprintf_r+0x13a>
 8009208:	9207      	str	r2, [sp, #28]
 800920a:	e014      	b.n	8009236 <_vfiprintf_r+0x13a>
 800920c:	eba0 0308 	sub.w	r3, r0, r8
 8009210:	fa09 f303 	lsl.w	r3, r9, r3
 8009214:	4313      	orrs	r3, r2
 8009216:	46a2      	mov	sl, r4
 8009218:	9304      	str	r3, [sp, #16]
 800921a:	e7d2      	b.n	80091c2 <_vfiprintf_r+0xc6>
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	1d19      	adds	r1, r3, #4
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	9103      	str	r1, [sp, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	bfbb      	ittet	lt
 8009228:	425b      	neglt	r3, r3
 800922a:	f042 0202 	orrlt.w	r2, r2, #2
 800922e:	9307      	strge	r3, [sp, #28]
 8009230:	9307      	strlt	r3, [sp, #28]
 8009232:	bfb8      	it	lt
 8009234:	9204      	strlt	r2, [sp, #16]
 8009236:	7823      	ldrb	r3, [r4, #0]
 8009238:	2b2e      	cmp	r3, #46	@ 0x2e
 800923a:	d10a      	bne.n	8009252 <_vfiprintf_r+0x156>
 800923c:	7863      	ldrb	r3, [r4, #1]
 800923e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009240:	d132      	bne.n	80092a8 <_vfiprintf_r+0x1ac>
 8009242:	9b03      	ldr	r3, [sp, #12]
 8009244:	3402      	adds	r4, #2
 8009246:	1d1a      	adds	r2, r3, #4
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	9203      	str	r2, [sp, #12]
 800924c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009250:	9305      	str	r3, [sp, #20]
 8009252:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800931c <_vfiprintf_r+0x220>
 8009256:	2203      	movs	r2, #3
 8009258:	4650      	mov	r0, sl
 800925a:	7821      	ldrb	r1, [r4, #0]
 800925c:	f7fc fe79 	bl	8005f52 <memchr>
 8009260:	b138      	cbz	r0, 8009272 <_vfiprintf_r+0x176>
 8009262:	2240      	movs	r2, #64	@ 0x40
 8009264:	9b04      	ldr	r3, [sp, #16]
 8009266:	eba0 000a 	sub.w	r0, r0, sl
 800926a:	4082      	lsls	r2, r0
 800926c:	4313      	orrs	r3, r2
 800926e:	3401      	adds	r4, #1
 8009270:	9304      	str	r3, [sp, #16]
 8009272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009276:	2206      	movs	r2, #6
 8009278:	4829      	ldr	r0, [pc, #164]	@ (8009320 <_vfiprintf_r+0x224>)
 800927a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800927e:	f7fc fe68 	bl	8005f52 <memchr>
 8009282:	2800      	cmp	r0, #0
 8009284:	d03f      	beq.n	8009306 <_vfiprintf_r+0x20a>
 8009286:	4b27      	ldr	r3, [pc, #156]	@ (8009324 <_vfiprintf_r+0x228>)
 8009288:	bb1b      	cbnz	r3, 80092d2 <_vfiprintf_r+0x1d6>
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	3307      	adds	r3, #7
 800928e:	f023 0307 	bic.w	r3, r3, #7
 8009292:	3308      	adds	r3, #8
 8009294:	9303      	str	r3, [sp, #12]
 8009296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009298:	443b      	add	r3, r7
 800929a:	9309      	str	r3, [sp, #36]	@ 0x24
 800929c:	e76a      	b.n	8009174 <_vfiprintf_r+0x78>
 800929e:	460c      	mov	r4, r1
 80092a0:	2001      	movs	r0, #1
 80092a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80092a6:	e7a8      	b.n	80091fa <_vfiprintf_r+0xfe>
 80092a8:	2300      	movs	r3, #0
 80092aa:	f04f 0c0a 	mov.w	ip, #10
 80092ae:	4619      	mov	r1, r3
 80092b0:	3401      	adds	r4, #1
 80092b2:	9305      	str	r3, [sp, #20]
 80092b4:	4620      	mov	r0, r4
 80092b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092ba:	3a30      	subs	r2, #48	@ 0x30
 80092bc:	2a09      	cmp	r2, #9
 80092be:	d903      	bls.n	80092c8 <_vfiprintf_r+0x1cc>
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d0c6      	beq.n	8009252 <_vfiprintf_r+0x156>
 80092c4:	9105      	str	r1, [sp, #20]
 80092c6:	e7c4      	b.n	8009252 <_vfiprintf_r+0x156>
 80092c8:	4604      	mov	r4, r0
 80092ca:	2301      	movs	r3, #1
 80092cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d0:	e7f0      	b.n	80092b4 <_vfiprintf_r+0x1b8>
 80092d2:	ab03      	add	r3, sp, #12
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	462a      	mov	r2, r5
 80092d8:	4630      	mov	r0, r6
 80092da:	4b13      	ldr	r3, [pc, #76]	@ (8009328 <_vfiprintf_r+0x22c>)
 80092dc:	a904      	add	r1, sp, #16
 80092de:	f7fb fec5 	bl	800506c <_printf_float>
 80092e2:	4607      	mov	r7, r0
 80092e4:	1c78      	adds	r0, r7, #1
 80092e6:	d1d6      	bne.n	8009296 <_vfiprintf_r+0x19a>
 80092e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092ea:	07d9      	lsls	r1, r3, #31
 80092ec:	d405      	bmi.n	80092fa <_vfiprintf_r+0x1fe>
 80092ee:	89ab      	ldrh	r3, [r5, #12]
 80092f0:	059a      	lsls	r2, r3, #22
 80092f2:	d402      	bmi.n	80092fa <_vfiprintf_r+0x1fe>
 80092f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092f6:	f7fc fe2b 	bl	8005f50 <__retarget_lock_release_recursive>
 80092fa:	89ab      	ldrh	r3, [r5, #12]
 80092fc:	065b      	lsls	r3, r3, #25
 80092fe:	f53f af1f 	bmi.w	8009140 <_vfiprintf_r+0x44>
 8009302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009304:	e71e      	b.n	8009144 <_vfiprintf_r+0x48>
 8009306:	ab03      	add	r3, sp, #12
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	462a      	mov	r2, r5
 800930c:	4630      	mov	r0, r6
 800930e:	4b06      	ldr	r3, [pc, #24]	@ (8009328 <_vfiprintf_r+0x22c>)
 8009310:	a904      	add	r1, sp, #16
 8009312:	f7fc f949 	bl	80055a8 <_printf_i>
 8009316:	e7e4      	b.n	80092e2 <_vfiprintf_r+0x1e6>
 8009318:	080099b0 	.word	0x080099b0
 800931c:	080099b6 	.word	0x080099b6
 8009320:	080099ba 	.word	0x080099ba
 8009324:	0800506d 	.word	0x0800506d
 8009328:	080090d9 	.word	0x080090d9

0800932c <__swbuf_r>:
 800932c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932e:	460e      	mov	r6, r1
 8009330:	4614      	mov	r4, r2
 8009332:	4605      	mov	r5, r0
 8009334:	b118      	cbz	r0, 800933e <__swbuf_r+0x12>
 8009336:	6a03      	ldr	r3, [r0, #32]
 8009338:	b90b      	cbnz	r3, 800933e <__swbuf_r+0x12>
 800933a:	f7fc fcf1 	bl	8005d20 <__sinit>
 800933e:	69a3      	ldr	r3, [r4, #24]
 8009340:	60a3      	str	r3, [r4, #8]
 8009342:	89a3      	ldrh	r3, [r4, #12]
 8009344:	071a      	lsls	r2, r3, #28
 8009346:	d501      	bpl.n	800934c <__swbuf_r+0x20>
 8009348:	6923      	ldr	r3, [r4, #16]
 800934a:	b943      	cbnz	r3, 800935e <__swbuf_r+0x32>
 800934c:	4621      	mov	r1, r4
 800934e:	4628      	mov	r0, r5
 8009350:	f000 f82a 	bl	80093a8 <__swsetup_r>
 8009354:	b118      	cbz	r0, 800935e <__swbuf_r+0x32>
 8009356:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800935a:	4638      	mov	r0, r7
 800935c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	6922      	ldr	r2, [r4, #16]
 8009362:	b2f6      	uxtb	r6, r6
 8009364:	1a98      	subs	r0, r3, r2
 8009366:	6963      	ldr	r3, [r4, #20]
 8009368:	4637      	mov	r7, r6
 800936a:	4283      	cmp	r3, r0
 800936c:	dc05      	bgt.n	800937a <__swbuf_r+0x4e>
 800936e:	4621      	mov	r1, r4
 8009370:	4628      	mov	r0, r5
 8009372:	f7ff fa4b 	bl	800880c <_fflush_r>
 8009376:	2800      	cmp	r0, #0
 8009378:	d1ed      	bne.n	8009356 <__swbuf_r+0x2a>
 800937a:	68a3      	ldr	r3, [r4, #8]
 800937c:	3b01      	subs	r3, #1
 800937e:	60a3      	str	r3, [r4, #8]
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	6022      	str	r2, [r4, #0]
 8009386:	701e      	strb	r6, [r3, #0]
 8009388:	6962      	ldr	r2, [r4, #20]
 800938a:	1c43      	adds	r3, r0, #1
 800938c:	429a      	cmp	r2, r3
 800938e:	d004      	beq.n	800939a <__swbuf_r+0x6e>
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	07db      	lsls	r3, r3, #31
 8009394:	d5e1      	bpl.n	800935a <__swbuf_r+0x2e>
 8009396:	2e0a      	cmp	r6, #10
 8009398:	d1df      	bne.n	800935a <__swbuf_r+0x2e>
 800939a:	4621      	mov	r1, r4
 800939c:	4628      	mov	r0, r5
 800939e:	f7ff fa35 	bl	800880c <_fflush_r>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d0d9      	beq.n	800935a <__swbuf_r+0x2e>
 80093a6:	e7d6      	b.n	8009356 <__swbuf_r+0x2a>

080093a8 <__swsetup_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4b29      	ldr	r3, [pc, #164]	@ (8009450 <__swsetup_r+0xa8>)
 80093ac:	4605      	mov	r5, r0
 80093ae:	6818      	ldr	r0, [r3, #0]
 80093b0:	460c      	mov	r4, r1
 80093b2:	b118      	cbz	r0, 80093bc <__swsetup_r+0x14>
 80093b4:	6a03      	ldr	r3, [r0, #32]
 80093b6:	b90b      	cbnz	r3, 80093bc <__swsetup_r+0x14>
 80093b8:	f7fc fcb2 	bl	8005d20 <__sinit>
 80093bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093c0:	0719      	lsls	r1, r3, #28
 80093c2:	d422      	bmi.n	800940a <__swsetup_r+0x62>
 80093c4:	06da      	lsls	r2, r3, #27
 80093c6:	d407      	bmi.n	80093d8 <__swsetup_r+0x30>
 80093c8:	2209      	movs	r2, #9
 80093ca:	602a      	str	r2, [r5, #0]
 80093cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	e033      	b.n	8009440 <__swsetup_r+0x98>
 80093d8:	0758      	lsls	r0, r3, #29
 80093da:	d512      	bpl.n	8009402 <__swsetup_r+0x5a>
 80093dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093de:	b141      	cbz	r1, 80093f2 <__swsetup_r+0x4a>
 80093e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093e4:	4299      	cmp	r1, r3
 80093e6:	d002      	beq.n	80093ee <__swsetup_r+0x46>
 80093e8:	4628      	mov	r0, r5
 80093ea:	f7fd fc15 	bl	8006c18 <_free_r>
 80093ee:	2300      	movs	r3, #0
 80093f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093f8:	81a3      	strh	r3, [r4, #12]
 80093fa:	2300      	movs	r3, #0
 80093fc:	6063      	str	r3, [r4, #4]
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	f043 0308 	orr.w	r3, r3, #8
 8009408:	81a3      	strh	r3, [r4, #12]
 800940a:	6923      	ldr	r3, [r4, #16]
 800940c:	b94b      	cbnz	r3, 8009422 <__swsetup_r+0x7a>
 800940e:	89a3      	ldrh	r3, [r4, #12]
 8009410:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009418:	d003      	beq.n	8009422 <__swsetup_r+0x7a>
 800941a:	4621      	mov	r1, r4
 800941c:	4628      	mov	r0, r5
 800941e:	f000 f882 	bl	8009526 <__smakebuf_r>
 8009422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009426:	f013 0201 	ands.w	r2, r3, #1
 800942a:	d00a      	beq.n	8009442 <__swsetup_r+0x9a>
 800942c:	2200      	movs	r2, #0
 800942e:	60a2      	str	r2, [r4, #8]
 8009430:	6962      	ldr	r2, [r4, #20]
 8009432:	4252      	negs	r2, r2
 8009434:	61a2      	str	r2, [r4, #24]
 8009436:	6922      	ldr	r2, [r4, #16]
 8009438:	b942      	cbnz	r2, 800944c <__swsetup_r+0xa4>
 800943a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800943e:	d1c5      	bne.n	80093cc <__swsetup_r+0x24>
 8009440:	bd38      	pop	{r3, r4, r5, pc}
 8009442:	0799      	lsls	r1, r3, #30
 8009444:	bf58      	it	pl
 8009446:	6962      	ldrpl	r2, [r4, #20]
 8009448:	60a2      	str	r2, [r4, #8]
 800944a:	e7f4      	b.n	8009436 <__swsetup_r+0x8e>
 800944c:	2000      	movs	r0, #0
 800944e:	e7f7      	b.n	8009440 <__swsetup_r+0x98>
 8009450:	20000018 	.word	0x20000018

08009454 <_raise_r>:
 8009454:	291f      	cmp	r1, #31
 8009456:	b538      	push	{r3, r4, r5, lr}
 8009458:	4605      	mov	r5, r0
 800945a:	460c      	mov	r4, r1
 800945c:	d904      	bls.n	8009468 <_raise_r+0x14>
 800945e:	2316      	movs	r3, #22
 8009460:	6003      	str	r3, [r0, #0]
 8009462:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800946a:	b112      	cbz	r2, 8009472 <_raise_r+0x1e>
 800946c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009470:	b94b      	cbnz	r3, 8009486 <_raise_r+0x32>
 8009472:	4628      	mov	r0, r5
 8009474:	f000 f830 	bl	80094d8 <_getpid_r>
 8009478:	4622      	mov	r2, r4
 800947a:	4601      	mov	r1, r0
 800947c:	4628      	mov	r0, r5
 800947e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009482:	f000 b817 	b.w	80094b4 <_kill_r>
 8009486:	2b01      	cmp	r3, #1
 8009488:	d00a      	beq.n	80094a0 <_raise_r+0x4c>
 800948a:	1c59      	adds	r1, r3, #1
 800948c:	d103      	bne.n	8009496 <_raise_r+0x42>
 800948e:	2316      	movs	r3, #22
 8009490:	6003      	str	r3, [r0, #0]
 8009492:	2001      	movs	r0, #1
 8009494:	e7e7      	b.n	8009466 <_raise_r+0x12>
 8009496:	2100      	movs	r1, #0
 8009498:	4620      	mov	r0, r4
 800949a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800949e:	4798      	blx	r3
 80094a0:	2000      	movs	r0, #0
 80094a2:	e7e0      	b.n	8009466 <_raise_r+0x12>

080094a4 <raise>:
 80094a4:	4b02      	ldr	r3, [pc, #8]	@ (80094b0 <raise+0xc>)
 80094a6:	4601      	mov	r1, r0
 80094a8:	6818      	ldr	r0, [r3, #0]
 80094aa:	f7ff bfd3 	b.w	8009454 <_raise_r>
 80094ae:	bf00      	nop
 80094b0:	20000018 	.word	0x20000018

080094b4 <_kill_r>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	2300      	movs	r3, #0
 80094b8:	4d06      	ldr	r5, [pc, #24]	@ (80094d4 <_kill_r+0x20>)
 80094ba:	4604      	mov	r4, r0
 80094bc:	4608      	mov	r0, r1
 80094be:	4611      	mov	r1, r2
 80094c0:	602b      	str	r3, [r5, #0]
 80094c2:	f7f8 fc62 	bl	8001d8a <_kill>
 80094c6:	1c43      	adds	r3, r0, #1
 80094c8:	d102      	bne.n	80094d0 <_kill_r+0x1c>
 80094ca:	682b      	ldr	r3, [r5, #0]
 80094cc:	b103      	cbz	r3, 80094d0 <_kill_r+0x1c>
 80094ce:	6023      	str	r3, [r4, #0]
 80094d0:	bd38      	pop	{r3, r4, r5, pc}
 80094d2:	bf00      	nop
 80094d4:	20000974 	.word	0x20000974

080094d8 <_getpid_r>:
 80094d8:	f7f8 bc50 	b.w	8001d7c <_getpid>

080094dc <__swhatbuf_r>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	460c      	mov	r4, r1
 80094e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e4:	4615      	mov	r5, r2
 80094e6:	2900      	cmp	r1, #0
 80094e8:	461e      	mov	r6, r3
 80094ea:	b096      	sub	sp, #88	@ 0x58
 80094ec:	da0c      	bge.n	8009508 <__swhatbuf_r+0x2c>
 80094ee:	89a3      	ldrh	r3, [r4, #12]
 80094f0:	2100      	movs	r1, #0
 80094f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094f6:	bf14      	ite	ne
 80094f8:	2340      	movne	r3, #64	@ 0x40
 80094fa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80094fe:	2000      	movs	r0, #0
 8009500:	6031      	str	r1, [r6, #0]
 8009502:	602b      	str	r3, [r5, #0]
 8009504:	b016      	add	sp, #88	@ 0x58
 8009506:	bd70      	pop	{r4, r5, r6, pc}
 8009508:	466a      	mov	r2, sp
 800950a:	f000 f849 	bl	80095a0 <_fstat_r>
 800950e:	2800      	cmp	r0, #0
 8009510:	dbed      	blt.n	80094ee <__swhatbuf_r+0x12>
 8009512:	9901      	ldr	r1, [sp, #4]
 8009514:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009518:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800951c:	4259      	negs	r1, r3
 800951e:	4159      	adcs	r1, r3
 8009520:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009524:	e7eb      	b.n	80094fe <__swhatbuf_r+0x22>

08009526 <__smakebuf_r>:
 8009526:	898b      	ldrh	r3, [r1, #12]
 8009528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800952a:	079d      	lsls	r5, r3, #30
 800952c:	4606      	mov	r6, r0
 800952e:	460c      	mov	r4, r1
 8009530:	d507      	bpl.n	8009542 <__smakebuf_r+0x1c>
 8009532:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009536:	6023      	str	r3, [r4, #0]
 8009538:	6123      	str	r3, [r4, #16]
 800953a:	2301      	movs	r3, #1
 800953c:	6163      	str	r3, [r4, #20]
 800953e:	b003      	add	sp, #12
 8009540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009542:	466a      	mov	r2, sp
 8009544:	ab01      	add	r3, sp, #4
 8009546:	f7ff ffc9 	bl	80094dc <__swhatbuf_r>
 800954a:	9f00      	ldr	r7, [sp, #0]
 800954c:	4605      	mov	r5, r0
 800954e:	4639      	mov	r1, r7
 8009550:	4630      	mov	r0, r6
 8009552:	f7fd fbd3 	bl	8006cfc <_malloc_r>
 8009556:	b948      	cbnz	r0, 800956c <__smakebuf_r+0x46>
 8009558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800955c:	059a      	lsls	r2, r3, #22
 800955e:	d4ee      	bmi.n	800953e <__smakebuf_r+0x18>
 8009560:	f023 0303 	bic.w	r3, r3, #3
 8009564:	f043 0302 	orr.w	r3, r3, #2
 8009568:	81a3      	strh	r3, [r4, #12]
 800956a:	e7e2      	b.n	8009532 <__smakebuf_r+0xc>
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009576:	81a3      	strh	r3, [r4, #12]
 8009578:	9b01      	ldr	r3, [sp, #4]
 800957a:	6020      	str	r0, [r4, #0]
 800957c:	b15b      	cbz	r3, 8009596 <__smakebuf_r+0x70>
 800957e:	4630      	mov	r0, r6
 8009580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009584:	f000 f81e 	bl	80095c4 <_isatty_r>
 8009588:	b128      	cbz	r0, 8009596 <__smakebuf_r+0x70>
 800958a:	89a3      	ldrh	r3, [r4, #12]
 800958c:	f023 0303 	bic.w	r3, r3, #3
 8009590:	f043 0301 	orr.w	r3, r3, #1
 8009594:	81a3      	strh	r3, [r4, #12]
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	431d      	orrs	r5, r3
 800959a:	81a5      	strh	r5, [r4, #12]
 800959c:	e7cf      	b.n	800953e <__smakebuf_r+0x18>
	...

080095a0 <_fstat_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	2300      	movs	r3, #0
 80095a4:	4d06      	ldr	r5, [pc, #24]	@ (80095c0 <_fstat_r+0x20>)
 80095a6:	4604      	mov	r4, r0
 80095a8:	4608      	mov	r0, r1
 80095aa:	4611      	mov	r1, r2
 80095ac:	602b      	str	r3, [r5, #0]
 80095ae:	f7f8 fc4b 	bl	8001e48 <_fstat>
 80095b2:	1c43      	adds	r3, r0, #1
 80095b4:	d102      	bne.n	80095bc <_fstat_r+0x1c>
 80095b6:	682b      	ldr	r3, [r5, #0]
 80095b8:	b103      	cbz	r3, 80095bc <_fstat_r+0x1c>
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	bd38      	pop	{r3, r4, r5, pc}
 80095be:	bf00      	nop
 80095c0:	20000974 	.word	0x20000974

080095c4 <_isatty_r>:
 80095c4:	b538      	push	{r3, r4, r5, lr}
 80095c6:	2300      	movs	r3, #0
 80095c8:	4d05      	ldr	r5, [pc, #20]	@ (80095e0 <_isatty_r+0x1c>)
 80095ca:	4604      	mov	r4, r0
 80095cc:	4608      	mov	r0, r1
 80095ce:	602b      	str	r3, [r5, #0]
 80095d0:	f7f8 fc49 	bl	8001e66 <_isatty>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d102      	bne.n	80095de <_isatty_r+0x1a>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	b103      	cbz	r3, 80095de <_isatty_r+0x1a>
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	20000974 	.word	0x20000974

080095e4 <_init>:
 80095e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e6:	bf00      	nop
 80095e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ea:	bc08      	pop	{r3}
 80095ec:	469e      	mov	lr, r3
 80095ee:	4770      	bx	lr

080095f0 <_fini>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	bf00      	nop
 80095f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f6:	bc08      	pop	{r3}
 80095f8:	469e      	mov	lr, r3
 80095fa:	4770      	bx	lr
